# صناعة الإجراءات وتغييرها

[Before Web Frameworks like FastAPI?]

من أنماط البرمجة أن يقبل الإجراءُ فعلاً في عوامله أو يُنتج هو فعلاً جديدًا. والتعبير عن ذلك بالبرمجة يسمى **البرمجة الإجراءية** (*Functional Programming*).

## صناعة الإجراء

من خصائص الإجراءات في بايثون أنها أشياء (مثلها مثل الرقم) يُمكن إرجاعُها عند `return`.
فمثلاً فعل `make_power` هو فعلٌ مُنشئٌ للإجراءات التي تحسِب القوى. المتغير `n` هو متغير محلي للإجراء `make_power`، ويمكن أن يستعمل في الإجراء `power` الذي يتم إرجاعُه:

```{python}
def make_power(n):
    def power(x):
        return x ** n
    return power
```

فيُمكن إنشاء فعل تربيعي وفعل تكعيبي منه، على هذا النحو:

```{python}
square = make_power(2)
cube = make_power(3)
```

ثم يُمكن طلب هذا الإجراء من خلال القوسين `()`، كما يلي:

```{python}
print("Squares:", square(2), square(3))
print("Cubes:", cube(2), cube(3))
```

ولو صرَّحنا بالأنواع لكانت الدالة المُنشئة شكلها هكذا:

```{python}
def make_power(n: float) -> callable:
    def power(x: float) -> float:
        return x ** n
    return power
```

أما `callable` فمعناه الشيء الذي يقبلُ النداء؛ ويتحقق النداء في بايثون بالقوسين `()`. ومما يقبَلُ النداء: الإجراءات.

**والإجراء العالي** (higher-order function): هو الإجراء الذي يقبلُ فعلاً أو يُنتِجُ فعلاً.


## الإجراء ذو الحال

**الحال** (state) هي جميع المتغيرات التي في نطاق الإجراء.

فإذا أردنا أن يكون للإجراء متغيِّرًا يبني عليه معالجته اللاحقة بمعالجته السابقة، فإننا نضعه في نطاق الإجراء المنشئئ عل النحو التالي.
ونمثل على ذلك بإنشاء العداد `make_counter`:

```{python}
def make_counter(start: int, step: int) -> callable:
    count = start
    def counter() -> int:
        nonlocal count
        count += step
        return count
    return counter
```

ففي القطعة السابقة:

- الإجراء المُنشئ هو `make_counter` يقبل عاملين يحكُمان سلوك الإجراء الذي يتم إنشاؤه: `counter`
- تبدأ قيمة `count` بالقيمة المُعطاة `start`
- وفي تعريف `counter()` نلاحظ كلمة `nonlocal` التي تربط الاسم `count` بالمتغير الذي في النطاق الأعم، أي: نطاق الإجراء `make_counter`؛ وذلك حتى يُمكنه تغييره. فلولا هذه الكلمة لم يُمكن تغييره.
- نلاحظ زيادة `count` بالقيمة المعطاة `step` في فعل الإنشاء

```{python}
counter = make_counter(10, 2)

x = counter()
print(x)

y = counter()
print(y)
```

## تغيير الإجراء

**المزيِّن** (decorator) هو الإجراء الذي يأخذ فعلاً لينتج فعلاً جديدًا منه.
وشكله العام نحو:

```python
def decorator(f: callable) -> callable:
    def new_f():
        ...
    return new_f
```

مثلاً:
يُمكننا أن نحفظ نتيجة نداء الإجراء بمدخلات معيَّنة، حتى إذا ما تكرر الطلب بنفس المدخلات؛ لا نحتاج إلى تنفيذ الإجراء بتفاصيله حقيقةً، وإنَّما نعيد القيمة التي سبق حفظها. وهذا يفيد في أمرين:

1. الاقتصاد في موارد المعالجة
2. تقليل وقت الاستجابة

ويُسمَّى الإجراء الذي يحفظ مدخلاته؛ **فعلاً حافظًا** (memoized - من غير الحرف R).
ويشترط فيه أن يكون الإجراء نقيًّا؛ وهو الإجراء الذي لا تعتمد مخرجاته إلا على مدخلاته المباشرة.

```{python}
def memoize(f: callable) -> callable:
    cache = {}
    def memoized(x):
        if x in cache:
            print("Cache hit!")
            return cache[x]
        else:
            print("miss!")
            result = f(x)
            cache[x] = result
            return result
    return memoized
```

فهذا الإجراء يُنشئُ فعلاً من فعل.

1. أنشأنا في البداية `cache` قاموسًا لحفظ نتائج الإجراء .. أيًّا ما كان الإجراء.
2. عرفنا فعلاً جديدًا يسمَّى `memoized` يحسب نتيجة الإجراء المُعطى `f` بالمدخل `x`، ويحفظها في `cache` إذا لم يكن موجودًا.

فلو أن لدينا فِعلاً يأخذ مدخلاً واحدًا فقط، يُمكننا جعله فعلاً ذا حافظة، هكذا:

```{python}
def square(x):
    return x ** 2

square = memoize(square)

print(square(2))
print(square(2))
print(square(3))
```

1. في أول مرة يرى فيها الإجراء `x=2` فإنه يحسِبُ تلك القيمة ثم يحفظها ويرجعها
2. أما في المرة الثانية عند `x=2` فإنه سبق حفظها في `cache`؛ فلا نحتاج لتشغيل الإجراء `square` أصلاً، بل نسترجع النتيجة من `cache`
3. أما القيمة الجديدة `x=3` فإنها كالقيمة `x=2` أول مرة

ولأن نمط التزيين شائع في البرمجة، فقد خصصت له بايثون علامة خاصة بها: `@`.
ففي هذا المثال نزيِّن فعل `factorial` بالإجراء `memoize`، ليكون ذا ذاكرة ولا يحتاج لحساب العمليات المتسلسلة أكثر من مرة:

```{python}
@memoize
def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n - 1)
```

بل إن بايثون توفر هذه الخاصية للإجراءات عن طريق المزيِّن [`@functools.lru_cache`](https://docs.python.org/3/library/functools.html#functools.cache)، الذي يمكن استيراده من المكتبة الأساسية `functools`.
وهو الذي يجب استعماله في الواقع؛ إذ يقبل أن يكون الإجراء له أي عدد من المدخلات، وليس كما اقتصرنا فيه بالمثال السابق على عامل واحد (`x`). 

فهكذا تكون:

```{python}
import functools

@functools.lru_cache
def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n - 1)
```
