# قواعد البيانات

تمثل قاعدة البيانات الأشياء المخزَّنة بأنها مسميات ذات صفات. وتختلف في وضع هذه المسميات والصفات والعلاقات التي بينها، على طرق كثيرة، من أشهرها ثلاثة:

1. **الجدوليَّة** (Tabular) المكونة من صفوف وأعمدة **جامدة**.
2. **المُستنداتيَّة** (Document) المكونة من نصوص مقولبة بصيغة مثل جيسون (JSON) **مرنة**.
3. **العلاقاتيَّة** (Graph) المكونة من **علاقات متتابعة وكثيرة**.

فاختلافها لا من حيث ما يمكن تخزينه نظريًّا وإنما ما يتيسر عمليًّا. فطريقة تخزين البيانات على الحديد تختلف، واللغة التي بها تكتب وتُقرأ تختلف. فالأوليان تعنيان بصفات المسميات، والثالثة تعنى بالعلاقات بينها بالدرجة الأولى.

وسنختار **قاعدة البيانات المستنداتية** وذلك لخصائص قد تعتقد أنها بديهية في قواعد البيانات. إلا أنها كانت نقلة نوعيَّة عن نموذج البيانات الجدوليَّة (التي لا يزال لها فوائدها واستخداماتها الخاصة).

### الأولى: خاصية المرونة

فإننا لا نعرف جزمًا شكل البيانات التي نريده منذ اليوم الأول، ولذلك فإننا قد نضيف ونحذف من الصفات / الأعمدة كثيرًا في مستقبل الأيام أثناء التطوير.
وهذا أمر معقد في قواعد البيانات الجدوليَّة؛ بل إن له آلية خاصة تسمى الترحيل أو الهجرة (Migration).

### الثانية: مطابقة النموذج

إذ لا يختلف شكل البيانات المخزَّن عن شكلها كأشياء في لغة البرمجة. فالشيء يتضمَّن أشياء لها أنواع، وقد تكون قائمة من القيَم أو تكون مفردة، وقد تكون مرتبطة بقيَم أخرى عن طريق دلائل.
ولهذا لا تحتاج إلى طبقة إضافيَّة للتخاطب مع قاعدة البيانات (ORM) تُبعدك عنها وتزيد من التفاصيل التي تحتاج أن تراعيها.

### الثالثة: التضمين

فالبيانات التي تحتاجها مجتمعة تحفظ في مستند واحد، بدل أن تكون مفرقة في عدة جداول. مثلاً: بيانات المقال والتعليقات والمعلقين.
ففي قواعد البيانات المستنداتية تُحفظ كمستند واحد على النحو التالي:

```json
{
  "article": {
    "title": "...",
    "content": "...",
    "comments": [
      {
        "content": "...",
        "author": "..."
      }
    ]
  }
}
```

بينما في قواعد البيانات الجدوليَّة فإننا نحتاج إلى ثلاثة جداول على الأقل، على النحو التالي:

```sql
CREATE TABLE articles (
  id INT PRIMARY KEY,
  title VARCHAR(255),
  content TEXT
);

CREATE TABLE comments (
  id INT PRIMARY KEY,
  content TEXT,
  article_id INT,
  user_id INT,
  FOREIGN KEY (article_id) REFERENCES articles(id),
  FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE users (
  id INT PRIMARY KEY,
  name VARCHAR(255),
  email VARCHAR(255)
);
```

وفوق ذلك نحتاج لجمع هذه الجداول المسطحة لتنتج لنا المعلومات المرتبطة منها، على النحو التالي:


```sql
SELECT articles.title, articles.content, comments.content AS comment_content, users.name AS comment_author
FROM articles
JOIN comments ON articles.id = comments.article_id
JOIN users ON comments.user_id = users.id;
```
