---
title: ترميز النصوص
jupyter: python3
---

## ترميز الحروف

**ترميز الحروف** هي عملية تعيين أرقام للأحرف الرسومية مما يسمح بتخزينها ونقلها وتحويلها باستخدام الحواسيب الرقمية.

**رموز ASCII** تحتوي على `128` حرف للغة الإنجليزية وبعض علامات الترقيم. منها `95` فقط هي أحرف قابلة للطباعة أما البقية فتسمى أحرف تحكُّم (مثل حرف السطر الجديد `\n` ، وحرف الرجوع لبداية السطر `\r`).

ثم امتدت عن طريق **رموز ANSII** لتغطي أحرف إضافية (من `128` إلى `255`) وهي الأحرف الاتينية للغات الأخرى.


لنستكشف السلاسل عن طريق حزمة من المكتبة الأساسية `string`. الآتي الأحرف اللاتينية الكبيرة والصغيرة، وعلامات الترقيم:

```{python}
import string

print(string.ascii_letters)
print(string.punctuation)
```


## ترميز Unicode

واليوم **رموز Unicode** تحتوي على أكثر من **مليون حرف** لتغطية لغات العالم كافة: اللاتينية، اليونانية، السيريلية، الأرمنية، العبرية، **العربية**، السريانية، الثانا، الديفاناغارية، البنغالية، الجورموخية، الأورية، التاميلية، التيلوغوية، الكانادية، المالايالامية، السنهالية، التايلاندية، اللاوية، التبتية، الميانمارية، الجورجية، الهانغول، الإثيوبية، الشيروكية، الرموز الكندية الأصلية، الخميرية، المنغولية، الهان (الأيدوغراف الياباني، الصيني، الكوري)، الهيراغانا، الكاتاكانا، واليي. [المصدر](https://www.unicode.org/faq/basic_q.html#:~:text=The%20simplest%20answer%20is%20that,%2C%20Myanmar%2C%20Georgian%2C%20Hangul%2C). وما يزال أول `128` حرف منها متطابق مع رموز ASCII.


### مثال

ماذا يحصل لو كتبنا حروف عربية ثم حاولنا حفظ الملف بترميز ASCII ولم نحفظه بترميز Unicode؟

![برنامج نوتباد في وندوز بكلام عربي يظهر بشكل استفهامات](assets/save_ascii_arabic.png)

الخطأ يقول: "This file contains characters in Unicode format which will be lost if you save this file as an ANSI encoded text file. To keep the Unicode information, click Cancel below and then select one of the Unicode options from the Encoding drop down list. Continue?"


## كيف يتم تمثيل النصوص في بايثون؟

تمثيل النصوص في بايثون يكون عن طريق النوع `str`؛ يُعرَّف بكتابة سلسلة من الأحرف لكن في الواقع تتحول إلى سلسلة من رموز Unicode (أي: أرقام). هذا يعني أنها قد تكون سلسلة رموز لاتينية أو عربية أو صينية أو غير ذلك مما تحويه رموز Unicode.

الدالة المدمجة **ord()** تقوم بتحويل الحرف إلى رقم الرمز. بينما **chr()** تعكس ذلك (من الرمز إلى الحرف).

على النقيض من سي وجافا؛ لا يوجد نوع خاص بالحرف الواحد (`char`) في بايثون.


```{python}
print(ord("A"), ord("Z"))
print(chr(65), chr(90))
print(ord("a"), ord("z"))
print(ord("0"), ord("9"))
```

ماذا عن الحروف العربية؟ أين تقع في أرقام ترميز Unicode؟

```{python}
# Arabic Unicode points are between 1536 and 1791
print(ord("أ"), hex(ord("أ")))
print(ord("ب"), hex(ord("ب")))
print(ord("ي"), hex(ord("ي")))
print(ord('َ'), hex(ord('َ')))
print(ord('ُ'), hex(ord('ُ')))
```

راجع [ويكيبيديا: النص العربي في Unicode](https://en.wikipedia.org/wiki/Arabic_script_in_Unicode) لمزيد من التفاصيل.



### الأحرف البيضاء (Whitespace Characters)

الأحرف في الأجهزة الرقمية على نوعين:

1. **أحرف مطبوعة**: مثلاً: الأحرف اللاتينية والأرقام وعلامات الترقيم
2. **أحرف تحكُّم**: مخفيَّة؛ والغرض منها التحكم بمعالج هذا النص

لعرض الأحرف القابلة للطباعة في محارف آسكي (ASCII)، لدينا المعرَّف `printable` من مكتبة `string`:

```{python}
import string
string.printable
```

كانت أحرف التحكُّم تستخدم لرن جرس الآلة الطابعة ، والتحكم بها ، لكن اليوم الذي يُستخدم منها غالبًا هو [**الأحرف البيضاء**](https://docs.python.org/3/library/string.html#string.whitespace) ويشمل ذلك الأحرف التالية:

1. space: ` ` ويمثل المسافة كالتي بين الكلمات
2. tab: `\t` ويمثل المسافة كالتي بين أعمدة الجداول
3. linefeed: `\n` تعليمة سطر جديد
4. return: `\r` تعليمة العودة لبداية السطر الجديد
5. formfeed: `\f` تعليمة الصفحة الجديدة
6. vertical tab: `\v` تعليمة العمود الجديد
7. backspace: `\b` تعليمة عودة المؤشر بمقدار حرف واحد للكتابة فوق الحرف السابق

أما الثلاثة الأخيرة فقد كانت تستخدم فيما مضى، لكن اليوم المستخدم هو الأربعة الأولى فقط. ويجدر بالذكر أن ملفات نصوص نظام ويندوز تستعمل `\r\n` للانتقال لسطر جديد بينما تستعمل الأنظمة الأخرى `\n` فقط.

تذكر أن بايثون تعتمد على `space` و `tab` للمسافة البادئة للسطر (indentation)، لتحديد نطاقات الكود بحسب المحاذاة العمودية.

```{python}
import string
string.whitespace
```

يهمنا هنا الأحرف البيضاء لأنها تظهر في النصوص وقد تكون مزعجة عند معالجتها. لنلقي نظرة على ثلاثة من الأحرف البيضاء: المسافة (space)، التبويب (tab)، وتعليمة السطر الجديد (linefeed).

```{python}
# Tab character: "\t"
print('A\tB')
```

```{python}
# Space character: " "
print('   A            B   ')
```

```{python}
# Newline character: '\n'
print('A\nB')
```

لاحظ أن طول السلسلة النصية هو عدد الأحرف في السلسلة، سواء كانت **قابلة للطباعة** (printable) أو **أحرف بيضاء** (whitespace).

```{python}
assert len('A B') == 3
assert len('A\tB') == 3
assert len('A\nB') == 3
```

### `.strip()`

لاحظ أن هذه الدالة ستزيل الأحرف البيضاء من بداية ونهاية السلسلة النصية، ولكن ليس الأحرف البيضاء في منتصف السلسلة

قبل:

```{python}
text = '\t hello    world \n\n\n'
print(text)
```

بعد:

```{python}
print(text.strip())
```

### `.split()`

انظر: [Splitlines](https://docs.python.org/3/library/stdtypes.html#str.splitlines)

```{python}
text = '''
Hello
World

How are you?
'''
```

إذا تركنا الكود كما هو في السطر من غير `print` فإن ذلك يعرض السلسلة النصية كما هي (بما في ذلك أحرف المسافات البيضاء)

```{python}
text
```

أما إذا وضعنا `print` فإنه يطبع الأحرف المرئية ، وينسِّقُ المظهر بناءً على أحرف التحكُّم المخفية:

```{python}
print(text)
```

```{python}
text.splitlines()
```

إذا لم نحدد محدد الفاصل فإن الفاصل الافتراضي هو المسافة.

```{python}
print("Hello, world".split())
```

هنا نحدد الفاصل أنه الحرف `"l"`:

```{python}
print("Hello, world".split("l"))
```
