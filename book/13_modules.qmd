# الاستيراد والتصدير

عندما يكبر الكود المكتوب ويتعقد، فإننا كثيرًا ما نلجأ لتقسيمه في ملفات منفصلة وذلك ليكون كل ملف مسؤولاً عن جزئية معيَّنة.

أو قد نرى أن جزءًا من الكود يستحق الاستعمال في مشروع آخر، فنريد أن نلفَّه في حزمة، ونصدِّره ليكون قابلاً للتثبيت في مشاريع أخرى.

هاتان الحالتان تستوجبان أن نتعرف على مصطلحين في بايثون: الوحدة والحزمة.

**الوِحدة** (Module) هي مجموعة الكود في الملف الواحد (مثل: `script.py`)

**الحزمة** (Package) هي مجموعة مكوَّنة من وِحدة أو أكثر؛ وتُعرَّف: بمجلَّد يكون فيه ملف خاص باسم `__init.py__` وهو الكود الذي يعمل عند أمر استيراد الحزمة بالكلمة `import` (في المرة الأولى فقط).

[فيما يلي مثال](./examples/packages/) يوضِّح ترتيب حزمة ما (`my_package`) مكوَّنة من حزم مضمَّنة، وفي المستوى الأخير نرى الوحدات، على النحو التالي:

```
│   main1.py
│   main2.py
│
└───my_package
    │   __init__.py
    │
    ├───pkg1
    │   │   __init__.py
    │   │   module_a.py
    │   │   module_b.py
    │
    ├───pkg2
    │   │   __init__.py
    │   │   module_a.py
    │   │   module_b.py
    │   │   module_c.py
```

- الملف `main.py` هو المكان الذي سنكتب فيه الكود لتجربة عبارات الاستيراد (`import`).
- نقول إن المجلدين `pkg1` و`pkg2` هما: حزم فرعية من حزمة `my_package`، ويمكن استيرادهما بشكل مستقل.
- الملفات `module_a.py` و`module_b.py` و`module_c.py` هي وحدات داخل الحزم الفرعية.
- يستخدم الملف `__init__.py` علامةً للمجلَّد أنه حزمة؛ ولا يلزم أن يتضمن أي كود، ولكنه غالبًا ما يحتوي على كود تهيئة للحزمة.

دعنا نلقي نظرة على عمليات الاستيراد واحدة تلو الأخرى (انظر  [`main.py`](./examples/packages/main1.py)):


```python
import my_package
from my_package.pkg1 import module_a
from my_package.pkg2.module_a import func_a
from my_package.pkg2.module_b import *
```

أولاً، لاحظ أن أمر الاستيراد `import my_package` يحدد حزمة لا وحدة. وبالتالي، سينفذ الملف `__init__.py`، الذي يحتوي على عبارات تعيين (مثل `__version__`، و`DEFAULT_TIMEOUT`، وما إلى ذلك) سترتبط بمعرف `my_package`، ويمكن الوصول إليها باستخدام النقطة (`.`).

ثانيًا لاحظ العبارة: `from my_package.pkg1 import module_a` فهي تحدد وحدة (`module_a`)، وبالتالي، يتم تنفيذ جميع التعليمات البرمجية في `module_a.py` والتعيينات تُسنَد للمعرف `module_a` ويمكن الوصول إليها باستخدام النقطة (`.`).

ثالثًا استيراد مباشر للإجراء `func_a` من وحدة `module_a` في الحزمة الفرعية `pkg2`.

أخيرًا الصيغة `from ... import *` تستورد جميع (`*`) الأسماء من الوحدة النمطية (باستثناء تلك التي تبدأ بـ `__`) إلى نطاق التسمية الحالي (في الوحدة التي نحن فيها). بشكل عام، لا ننصح باستعمال هذه الطريقة، حيث قد تؤدي إلى إلغاء أسماء سبق تعريفها لتحل مكانها هذه الأسماء الجديدة، ولكن لا بأس بها لتقليل جهد الكتابةخصوصًا في الجلسات التفاعلية.

## تثبيت حزم

لتثبيت حزمة من قاعدة بيانات الحزم [PyPI](https://pypi.org/) نستعمل الأمر `pip` (إذْ تم تثبيته مع حزمة بايثون) على النحو التالي:


```bash
pip install pandas
```

وبعد تثبيت الحزمة ، نستوردها هكذا ونستعملها:


```{python}
import pandas as pd

df = pd.read_csv('datasets/students.csv')
df
```

## تغليف مشاريع بايثون

يرشدك [دليل حزم مشاريع بايثون](https://packaging.python.org/en/latest/tutorials/packaging-projects/) لكيفية تغليف المشاريع لترفعها في قاعدة بيانات الحزم. فيه توضيح كيفية إضافة الملفات والبنية اللازمة لإنشاء الحزمة، وكيفية بناء الحزمة، وكيفية تحميلها إلى **Python Package Index** (PyPI) حتى يمكن تثبيتها باستخدام `pip install your-package` كما تفعل مع الحزم الأخرى.


## تنفيذ الوحدة بمدخلات
يمكنك تمرير مدخلات لوحدة مكتوبة بالبايثون عن طريق كتابتها بعد اسم البرنامج، على النحو التالي: `python my_program.py arg1 arg2 arg3`.

ستوفر لك مكتبة `sys` هذه المدخلات في معرَّف `sys.argv` وهو قائمة من النصوص، حيث أوَّل عنصر هو اسم البرنامج، ويتبعه بعد ذلك المدخلات: `arg1, arg2, arg3` التي تم تمريرها.

ألق نظرة على الملف [`main2.py`](./examples/packages/main2.py). تجد إجراء جمع رقمين، نريد أن يكونا من مدخلات المستخدم:


```python
def add_two(a, b):
    return a + b
```

نقوم بتشغيل البرنامج وتمرير المدخلات هكذا:



```bash
python main2.py 10 20
```

بعدها نأخذ المدخلات (بدءًا من العنصر الثاني في القائمة) ، ونحولها إلى عدد ، ثم نمررها للدالة ونعرض النتيجة:



```python
a = int(sys.argv[1])
b = int(sys.argv[2])
result = add_two(a, b)
print(result)
```

## نقاط أخيرة

من المعتاد (ولكن ليس مطلوبًا) وضع جميع عبارات [`import`](https://docs.python.org/3/reference/simple_stmts.html#import) في أول الكود.

من الجيد أن تستورد الوحدات بالترتيب التالي:

1. وحدات المكتبة المضمَّنة - على سبيل المثال [`sys`](https://docs.python.org/3/library/sys.html#module-sys)، [`os`](https://docs.python.org/3/library/os.html#module-os)، [`argparse`](https://docs.python.org/3/library/argparse.html#module-argparse)، [`re`](https://docs.python.org/3/library/re.html#module-re)
2. الوحدات التي تم تثبيتها - على سبيل المثال: `dateutil` و`requests` و`PIL.Image`
3. وحدات محلية

