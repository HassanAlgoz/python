# التعبير المختصر

مما يميز لغة بايثون **اختصاراتها** التي نراها كثيرًا ما تستعمل. فهي ليسَت أمرًا ضروريًّا في اللغة إلا أن كثرة استعمالها يوجب علينا فهمها (في حال استعملها غيرنا) إضافةً إلى أن فيها قوة في التعبير.

افترض أننا نريد حساب مربع كل عدد في قائمة، نستطيع كتابة ذلك المنطق بالشكل التالي:


```{python}
squares = []
for x in range(10):
    squares.append(x ** 2)
squares
```

إذا أردنا تفكيك ذلك فنقول: المُدخل قائمة، والمخرج قائمة. إذًا يمكن كتابة ذلك [باختصار]((https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions)) في سطرٍ واحد على النحو: قوس مربع متبوعًا بعبارة ناتجة متبوعًا بقطعة `for` وقد يكون متبوعًا بمرة أو أكثر من قطع `for` (للتكرار أكثر) أو `if` (للترشيح). وهذا مثال: 

```{python}
squares = [x ** 2 for x in range(10)]
```

لو أردنا ترشيح الأعداد الزوجية من القائمة، نستطيع استعمال قطعة `if` في الاختصار على النحو التالي:


```{python}
numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
evens = [x for x in numbers if x % 2 == 0]
```

ندمج القطعتين (عبارة الناتج من التكرار مع قطعة التشريح `if`) لنحصل على مربع الأعداد الزوجية فقط:


```{python}
squared_evens = [x ** 2 for x in numbers if x % 2 == 0]
```

فهذه ثلاثة جمل:

1. جملة الناتج: `x ** 2`
2. جملة التكرار: `for x in numbers`
3. جملة الترشيح: `if x % 2 == 0`

وإليك بعض[ الأمثلة الإضافية](https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions):

```{python}
vec = [-4, -2, 0, 2, 4]
```

ترشيح الأعداد الموجبة (لاحظ أن عبارة الناتج تأخذ المكرر مثل ما هو: `x` ولا تعدل عليه):

```{python}
[x for x in vec if x >= 0]
```

هنا عبارة الناتج تستعمل الإجراء `abs(x)` لأخذ القيمة المطلقة (بحيث تحول السالب إلى رديفه الموجب):

```{python}
[abs(x) for x in vec]
```

وفي هذا المثال استعمال الإجراء المتعلق بكل ناتج نصي من التكرار على قائمة من النصوص:

```{python}
freshfruit = ['  banana', '  loganberry ', 'passion fruit  ']
[weapon.strip() for weapon in freshfruit]
```

قطعة الناتج هنا هي صفّ مكوَّن من الرقم ومربعه ، وذلك من تكرارٍ على `range(6)` والذي يبدأ من `0` وينتهي عند `5` كما نعرف:

```{python}
[(x, x ** 2) for x in range(6)]
```

لاحظ أن العبارة مبهمة إذا لم تحدد القوسين لتحديد الصف في العبارة الناتجة:

```{python}
#| error: true
[x, x ** 2 for x in range(6)]
```

يمكن استعمال اختصار من اختصار على النحو التالي. في هذا المثال نفرد قائمة مكونة من قوائم عددية، فنحوِّلها لتكون قائمة واحدة مكوَّنة من جميع هذه الأرقام:


```{python}
vec = [[1,2,3], [4,5,6], [7,8,9]]
[num for elem in vec for num in elem]
```

إذا كتبناها من غير اختصار فشكلها كالتالي (لاحظ استعملنا متغير `flat` لتجميع القيَم المفردة):


```{python}
flat = []
for elem in vec:
    for num in elem:
        flat.append(num)
flat
```

وهذا مثال لحاصل الضرب الديكارتي بين مجموعتين رياضيتين:

```{python}
colors = ['red', 'green']
shapes = ['circle', 'square']
cartesian_product = [(color, shape) for color in colors for shape in shapes]
cartesian_product
```

يمكن استعمال التعبيرات المختصرة أيضًا مع المجموعات الرياضية والقواميس!

عكس قاموس بحيث تصبح الدلائل هي القيم والقيم هي الدلائل:

```{python}
idx2label = {
    0: 'cat',
    1: 'dog',
    2: 'bird',
}

label2idx = {label: idx for idx, label in idx2label.items()}
label2idx
```

هنا مثال لقاموس من الفواكه، نريد ترشيح ما قيمته أقل من 20:

```{python}
menu = {
    'apple': 15,
    'banana': 10,
    'orange': 5,
    'cantaloupe': 40
}

filtered_menu = {key: value for key, value in menu.items() if value < 20}
filtered_menu
```

وهذا مثال أكثر تعقيدًا. نطبق خصم 20% فقط على العناصر التي يكون سعرها أعلى من المتوسط، مع الحفاظ على بقية الأسعار كما هي. لاحظ أن التعبير هنا هو تعيين شرطي: `value * (1 - discount) if value > avg_price else value` وليس هو قطعة الترشيح (`if`)؛ إذ تلك تأتي في نهاية الجملة، بعد قطعة التكرار (`for`).

```{python}
menu = {
    'apple': 15,
    'banana': 10,
    'orange': 5,
    'cantaloupe': 40
}

avg_price = sum(menu.values()) / len(menu)
discount = 0.20

discounted_menu = {
    key: value * (1 - discount) if value > avg_price else value
    for key, value in menu.items()
}
discounted_menu
```

ربما تكون هذه الأمثلة صعبة في البداية ، لكنها مع الممارسة تكون أسهل وأسهل.

نلخص الصِّيَغ في كتابة الاختصارات لثلاثة أنواع مجموعات أساسية في بايثون:

- عبارة الاختصار للقائمة: `[expression for item in iterable if condition]`
- عبارة الاختصار للمجموعة الرياضية: `{expression for item in iterable if condition}`
- عبارة الاختصار للقاموس: `{key: value for item in iterable if condition}`

