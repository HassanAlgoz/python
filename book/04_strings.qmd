---
title: النصوص
jupyter: python3
---

```{mermaid}
graph TD
    A[Object]
    
    A --> A3[Sequences متتابعة]
    A3 --> A311[Strings سلسلة]
    A3 --> A312[Tuples زوج]
    A3 --> A313[Bytes بايت]
    A3 --> A321[Lists قائمة]
```


## ترميز الحروف

**ترميز الحروف** هي عملية تعيين أرقام للأحرف الرسومية مما يسمح بتخزينها ونقلها وتحويلها باستخدام الحواسيب الرقمية.

**رموز ASCII** تحتوي على `128` حرف للغة الإنجليزية وبعض علامات الترقيم. منها `95` فقط هي أحرف قابلة للطباعة أما البقية فتسمى أحرف تحكُّم (مثل حرف السطر الجديد `\n` ، وحرف الرجوع لبداية السطر `\r`).

ثم امتدت عن طريق **رموز ANSII** لتغطي أحرف إضافية (من `128` إلى `255`) وهي الأحرف الاتينية للغات الأخرى.


لنستكشف السلاسل عن طريق حزمة من المكتبة الأساسية `string`. الآتي الأحرف اللاتينية الكبيرة والصغيرة، وعلامات الترقيم:

```{python}
import string

print(string.ascii_letters)
print(string.punctuation)
```


### ترميز Unicode

واليوم **رموز Unicode** تحتوي على أكثر من **مليون حرف** لتغطية لغات العالم كافة: اللاتينية، اليونانية، السيريلية، الأرمنية، العبرية، **العربية**، السريانية، الثانا، الديفاناغارية، البنغالية، الجورموخية، الأورية، التاميلية، التيلوغوية، الكانادية، المالايالامية، السنهالية، التايلاندية، اللاوية، التبتية، الميانمارية، الجورجية، الهانغول، الإثيوبية، الشيروكية، الرموز الكندية الأصلية، الخميرية، المنغولية، الهان (الأيدوغراف الياباني، الصيني، الكوري)، الهيراغانا، الكاتاكانا، واليي. [المصدر](https://www.unicode.org/faq/basic_q.html#:~:text=The%20simplest%20answer%20is%20that,%2C%20Myanmar%2C%20Georgian%2C%20Hangul%2C). وما يزال أول `128` حرف منها متطابق مع رموز ASCII.


#### مثال
ماذا يحصل لو كتبنا حروف عربية ثم حاولنا حفظ الملف بترميز ASCII ولم نحفظه بترميز Unicode؟

![برنامج نوتباد في وندوز بكلام عربي يظهر بشكل استفهامات](assets/save_ascii_arabic.png)

الخطأ يقول: "This file contains characters in Unicode format which will be lost if you save this file as an ANSI encoded text file. To keep the Unicode information, click Cancel below and then select one of the Unicode options from the Encoding drop down list. Continue?"


## كيف يتم تمثيل النصوص في بايثون؟

تمثيل النصوص في بايثون يكون عن طريق النوع `str`؛ يُعرَّف بكتابة سلسلة من الأحرف لكن في الواقع تتحول إلى سلسلة من رموز Unicode (أي: أرقام). هذا يعني أنها قد تكون سلسلة رموز لاتينية أو عربية أو صينية أو غير ذلك مما تحويه رموز Unicode.

الدالة المدمجة **ord()** تقوم بتحويل الحرف إلى رقم الرمز. بينما **chr()** تعكس ذلك (من الرمز إلى الحرف).

على النقيض من سي وجافا؛ لا يوجد نوع خاص بالحرف الواحد (`char`) في بايثون.


```{python}
print(ord("A"), ord("Z"))
print(chr(65), chr(90))
print(ord("a"), ord("z"))
print(ord("0"), ord("9"))
```

ماذا عن الحروف العربية؟ أين تقع في أرقام ترميز Unicode؟

```{python}
# Arabic Unicode points are between 1536 and 1791
print(ord("أ"), hex(ord("أ")))
print(ord("ب"), hex(ord("ب")))
print(ord("ي"), hex(ord("ي")))
print(ord('َ'), hex(ord('َ')))
print(ord('ُ'), hex(ord('ُ')))
```

راجع [ويكيبيديا: النص العربي في Unicode](https://en.wikipedia.org/wiki/Arabic_script_in_Unicode) لمزيد من التفاصيل.

## السلاسل النصية (Strings)

السلسلة النصية هي متتالية من أحرف بترميز Unicode.

تُستخدم غالباً مع البيانات النصية مثل:

- الأسماء
- العناوين
- الرسائل
- البيانات النصية شبه المهيكلة مثل: CSV, JSON, XML, ...وغيرها

```{python}
name = 'Adam' # String literals can use single quotes
address = "Riyadh, Saudi Arabia" # or double quotes; it does not matter
```

```{python}
# Triple quoted strings may span multiple lines.
# All associated whitespace will be included in the string literal.
message = """Hello everyone,
I hope you are enjoying the course,

Thank you.
"""
print(message)
```

لمعرفة طول السلسلة:

```{python}
phone = "123456789"
len(phone)
```

## دوال السلاسل النصية

- السلاسل النصية هي **كائنات**، مثل أي شيء في بايثون.
- الكائنات لديها **دوال مضافة (Methods)** يمكن **استدعاؤها** باستخدام المعامل `.` متبوعًا بـ `()` (قوسين):

... سنتناول هذا بمزيد من التفصيل في الدروس القادمة.

هناك العديد من الدوال المتاحة للعمل على السلاسل النصية في بايثون. الجدول أدناه يعطي نظرة عامة على أكثر دوال السلاسل النصية استخدامًا:

**دوال السلاسل النصية الأساسية**

| الدالة | الوصف |
|---|---|
| `.upper()` | تحويل السلسلة النصية إلى أحرف كبيرة. |
| `.lower()` | تحويل السلسلة النصية إلى أحرف صغيرة. |
| `.find()` | إيجاد فهرس (index) سلسلة فرعية داخل سلسلة نصية. |
| `.replace()` | استبدال تكرارات سلسلة فرعية داخل سلسلة نصية. |
| `.startswith()` | التحقق مما إذا كانت السلسلة النصية تبدأ بمقدمة محددة. |
| `.endswith()` | التحقق مما إذا كانت السلسلة النصية تنتهي بنهاية محددة. |
| `.count()` | عد عدد تكرارات سلسلة فرعية داخل سلسلة نصية. |
| `.split()` | تقسيم السلسلة النصية إلى قائمة من السلاسل الفرعية بناءً على محدد. |
| `.join()` | دمج عناصر قابل للتكرار في سلسلة نصية باستخدام فاصل. |
| `.strip()` | إزالة المسافات البيضاء من بداية ونهاية السلسلة النصية. |

راجع [ملحق دوال السلاسل](string_methods.qmd) لمزيد من التفاصيل.

لنستكشف بعض دوال السلاسل النصية:
 
```{python}
print("hello".upper())
print("HeLLO".lower())
```

```{python}
name = "adam ibraheem"

print(name.capitalize())
print(name.title())
```

يمكن التعرف على الدوال المدمجة للسلسلة عن طريق الدالة `help`:

```{python}
help(str.title)
# str.title? # in Jupyter
```

### `count`, `find`, and `replace`

```{python}
name = "Adam Ibraheem"

print(name.count('a'))
print(name.find('a'))
print(name.replace('a', 'x'))
```

### الأحرف البيضاء (Whitespace Characters)

الأحرف في الأجهزة الرقمية على نوعين:
1. **أحرف مطبوعة** (مثلاً: الأحرف اللاتينية والأرقام وعلامات الترقيم)
2. **أحرف تحكُّم** (مخفيَّة؛ والغرض منها التحكم بمعالج هذا النص)

```{python}
import string
string.printable
```

كانت أحرف التحكُّم تستخدم لرن جرس الآلة الطابعة ، والتحكم بها ، لكن اليوم الذي يُستخدم منها غالبًا هو [**الأحرف البيضاء**](https://docs.python.org/3/library/string.html#string.whitespace) ويشمل ذلك الأحرف التالية:
1. space ويمثل المسافة كالتي بين الكلمات
2. tab ويمثل المسافة كالتي بين أعمدة الجداول
3. linefeed تعليمة سطر جديد
4. return تعليمة العودة لبداية السطر الجديد
5. formfeed تعليمة الصفحة الجديدة
6. vertical tab تعليمة العمود الجديد

```{python}
import string
string.whitespace
```

لنلقي نظرة على ثلاثة من الأحرف البيضاء: المسافة (space)، التبويب (tab)، وتعليمة السطر الجديد (linefeed).

```{python}
# Tab character: "\t"
print('A\tB')
```

```{python}
# Newline character: '\n'
print('A\nB')
```

لاحظ أن طول السلسلة النصية هو عدد الأحرف في السلسلة، سواء كانت **قابلة للطباعة** (printable) أو **أحرف بيضاء** (whitespace).

```{python}
print(len('A B'))
print(len('A\tB'))
print(len('A\nB'))
```

بشكل عام، إذا أخذنا سلسلة نصية وأضفنا إليها هذه الأحرف، نحصل على نفس الطول زائد 3:

```{python}
s = 'Salam'
assert len(s + '\n\t ') == len(s) + 3
```

### `.strip()`

لاحظ أن هذه الدالة ستزيل الأحرف البيضاء من بداية ونهاية السلسلة النصية، ولكن ليس الأحرف البيضاء في منتصف السلسلة

قبل:

```{python}
text = '\t hello    world \n\n\n'
print(text)
```

بعد:

```{python}
print(text.strip())
```

### `.split()`

انظر: [Splitlines](https://docs.python.org/3/library/stdtypes.html#str.splitlines)

```{python}
text = '''
Hello
World

How are you?
'''
```

إذا تركنا الكود كما هو في السطر من غير `print` فإن ذلك يعرض السلسلة النصية كما هي (بما في ذلك أحرف المسافات البيضاء)

```{python}
text
```

أما إذا وضعنا `print` فإنه يطبع الأحرف المرئية ، وينسِّقُ المظهر بناءً على أحرف التحكُّم المخفية:

```{python}
print(text)
```

```{python}
text.splitlines()
```

إذا لم نحدد محدد الفاصل فإن الفاصل الافتراضي هو المسافة.

```{python}
print("Hello, world".split())
```

هنا نحدد الفاصل أنه الحرف `"l"`:

```{python}
print("Hello, world".split("l"))
```

### `.join()`

هذه الدالة تدمج عناصر في متتالية مع وضع فاصل بينها.

```{python}
names = ["Adam", "Belal", "Camal"]
seperator = ','
print(seperator.join(names)) 
print(''.join(names))
print(' + '.join(names))
```

## Repetition

يمكن تكرار السلسلة النصية باستخدام العامل `*`:

```{python}
s = "Salam " * 3
print(s)
```

كذلك يمكنك وضعه مع الأحرف التي تمثل الأرقام:

```{python}
zeros = "0" * 3
x = "1" + zeros
print(x)
```

لكن لاحظ الآتي:

```{python}
x + x
```

- توقعنا `1000`، لكن حصلنا على `10001000`. لماذا؟
- لأن `x` هي سلسلة نصية (string)، وعامل `+` يقوم بدمج السلاسل النصية.

لنقم بتحويل `x` إلى عدد صحيح باستخدام `int()`:

```{python}
z = int(x)
z + z
```

## Concatenation

نريد أن نكون قادرين على كتابة:

```{python}
#| error: true

lvl = 20
sentence = "I want to reach level " + lvl
print(sentence)
```

يظهر خطأ! لماذا؟ .. رسالة الخطأ تخبرنا أنه لا يمكننا دمج سلسلة نصية مع عدد صحيح.

كيف نحل هذه المشكلة؟ نقوم بتحويل العدد الصحيح إلى سلسلة نصية باستخدام `str()`:

```{python}
age = 40
sentence = "My name is Adam and I am " + str(age) + " years old."
print(sentence)
```

لاحظ أننا نضيف حرفي مسافة، واحدة بعد "am" وواحدة قبل "years" لجعل الجملة قابلة للقراءة.

حاول القيام بذلك للجملة السابقة مع `lvl`:

```{python}
# try it
```

## تنسيق السلاسل النصية

نستعرض ثلاث طرق لدمج السلاسل النصية في بايثون:

**أولاً**، دمج السلاسل النصية الفردية باستخدام عامل `+` (كما فعلنا سابقًا).

- بسيط، ولكن لا يوفر تحكمًا في التنسيق
- كما يجب عليك تحويل الأرقام إلى سلاسل نصية باستخدام الدالة المُضافَة [`str()`](https://docs.python.org/3/library/stdtypes.html#str)

**ثانيًا**، استخدام الدالة المُضافَة [`.format()`](https://docs.python.org/3/library/stdtypes.html#str.format).

حيث يتم تحديد حقول الاستبدال بواسطة الأقواس `{}`. يحتوي كل حقل استبدال على:

1. **الفهرس الرقمي** للمعامل الموضعي (يبدأ من `0`)، أو
2. اسم **المعامل بالكلمة المفتاحية** (إذا كان المعامل قاموسًا).

**ثالثًا**، استخدام [f-strings](https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals).

> سلسلة نصية مهيكلة أو f-string هي سلسلة نصية مسبوقة بالحرف 'f' أو 'F'. قد تحتوي هذه السلاسل على حقول استبدال، وهي تعبيرات محددة بواسطة الأقواس المعقوفة {}. بينما تحتوي السلاسل النصية الأخرى دائمًا على قيمة ثابتة، فإن السلاسل النصية المهيكلة هي تعبيرات يتم تقييمها في وقت التشغيل. [المستندات](https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals)


```{python}
name = "John"
lvl = 300

x1 = "My name is " + name + " and I want to reach level " + str(lvl) # + operator
x2 = "My name is {} and I want to reach level {}".format(name, lvl)  # .format() method
x3 = f"My name is {name} and I want to reach level {lvl}"            # f-strings
assert x1 == x2 == x3
print(x1)
```

#### تمرين

اطبع الجملة `"Hello, my name is John Doe. and I am 30 years old"`. باستخدام المتغيرات `first_name`، `last_name`، و `age` عبر الطرق الثلاث المذكورة آنفًا:


```{python}
# try it
```

### المحاذاة والحشو (Alignment and Padding)

```{python}
print(name.ljust(15)) 
print(name.center(15))
```

طريقة ممتعة لتزيين سلسلة نصية باستخدام دالة `center`:


```{python}
print('*' * 20)
print('Adam'.center(20, "*"))
print('*' * 20)
```

#### Exercise

قم بصياغة الكود السابق لتعريف ثلاثة متغيرات واستخدامها في تزيين الاسم:

- `name`
- `width`
- `decorator`

```{python}
# try it
name = 'Adam'
```

## تنسيق الأرقام

### محاذاة الأرقام

```{python}
print(f'{100:10}')
print(f'{1000:10}')
print(f'{10000:10}')
```


يمكننا أيضًا جعل كل من العدد `n` والتعبئة `p` متغيرات:


```{python}
n = 100
p = 5
print(f'{n:{p}}')
```

بشكل افتراضي، يتم محاذاة الرقم إلى اليمين. يمكننا محاذاته إلى اليسار بإضافة `<`. لاحظ الفرق بين التعبيرين أدناه:

```{python}
print(f'{n:>{p}}')
print(f'{n:<{p}}')
```

### فاصل الآلاف

```{python}
big_num = 10000
print(f'{big_num}')
print(f'{big_num:,}')
```

### الترميز العلمي (Scientific Notation)


```{python}
small_num = 1e-4
print(f"{small_num:.2e}")
```

### الأعداد العشرية (Decimals)

```{python}
num = 10.5689
print(f'{num}')
print(f'{num:.4f}')
print(f'{num:.2f}')
print(f'{num:.0f}')
```

#### مثال: تنسيق الكم المالي

هنا نستخدم مكونين داخل الأقواس المعقوفة وعلامة `$` في البداية:
- يتم إضافة علامة `$` قبل الرقم (ليست جزءًا من الرقم المنسق على الإطلاق)
- `,` تضيف فاصل الآلاف
- `.2f` يقوم بتقريب الرقم إلى منزلتين عشريتين


```{python}
price = 2978.95
print(f"${price:,.2f}")
```

### تنسيق كتابة القيَم العددية الثابتة (Number literal formats)

[**الحروفيَّة**](https://docs.python.org/3/reference/lexical_analysis.html#literals) هي رموز للقيم الثابتة لبعض الأنواع المدمجة. مثال: `42` هو حرفيُّ عدد صحيح و `3.14` هو حرفيُّ عدد عشري.

تسمح بايثون بطرق أكثر قابلية للقراءة في كتابة الحروفية العددية:

- يمكن استخدام الشرطة السفلية `_` في الأرقام لفصلها لتحسين القراءة
- يمكن استخدام `e` أو `E` لتمثيل الترميز العلمي
- `0b` أو `0B` للأرقام الثنائية
- `0o` أو `0O` للأرقام الثمانية
- `0x` أو `0X` للأرقام الست عشرية
- `j` أو `J` للأعداد المركبة

وإليك تطبيق ذلك:

```{python}
assert 1e-4 == 0.0001
assert 1_000_000 == 1000000
assert 0b1010 == 10
assert 0o10 == 8
assert 0x10 == 16
assert 1 + 2j == 2j + 1
```

## المراجع

- [Text Sequence Type — str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str)
- [String methods](https://docs.python.org/3/library/stdtypes.html#string-methods)
- [Text Processing Services](https://docs.python.org/3/library/text.html#textservices)
- [Common string operations](https://docs.python.org/3/library/string.html)
- [`printf`-style String Formatting](https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting)
- [PyFormat](https://pyformat.info/)