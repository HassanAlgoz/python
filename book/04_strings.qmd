---
title: السلاسل
jupyter: python3
---

```{mermaid}
graph TD
    A[Object]
    
    A --> A3[Sequences متتابعة]
    A3 --> A311[Strings سلسلة]
    A3 --> A312[Tuples زوج]
    A3 --> A313[Bytes بايت]
    A3 --> A321[Lists قائمة]
```


## Character Encoding

**Character encoding** is the process of assigning numbers to graphical characters, especially the written characters of human language, allowing them to be stored, transmitted, and transformed using digital computers.

**ASCII** codes represent text in digital devices. ASCII has just `128` code points, of which only `95` are printable characters (English-only). The set of available punctuation had significant impact on the syntax of computer languages and text markup.

**ANSII** contain further characters from `128` to `255`, which differ based on language.

**Unicode** has over a **million code points**, but the first `128` of these are the same as ASCII

#### Question: How many languages are covered by Unicode?

Answer: all of the languages that can be written in the following widely-used scripts: Latin, Greek, Cyrillic, Armenian, Hebrew, **Arabic**, Syriac, Thaana, Devanagari, Bengali, Gurmukhi, Oriya, Tamil, Telugu, Kannada, Malayalam, Sinhala, Thai, Lao, Tibetan, Myanmar, Georgian, Hangul, Ethiopic, Cherokee, Canadian Aboriginal Syllabics, Khmer, Mongolian, Han (Japanese, Chinese, Korean ideographs), Hiragana, Katakana, and Yi. [Source](https://www.unicode.org/faq/basic_q.html#:~:text=The%20simplest%20answer%20is%20that,%2C%20Myanmar%2C%20Georgian%2C%20Hangul%2C)

Figure below: showing that if we try to save Arabic text (Unicode) using ASCII (a subset of it), we get warning, and we lose our work.

<img src="assets/save_ascii_arabic.png" title="Save Popup in Notepad" width="400" />

Error reads: "This file contains characters in Unicode format which will be lost if you save this file as an ANSI encoded text file. To keep the Unicode information, click Cancel below and then select one of the Unicode options from the Encoding drop down list. Continue?"

## Code Points

السلسلة النصية (**String**) هي تسلسل من القيم التي تمثل نقاط الشيفرة في نظام **Unicode**. يمكن تمثيل جميع نقاط الشيفرة في النطاق U+0000 - U+10FFFF داخل سلسلة نصية. لا يوجد في **Python** نوع خاص بالحرف (**char**)، بل يتم تمثيل كل نقطة شيفرة في السلسلة النصية ككائن سلسلة بطول 1.

الدالة المدمجة **ord()** تقوم بتحويل نقطة الشيفرة من شكلها النصي إلى عدد صحيح ضمن النطاق 0 - 10FFFF؛ بينما تقوم الدالة **chr()** بتحويل عدد صحيح ضمن النطاق 0 - 10FFFF إلى كائن سلسلة نصية بطول 1.

يمكن استخدام **str.encode()** لتحويل سلسلة نصية (**str**) إلى **bytes** باستخدام ترميز النص المحدد، ويمكن استخدام **bytes.decode()** لتحقيق العكس.

```{python}
# ASCII (English-only) characters are represented by numbers between 0 and 127
print(ord("A"), ord("Z"))
print(chr(65), chr(90))
print(ord("a"), ord("z"))
print(ord("0"), ord("9"))
```

لنستكشف السلاسل عن طريق حزمة `string`:

```{python}
import string

print(string.ascii_letters)
print(string.punctuation)
```

الكود التالي يعرض نقاط الشيفرة للحروف اللاتينية والعلامات الترقيمية (سنتعلم كيف نفهم `for in` في الدروس القادمة):

```{python}
import string

print([ord(x) for x in string.ascii_letters])
print([ord(x) for x in string.punctuation])
```

نلاحظ أن الحروف اللاتينية تبدأ من 65 وتنتهي بـ 90، ثم من 97 إلى 122 بينما تبدأ العلامات الترقيمية من 33 وتنتهي بـ 47 ثم من 58 وتنتهي بـ 64. ثم من 91 وتنتهي بـ 96. وأخيرًا من 123 وتنتهي بـ 126.

ماذا عن الحروف العربية؟ أين تقع في شفرة Unicode؟

```{python}
# Arabic Unicode points are between 1536 and 1791
print(ord("أ"), hex(ord("أ")))
print(ord("ب"), hex(ord("ب")))
print(ord("ي"), hex(ord("ي")))
print(ord('َ'), hex(ord('َ')))
print(ord('ُ'), hex(ord('ُ')))
```

See [Wikipedia: Arabic script in Unicode](https://en.wikipedia.org/wiki/Arabic_script_in_Unicode) for details.

خلاصة: السلاسل في بايثون تمثل الحروف سواءً الإنجليزية أو العربية أو غيرها.

والأمر الآخر: أن الحروف في الأصل أرقام مخزنة لكن يتم عرضها بشكل نصي للمستخدم.

## السلاسل النصية (Strings)

[String](https://docs.python.org/3/reference/datamodel.html#immutable-sequences) can represent anything; literally as a sequence of symbols. However, they are mostly used with textual data such as:
- names (short)
- addresses (long)
- messages (multiline)

```{python}
name = 'Adam' # String literals can use single quotes
address = "Riyadh, Saudi Arabia" # or double quotes; it does not matter
```

```{python}
# Triple quoted strings may span multiple lines.
# All associated whitespace will be included in the string literal.
message = """Hello everyone,
I hope you are enjoying the course,

Thank you.
"""
print(message)
```

Note: there is no separate “character” type

```{python}
type('a')
```

Length of a string:

```{python}
phone = "123456789"
len(phone)
```

## String Methods

- Strings are **objects**, just like everything else in Python.
- Objects have **methods** that can be **called** using the `.` operator followed by `()` (parenthesis):

... We will delve into this in more detail in upcoming lessons.

There are numerous functions available to operate on strings in Python. The table below provides an overview of the most commonly used string methods:

**Must-Know String Methods**

| Function | Description |
|---|---|
| `.upper()` | Converts a string to uppercase. |
| `.lower()` | Converts a string to lowercase. |
| `.find()` | Finds the index of a substring within a string. |
| `.replace()` | Replaces occurrences of a substring within a string. |
| `.startswith()` | Checks if a string starts with a specified prefix. |
| `.endswith()` | Checks if a string ends with a specified suffix. |
| `.count()` | Counts the number of occurrences of a substring within a string. |
| `.split()` | Splits a string into a list of substrings based on a delimiter. |
| `.join()` | Joins elements of an iterable into a string using a separator. |
| `.strip()` | Removes leading and trailing whitespace from a string. |

See [the appendix](string_methods.qmd) for more details.

Let's try some string methods:
 
```{python}
print("hello".upper())
print("HeLLO".lower())
```

```{python}
name = "adam ibraheem"

print(name.capitalize())
print(name.title())
```

يمكن التعرف على الدوال المدمجة للسلسلة عن طريق الدالة `help`:

```{python}
help(str.title)
# str.title? # in Jupyter
```

### `count`, `find`, and `replace`

```{python}
# Count occurrences
name = "Adam Ibraheem"

print(name.count('a'))
print(name.find('a')) # fist occurrence
print(name.replace('a', 'x'))
```

```{python}
# 3rd argument is `count`
# Maximum number of occurrences to replace.
# -1 (the default value) means replace all occurrences
print(name.replace('a', 'x', 1))
```

### Whitespace Characters

Printable characters include:
- [`ascii_letters`](https://docs.python.org/3/library/string.html#string.ascii_letters)
- [`digits`](https://docs.python.org/3/library/string.html#string.digits)
- [`punctuation`](https://docs.python.org/3/library/string.html#string.punctuation)

```{python}
import string
string.printable
```

Non-printable characters are called [`whitespace`](https://docs.python.org/3/library/string.html#string.whitespace). This includes the characters:
1. space
2. tab
3. linefeed
4. return
5. formfeed
6. vertical tab

```{python}
import string
string.whitespace
```

Let's look at three whitespace characters: space, tab, and linefeed.

```{python}
# Tab character: "\t"
print('A\tB')
```

```{python}
# Newline character: '\n'
print('A\nB')
```

Notice the length of a string is the number of characters in the string, both **printable** and **whitespace**.

```{python}
print(len('A B'))
print(len('A\tB'))
print(len('A\nB'))
```

In general, if we take a string and add to it these characters, we get the same length plus 3:

```{python}
s = 'Salam'
assert len(s + '\n\t ') == len(s) + 3
```

### `.strip()`

```{python}
# note that this will remove leading and trailing whitespace,
# but not whitespace in the middle of the string
text = '\t hello    world \n\n\n'
print(text)
```

```{python}
# Strip whitespaces
print(text.strip())
```

### `.split()`

See: [Splitlines](https://docs.python.org/3/library/stdtypes.html#str.splitlines)

```{python}
# multi-line string
text = '''
Hello
World

How are you?
'''
```

```{python}
# displays the string as is (showing whitespace characters)
text
```

```{python}
# follows control characters and prints visible characters
print(text)
```

```{python}
text.splitlines()
```

```{python}
# Split
print("Hello, world".split()) # default is space
```

```{python}
print("Hello, world".split("l"))
```

```{python}
# `maxsplit` argument: Maximum number of splits to do.
# -1 (the default value) means no limit.
print("Hello, world".split("l", 1)) # 1 means split only once
```

### `.join()`

```{python}
names = ["Adam", "Belal", "Camal"]
seperator = ','
print(seperator.join(names)) 
print(''.join(names))
print(' + '.join(names))
```

## Repetition

```{python}
s = "Salam " * 3
print(s)
```

```{python}
zeros = "0" * 3
x = "1" + zeros
print(x)
```

```{python}
x + x
```

- We expected `1000`, but we got `10001000`. Why?
- Because `x` is a string, and `+` operator concatenates strings.

Let's convert `x` to an integer using `int()`:

```{python}
z = int(x)
z + z
```

## Concatenation

We want to be able to write:

```{python}
#| error: true

lvl = 20
sentence = "I want to reach level " + lvl
print(sentence)
```

It raises an error! Why? .. the error message tells use that we cannot concatenate a string with an integer.

How do we solve that? We convert the integer to a string using `str()`:

```{python}
age = 40
sentence = "My name is Adam and I am " + str(age) + " years old."
print(sentence)
```

Notice that we add two space characters, one after "am" and one before "years" to make the sentence readable.

Try doing this for the previous sentence with `lvl`:

```{python}
# try it
```

## String formatting

We look at 3 most commonly used ways to **concatenate** strings in Python:

**Firstly**, joining individual strings via the `+` operator (as we did above).
- Basic, but no control over the format
- Also you have to convert numbers to strings using [`str()`](https://docs.python.org/3/library/stdtypes.html#str)

**Secondly**, using the [`.format()`](https://docs.python.org/3/library/stdtypes.html#str.format) method.

Where replacement fields are delimited by braces `{}`. Each replacement field contains either:

1. the numeric **index** of a positional argument (starting from `0`), or
2. the name of a **keyword argument** (if the argument is a dictionary).

**Thirdly**, using [f-strings](https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals).

> A formatted string literal or f-string is a string literal that is prefixed with 'f' or 'F'. These strings may contain replacement fields, which are expressions delimited by curly braces {}. While other string literals always have a constant value, formatted strings are really expressions evaluated at run time. [Docs](https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals)


```{python}
name = "John"
lvl = 300

x1 = "My name is " + name + " and I want to reach level " + str(lvl) # + operator
x2 = "My name is {} and I want to reach level {}".format(name, lvl)  # .format() method
x3 = f"My name is {name} and I want to reach level {lvl}"            # f-strings
assert x1 == x2 == x3
print(x1)
```

#### Exercise

Print `"Hello, my name is John Doe. and I am 30 years old"`. Using the variables `first_name`, `last_name`, and `age` via all three approaches mentioned above:

```{python}
# try it
```

### Alignment and padding

```{python}
print(name.ljust(15)) 
print(name.center(15))
```

A fun way to decorate a string using `center` method:

```{python}
print('*' * 20)
print('Adam'.center(20, "*"))
print('*' * 20)
```

#### Exercise

Refactor the above code snippet to define three variables and use them in decorating the name:

- `name`
- `width`
- `decorator`

```{python}
# try it
name = 'Adam'



```

Padding numbers:

```{python}
print(f'{100:10}')
print(f'{1000:10}')
print(f'{10000:10}')
```

## Formatting numbers

### Thousands separator

```{python}
big_num = 10000
print(f'{big_num}')
print(f'{big_num:,}')
```

### Scientific Notation

```{python}
small_num = 1e-4
print(f"{small_num:.2e}")
```

### Decimals

```{python}
num = 10.5689
print(f'{num}')
print(f'{num:.4f}')
print(f'{num:.2f}')
print(f'{num:.0f}')
```

#### Example: currency

Here we use 2 components inside the curly braces and the `$` prefix:
- `$` sign is added before the number (not part of the formatted number at all)
- `,` adds the thousands separator
- `.2f` round the number to 2 decimal places

```{python}
price = 2978.95
print(f"${price:,.2f}")
```

### Parametrized formats

We can also make both the number `n` and the padding `p` to be variables:

```{python}
n = 100
p = 5
print(f'{n:{p}}')
```

By default the number is right-aligned. We can left-align it by adding `<`. Notice the difference between the two expressions below:

```{python}
print(f'{n:>{p}}')
print(f'{n:<{p}}')
```

Checkout: [PyFormat](https://pyformat.info/) for more.

### Number literal formats

[**Literals**](https://docs.python.org/3/reference/lexical_analysis.html#literals) are notations for constant values of some built-in types. Example: `42` is an integer literal and `3.14` is a floating-point literal.

Python allows more readable ways in writing number literals:
- underscores `_` in numbers separate them for better readability
- `e` or `E` can be used to represent scientific notation
- `0b` or `0B` for binary numbers
- `0o` or `0O` for octal numbers
- `0x` or `0X` for hexadecimal numbers
- `j` or `J` for complex numbers

```{python}
assert 1e-4 == 0.0001
assert 1_000_000 == 1000000
assert 0b1010 == 10
assert 0o10 == 8
assert 0x10 == 16
assert 1 + 2j == 2j + 1
```

## References

- [Text Sequence Type — str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str)
- [String methods](https://docs.python.org/3/library/stdtypes.html#string-methods)
- [Text Processing Services](https://docs.python.org/3/library/text.html#textservices)
- [Common string operations](https://docs.python.org/3/library/string.html)
- [`printf`-style String Formatting](https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting)
- [PyFormat](https://pyformat.info/)