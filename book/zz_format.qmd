# تنسيق الطباعة

- [`printf`-style String Formatting](https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting)
- [PyFormat](https://pyformat.info/)

## المحاذاة والحشو (Alignment and Padding)

```{python}
name = 'Adam'
print(name.ljust(15)) 
print(name.center(15))
```

طريقة ممتعة لتزيين سلسلة نصية باستخدام دالة `center`:


```{python}
print('*' * 20)
print('Adam'.center(20, "*"))
print('*' * 20)
```

#### جرب

قم بصياغة الكود السابق لتعريف ثلاثة متغيرات واستخدامها في تزيين الاسم:

- `name`
- `width`
- `decorator`

## تنسيق الأرقام

### محاذاة الأرقام

```{python}
print(f'{100:10}')
print(f'{1000:10}')
print(f'{10000:10}')
```


يمكننا أيضًا جعل كل من العدد `n` والتعبئة `p` متغيرات:


```{python}
n = 100
p = 5
print(f'{n:{p}}')
```

بشكل افتراضي، يتم محاذاة الرقم إلى اليمين. يمكننا محاذاته إلى اليسار بإضافة `<`. لاحظ الفرق بين التعبيرين أدناه:

```{python}
print(f'{n:>{p}}')
print(f'{n:<{p}}')
```

### فاصل الآلاف

```{python}
big_num = 10000
print(f'{big_num}')
print(f'{big_num:,}')
```

### الترميز العلمي (Scientific Notation)


```{python}
small_num = 1e-4
print(f"{small_num:.2e}")
```

### الأعداد العشرية (Decimals)

```{python}
num = 10.5689
print(f'{num}')
print(f'{num:.4f}')
print(f'{num:.2f}')
print(f'{num:.0f}')
```

#### مثال: تنسيق الكم المالي

هنا نستخدم مكونين داخل الأقواس المعقوفة وعلامة `$` في البداية:
- يتم إضافة علامة `$` قبل الرقم (ليست جزءًا من الرقم المنسق على الإطلاق)
- `,` تضيف فاصل الآلاف
- `.2f` يقوم بتقريب الرقم إلى منزلتين عشريتين


```{python}
price = 2978.95
print(f"${price:,.2f}")
```

### تنسيق كتابة القيَم العددية الثابتة (Number literal formats)

[**الحروفيَّة**](https://docs.python.org/3/reference/lexical_analysis.html#literals) هي رموز للقيم الثابتة لبعض الأنواع المدمجة. مثال: `42` هو حرفيُّ عدد صحيح و `3.14` هو حرفيُّ عدد عشري.

تسمح بايثون بطرق أكثر قابلية للقراءة في كتابة الحروفية العددية:

- يمكن استخدام الشرطة السفلية `_` في الأرقام لفصلها لتحسين القراءة
- يمكن استخدام `e` أو `E` لتمثيل الترميز العلمي
- `0b` أو `0B` للأرقام الثنائية
- `0o` أو `0O` للأرقام الثمانية
- `0x` أو `0X` للأرقام الست عشرية
- `j` أو `J` للأعداد المركبة

وإليك تطبيق ذلك:

```{python}
assert 1e-4 == 0.0001
assert 1_000_000 == 1000000
assert 0b1010 == 10
assert 0o10 == 8
assert 0x10 == 16
assert 1 + 2j == 2j + 1
```
