---
title: الحلقات
jupyter: python3
---

تقدم معنا أن  **حلقة التكرار**: هي الرجوع لسطر سابق إلى حين حصول الغرض من هذه الحلقة. وهي تستخدم لتكرار الأوامر البرمجية عدة مرات. وهناك نوعان من الحلقات في بايثون: **الحلقة المطلقة** (`while`) و**الحلقة المقيَّدة** (`for`).

ثم ننتقل إلى الكلام عن **النطاق** (`range`) الذي يمثل تسلسلاً مرتَّبًا من الأرقام، ويستخدم عادةً للتكرار عددًا محددًا من المرات في حلقات `for`.

نشير أولاً إلى شكل يكثر استعماله في التعيين، وهو التعيين النسبي.

## التعيين النسبي

- `i = i + 1` تعادل `i += 1`
- `i = i - 1` تعادل `i -= 1`
- `i = i * 2` تعادل `i *= 2`
- `i = i / 2` تعادل `i /= 2`

ملاحظة جانبية: انظر [التعيين النسبي (Augmented assignment statements)](https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements) فإنها عند التدقيق تختلف.

جرب الكود أدناه لترى النتيجة:

```{python}
i = 0
print(i)
```

```{python}
i = i + 1
print(i)
```

```{python}
i += 1
print(i)
```

لاحظ أن `i++` تعبير غير صالح في لغة بايثون، ليس مثل سي وجافا. فالكود التالي سيؤدي إلى خطأ:

```{python}
#| error: true
i++
print(i)
```


## الحلقة المُطْلقة

**الحلقة المُطْلقة** (لها كلمة `while`) هي مثل `if` لكن مكررة، فكلما انتهت العبارات المضمَّنة داخلها، تعود لسطر الشرط وتنفذه مرة أخرى؛ إلى حين انتفاء الشرط (`False`).

أما كونُها مطقلة يعني أن الكود المضمَّن داخل الحلقة هو الذي يحدد متى تتوقف. بينما المقيَّدة يكون التكرار فيها مُحددًّا بعدد معيَّن في نفس الجُملة، وهو على النحو التالي: (`for x in items`) سيأتي الحديث عنه إن شاء الله في درس قادم.

صيغة حلقة `while` كما يلي:

```python
while <boolean expression>:
    <code>
```

يتم تكرار اللبنة الواقعة في نطاق جملة الشرط ما بقي الشرط (`True`). وإذا انتفى الشرط (`False`) في البداية، فلن يتم الدخول في اللبنة أصلاً.

```python
i = 0
while i < 5:
    print(i)
    i += 1
print('Done')
```

ونلاحظ هنا أنك إذا نسيت زيادة قيمة `i`، فإن الحلقة لن تنتهي أبدًا؛ وهذا ما يسمى **حلقة لانهائية (infinite loop)**.

لنقم بتتبع الخطوات عندما تكون `i = 0`:

1. `0 < 5` تؤول `True`، فنطبع `0` ونزيد `i` لتصبح 1
2. `1 < 5` تؤول `True`، فنطبع `1` ونزيد `i` لتصبح 2
3. `2 < 5` تؤول `True`، فنطبع `2` ونزيد `i` لتصبح 3
4. `3 < 5` تؤول `True`، فنطبع `3` ونزيد `i` لتصبح 4
5. `4 < 5` تؤول `True`، فنطبع `4` ونزيد `i` لتصبح 5
6. `5 < 5` تؤول `False`،فنخرج من الحلقة
7. نطبع `Done`

وهذا تصوير لسير الأوامر لنفس الكود. ملاحظة: اضغط على الزر `Prev` أو `Next` للتنقل بين خطوات التنفيذ الفعلية:

<iframe width="800" height="500" frameborder="0" src="https://pythontutor.com/iframe-embed.html#code=i%20%3D%200%0Awhile%20i%20%3C%205%3A%0A%20%20%20%20print%28i%29%0A%20%20%20%20i%20%2B%3D%201%0Aprint%28'Done'%29&codeDivHeight=400&codeDivWidth=350&cumulative=false&curInstr=0&heapPrimitives=nevernest&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false"> </iframe>


### استعمال `input()` في الحلقة المطلقة

نستخدم دالة `input()` حيث **تقطَع سير البرنامج (Interrupt)** فيتوقَّف لتمنح التحكم للمستخدم لتقديم بعض المدخلات، وتنتظر حتى يتم الضغط على مفتاح `Enter` للإشارة إلى أن الإدخال اكتمل ، ليعود التحكم للبرنامج كي يُكمِل سيره.

يمكن استعمال الحلقة المطلقة مثلاً لتكرار السؤال عن رقم حتى يتم تخمينه بشكل صحيح:

```python
num = "9"
guess = input("Guess the number (0-9): ")
while guess != num:
    guess = input("Try again: ")
print("You guessed it!")
```

وهكذا معظم البرامج كالخوادم (Servers) يكون في داخلها حلقة مطلقة وذلك لاستقبال طلبات المتسفيدين من البرنامج.


إذا كان المدخل سريًّا تستطيع استعمال `getpass` لإخفاء الإدخال:

```python
import getpass

x = getpass.getpass()
```

الآن المعرَّف `x` يحتوي على القيمة المدخلة.

```python
print(x)
```

### الخروج من الحلقة

- تستخدم كلمة [`break`](https://docs.python.org/3/reference/simple_stmts.html#break) لإيقاف التكرار تمامًا.
- تستخدم كلمة [`continue`](https://docs.python.org/3/reference/simple_stmts.html#continue) للانتقال إلى التكرار التالي متخطيةً بقية الخطوات في التكرار الحالي.

```{python}
i = 0
while i < 5:
    if i == 3:
        break
    print(i)
    i += 1
print('Done')
```

<iframe width="800" height="500" frameborder="0" src="https://pythontutor.com/iframe-embed.html#code=i%20%3D%200%0Awhile%20i%20%3C%205%3A%0A%20%20%20%20if%20i%20%3D%3D%203%3A%0A%20%20%20%20%20%20%20%20break%0A%20%20%20%20print%28i%29%0A%20%20%20%20i%20%2B%3D%201%0Aprint%28'Done'%29&codeDivHeight=400&codeDivWidth=350&cumulative=false&curInstr=0&heapPrimitives=nevernest&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false"> </iframe>

وهذا مثال لاستخدام `continue`:

```{python}
i = 0
while i < 5:
    if i == 3:
        i += 1
        continue
    print(i)
    i += 1
print('Done')
```

<iframe width="800" height="500" frameborder="0" src="https://pythontutor.com/iframe-embed.html#code=i%20%3D%200%0Awhile%20i%20%3C%205%3A%0A%20%20%20%20if%20i%20%3D%3D%203%3A%0A%20%20%20%20%20%20%20%20i%20%2B%3D%201%0A%20%20%20%20%20%20%20%20continue%0A%20%20%20%20print%28i%29%0A%20%20%20%20i%20%2B%3D%201%0Aprint%28'Done'%29&codeDivHeight=400&codeDivWidth=350&cumulative=false&curInstr=0&heapPrimitives=nevernest&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false"> </iframe>

أما عبارة `break` المضمنة تحت طبقتين من التكرار فإن الذي يتوقف هو التكرار الداخلي فقط. وهذا مثال:

```{python}
i = 0
while i < 3:
    j = 0
    while j < 3:
        if i == 1:
            break
        print(i, j)
        j += 1
    i += 1
print('Done')
```

<iframe width="800" height="500" frameborder="0" src="https://pythontutor.com/iframe-embed.html#code=i%20%3D%200%0Awhile%20i%20%3C%203%3A%0A%20%20%20%20j%20%3D%200%0A%20%20%20%20while%20j%20%3C%203%3A%0A%20%20%20%20%20%20%20%20if%20i%20%3D%3D%201%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20break%0A%20%20%20%20%20%20%20%20print%28i,%20j%29%0A%20%20%20%20%20%20%20%20j%20%2B%3D%201%0A%20%20%20%20i%20%2B%3D%201%0Aprint%28'Done'%29&codeDivHeight=400&codeDivWidth=350&cumulative=false&curInstr=0&heapPrimitives=nevernest&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false"> </iframe>

## المتتالية

نستخدم الجملة: `for item in iterable` لقراءة **متتالية** ([Iterable](https://docs.python.org/3/glossary.html#term-iterable)). والتي تتضمن **المجموعات**  (Collections) وهي معظم الكائنات الحاوية للبيانات. (وسيأتي الحديث عنها في درس قادم).

```{python}
for x in (1, 20, 'ABB', True, False, 1.234):
    print(x)
```

وهذا البرنامج يصفي قائمة أرقام إلى قائمتين: إحداها زوجية والأخرى فدرية. ملاحظة: علامة `%` تعني باقي القسمة. فإذا كان الباقي يساوي صفر، فهذا يعني أن العدد زوجي:

```{python}
numbers = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
evens = []
odds = []

for x in numbers:
    if x % 2 == 0:
        evens.append(x)
    else:
        odds.append(x)

print('list of evens:', evens)
print('list of odds:', odds)
```

## النطاق (`range`)

نوع [`range`](https://docs.python.org/3/library/stdtypes.html#range) يمثل تسلسلًا غير قابل للتغيير من الأرقام. ويستخدم عادةً للتكرار عددًا محددًا من المرات في حلقات [`for`](https://docs.python.org/3/reference/compound_stmts.html#for).

وفقًا لوثائق بايثون فإن النطاق له شكلان:

- `class range(stop)`
- `class range(start, stop[, step])`

نشرح العوامل:

- `start`: **موضع الابتداء** (وهو مشمول في النطاق). (القيمة الافتراضية 0)
- `stop`: **موضع الانتهاء** (وهو غير مشمول في النطاق).
- `step`: **الخطوة**، أي: مقدار الزيادة أو النقص بعد كل كرة (القيمة الافتراضية 1)


فإذا قمت بتعيين عامل واحد فسيكون هو `stop`:

```{python}
for i in range(5):
    print(i)
```

وإذا قمت بتعيين عاملين فسيكون الأول `start` والثاني `stop`:

```{python}
for i in range(5, 10):
    print(i)
```

أما إذا عينت الثلاثة جميعًا فسيكون الأول `start` والثاني `stop` والثالث `step`:

```{python}
for i in range(0, 10, 2):
    print(i)
```

ولك أن تعكس النطاق بتعيين `step` بقيمة سالبة، مع قلب البداية والنهاية:

```{python}
for i in range(10, 0, -1):
    print(i)
```

التكرار على قوائم باستخدام النطاق:

```{python}
numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
for i in range(1, len(numbers), 2):
    print(numbers[i])
```
