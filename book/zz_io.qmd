# الإدخال والإخراج

رغم تعقيد الحواسيب اليوم، فهي في الأخير ترجع إلى معمارية فون نويمان (1945) الموضَّحة أدناه:

![نموذج فون نويمان للحاسب](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Von_Neumann_Architecture-ar.svg/450px-Von_Neumann_Architecture-ar.svg.png)

فكل المنطق الذي أجريناه لا يتعدى الصنودق الأوسط الذي يتكون من وحدة المعالجة المركزية (CPU) ووحدة الذاكرة (Memory). سواءً كان تعريف أو استدعاء أو نحو ذلك فإنه هنا.

أما للاتصال بالعالم، فتتألف العمليات في الأصل من عمليتين أساسيتين: **قراءة وكتابة**.

1. أما علمية `input()` فإنها من جنس عمليات إدخال المعطيات؛ ولا بُدَّ لها من منفذ؛ وهو هنا: لوحة المفاتيح.
2. أما عملية مثل: `print()` فإنها من جنس عمليات إخراج النتائج؛ ولا بُدَّ لها من مَنفَذ. وفي هذه الحالة هو جهاز العرض (الشاشة).

وحتى لا ننزل إلى مستوى البت والبايت فإن نظام التشغيل يمثِّلُ للغة البرمجة التي تتخاطب معه هذه الأجهزة، سواءً كانت للإدخال أو الإخراج، كأنها ملفات. ويقول: **الملف هو ما يقبل القراءة ويقبل الكتابة**. فهو الوسيط الذي تنتقل من خلاله المعلومات بين البرمجيات والأجهزة وكذلك البشر.

واصطلح الناس على كلمة I/O وتعني (Input / Output) للإشارة إلى معنى عمليات الإدخال والإخراج إلى الأجهزة مثل:

- **أجهزة استشعار**: الحرارة والرطوبة والبعد والميل والاهتزاز والحركة ...إلخ.
- **أجهزة تحريك**: المفتاح والماطور  والصمام والطنان والسماعات ...إلخ.
- أجهزة غالبًا هي متصلة بالجهاز المكتبي: لوحة المفاتيح والمؤشر والطابعة والكاميرا والمايكروفون والشاشة ...إلخ.

لذا من الضروري معرفة كيفية التعامل مع الملفات في بايثون. لكننا في هذا الدرس سنقتصر على الملفات المعهودة، وهي أول نوع فيما يأتي: أي: الملفات والمجلدات.

## الملف في بايثون

يجرِّد [الملف](https://docs.python.org/3/glossary.html#term-file-object) أمرين أساسيين: القراءة: `.read()` والكتابة: `.write()` وذلك بعد فتحه [`open()`](https://docs.python.org/3/library/functions.html#open) كما يجب بعد الفراغ منه أن تغلقه بالأمر `close()` فهذه الأربعة هي ما يشكل الملف وهي فلسفة نظام يونكس (Unix) ومن حذا حذوه مثل نظام ماك (MacOS) بخلاف نظام ويندوز (Windows) فإنه لا يلتزم بذلك دائمًا.

وقد تقع الكتابة عيْنًا على أحد ثلاثة منافذ يمثلها **الملف**:

1. إلى **منفذ تخزين** وهي الملفات التي اعتدنا رؤيتها والضغط على أشكالها المختلفة بحسب نوعها مثلاً: `data.csv`, `my_code.py`, `configuration.yaml`.
2. إلى [**مخرَج لوحة الأوامر**](https://docs.python.org/3/library/sys.html#sys.stdout) ليظهر على الشاشة. وهو فرعان:
    - **منفذ العادة** وهو الذي توجَّه إليه الأحرف عندما نستعمل الإجراء [`print()`](https://docs.python.org/3/library/functions.html#print) (أو عندما تكتب اسم المعرَّف كآخر أمر في دفتر جوبتر فهو يستعمل الأمر [`display()`](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html) ضمنيًّا)
    - **منفذ الأخطاء** وهو الذي توجَّه إليه رسالة الخطأ عادةً
3. إلى [**منفذ مِقْبَس**](https://en.wikipedia.org/wiki/Unix_domain_socket) (Socket) **للتواصل مع برنامج آخر** سواءً  كان البرنامج في نفس الجهاز أو عبر الشبكة.

أما عملية القراءة `.read()` فتقع عيْنًا:

1. من منفذ تخزين (قرص تخزين أو ذاكرة دائمة)
2. من [منفذ مدخلات لوحة الأوامر](https://docs.python.org/3/library/sys.html#sys.stdin) والذي يمكن إدخاله مثلاً عن طريق إجراء [`input()`](https://docs.python.org/3/library/functions.html#input)
3. من منفذ مقبس (الشبكة)
