# التخصيص والتركيب

نستعرض آليتين للبناء التراكمي من الأنواع:

- التخصيص
- التركيب

## التخصيص

يكثر استعمال **الطابور** (Queue) كهيكل بيانات لحل مجموعة من المسائل بطريقة سهلة. نستعرض في هذا المثال كيفية تخصيص القائمة (`list`) حتى نكون منها صنف جديد هو: `queue` حيث تدخل العناصر من "الخلف" وتخرج من "الأمام" دائمًا، ولا يمكن الوصول للعناصر التي بينهما.

![[طابور (الداخل أولاً خارجٌ أولاً)](https://en.wikipedia.org/wiki/Queue_(abstract_data_type))
](https://upload.wikimedia.org/wikipedia/commons/thumb/5/52/Data_Queue.svg/330px-Data_Queue.svg.png)

```{python}
class Queue:
    def __init__(self):
        self.items = []

    def enqueue(self, item):
        """Add an item to the end of the queue"""
        self.items.append(item)

    def dequeue(self):
        """Remove an item from the front of the queue"""
        if not self.is_empty():
            return self.items.pop(0)
        return None

    def peek(self):
        """Return the item at the front without removing it"""
        if not self.is_empty():
            return self.items[0]
        return None

    def is_empty(self):
        """Check if the queue is empty"""
        return len(self.items) == 0

    def __repr__(self):
        """Return the underlying list representation"""
        return repr(self.items)
```

- لاحظ الإنشاء بقائمة فارغة
- ثم الإجراء `enqueue` نطبقه عن طريق الإجراء `list.append` ..
- والإجراء `dequeue` نطبقه عن طريق الإجراء `list.pop(0)` ..

نختبر ذلك الآن:

```{python}

q = Queue()

q.enqueue(1)
q.enqueue(2)
q.enqueue(3)

print(q)
```

```{python}

q.dequeue()
print(q)
```

هل يمكننا معرفة عدد العناصر؟:

```{python}
#| error: true
len(q)
```

لتطبيق هذه العملية، يجب إضافة الإجراء الخاص `__len__` للصنف حتى يقبلها، على النحو التالي (انظر في الأخير):

```{python}
class Queue:
    def __init__(self):
        self.items = []

    def enqueue(self, item):
        self.items.append(item)

    def dequeue(self):
        if not self.is_empty():
            return self.items.pop(0)
        return None

    def peek(self):
        if not self.is_empty():
            return self.items[0]
        return None

    def is_empty(self):
        return len(self.items) == 0

    def __repr__(self):
        return repr(self.items)
    
    def __len__(self):
        return len(self.items)
```

الآن يمكن معرفة الطول:

```{python}
q = Queue()
q.enqueue(10)
len(q)
```
يعمل الطول الآن كما لو أن هذا الصنف الذي عرَّفناه للتو منسجم مع `list` و `set` و `str` وغيرها. وهذه الخاصية تسمى تعدد الأشكال [(Polymorphism)](https://en.wikipedia.org/wiki/Polymorphism_(computer_science)).

صحيح أن القائمة أكثر قدرة (إذْ تتضمن عمليات أكثر)، إلا أن الطابور مخصص لخدمة وظيفة محددة؛ مما يجعل التعامل معه واضحًا. فأحيانًا يكون التقييد مفيدًا.

## التركيب

لو كان عندنا تعريف صنف نقطة ..

```{python}
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def __repr__(self):
        return f"Point({self.x}, {self.y})"
    
    @staticmethod
    def distance(p1, p2):
        return ((p1.x - p2.x)**2 + (p1.y - p2.y)**2)**0.5
```


يمكننا **تركيب** شيء مكون من النقاط، وهو المضلَّع، على النحو التالي:

- يأخذ إجراء الإنشاء `__init__` سلسلة من النقاط ويعيِّنُها لمتغير اسمه `points`
- يعرض إجراء التمثيل `__repr__` كلمة `Polygon` وداخل أقواسها يضع تمثيل النقاط
- الإجراء الأخير لحساب قُطر المضلَّع، وذلك يعتمد على قياس المسافة بين سلسلة النقاط المتتابعة كما نرى


```{python}
class Polygon:
    def __init__(self, points):
        self.points = points

    def __repr__(self):
        return f"Polygon({self.points})"

    def perimeter(self):
        n = len(self.points)
        s = 0
        for i in range(n):
            s += Point.distance(self.points[i], self.points[(i+1)%n])
        return s
```

لاحظ أن إنشاء المضلَّع يتطلَّب إنشاء نقاط. ولاحظ أننا جعلنا كل نقطة في سيطر، لكنها في الحقيقة كلها عناصر لقائمة، وذلك بالنظر إلى القوسين المربعين `[ ]` على النحو التالي:


```{python}
poly = Polygon([
    Point(0, 0),
    Point(5, 0),
    Point(5, 5),
    Point(0, 5),
])
poly
```

المحيط:

```{python}
poly.perimeter()
```

ولأن هذا المركَّب مكوَّن من أفراد، فنريد أن يكون لدينا عمليات مثل:

- العد: `len(s)`
- الإشارة: `s[i]`
- التعيين: `s[i] = p`
- الحذف: `del s[i]`

انظر التوثيق الرسمي لبايثون حول [محاكاة أنواع الحاويات](https://docs.python.org/3/reference/datamodel.html#emulating-container-types) لمزيد من المعلومات.

```{python}
class Polygon:
    def __init__(self, points):
        self.points = points

    def __repr__(self):
        return f"Polygon({self.points})"

    def __len__(self):
        return len(self.points)
    
    def __getitem__(self, i):
        return self.points[i]

    def __setitem__(self, i, p):
        self.points[i] = p

    def __delitem__(self, i):
        del self.points[i]
    
    def perimeter(self):
        n = len(self.points)
        s = 0
        for i in range(n):
            s += Point.distance(self.points[i], self.points[(i+1)%n])
        return s
```

```{python}
poly = Polygon([
    Point(0, 0),
    Point(5, 0),
    Point(5, 5),
    Point(0, 5),
])
poly
```

عدد النقاط:

```{python}
len(poly)
```

الأخذ بالرقم أو بالشريحة:

```{python}
print(poly[0])
print(poly[-1])
print(poly[1:3])
print(poly[::-1])
```

التعيين:

```{python}
poly[0] = Point(10, 10)
poly
```

الحذف:

```{python}
del poly[0]
poly
```

تبين بهذا محاكاة بعض إجراءات الحاويات الأساسية مثل `list` و`set` و`tuple` و`str` و`dict`.


