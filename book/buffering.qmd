

### Buffering Output

Buffering is a technique used to reduce the number of I/O operations by storing the output in a buffer before writing it to the output device. This is more efficient than writing each line to the output device immediately.

Let's make our function smarter by using a text buffer (`TextIO`) to store the output, and then can choose what to do with it, such as printing it to the console or writing it to a file. For clarity, we will add type annotaions to the function signature. But first, we `from typing import Sequence, TextIO` to import the necessary types.

```{python}
from typing import Sequence, TextIO

def write_boxes(buf: TextIO, seq: Sequence):
    """Writes a sequence of items in a box format, in a given text buffer."
    Example:
    >>> write_boxes([100, 200, 300])
    0       1       2       3       
    +-------+-------+-------+
    |  100  |  200  |  300  |
    +-------+-------+-------+
    -3      -2      -1      
    """
    
    # constants
    x = '+' # corner
    h = '-' # horizontal
    v = '|' # vertical
    padding = 2
    
    # find the maximum string width of the items
    width = max(len(str(item)) for item in seq)

    # print the positive indexes on top
    for i in range(len(seq) + 1):
        s = str(i)
        buf.write(s.ljust(width + padding * 2 + len(s)))
    buf.write('\n')

    # print the top border line
    for i, item in enumerate(seq):
        if i == 0:
            buf.write(f'{x}')
        buf.write(f'{h * (width + padding * 2)}')
        buf.write(f'{x}')
    buf.write('\n')

    # print the items
    for i, item in enumerate(seq):
        if i == 0:
            buf.write(f'{v}')
        buf.write(str(item).center(width + padding * 2))
        buf.write(f'{v}')
    buf.write('\n')

    # print the bottom border line
    for i, item in enumerate(seq):
        if i == 0:
            buf.write(f'{x}')
        buf.write(f'{h * (width + padding * 2)}')
        buf.write(f'{x}')
    buf.write('\n')

    # print the negative indexes below
    for i in range(len(seq), 0, -1):
        s = str(-i)
        buf.write(s.ljust(width + padding * 2 + len(str(i))))
    buf.write('\n')
```

To directly print the output to the console, we can use the [`sys.stdout`](https://docs.python.org/3/library/sys.html#sys.stdout) (standard output) file object.


```{python}
import sys

write_boxes(sys.stdout, [100, 200, 300])
```

We can also use an efficient in-memory buffer (`io.StringIO`) to stream the output to. Later we can read its contents as a string, and do something with it. Here, we are just printing it to the console:

```{python}
import io

contents = ''
with io.StringIO() as buffer:
    write_boxes(buffer, [100, 200, 300])
    contents = buffer.getvalue()
print(contents)
```

We can [`open()`](https://docs.python.org/3/library/functions.html#open) a file an write to it instead:

```{python}
with open('output.txt', 'w') as fdst:
    write_boxes(fdst, ['Apple', 'Banana', 'Cherry', 'very long string'])
```
