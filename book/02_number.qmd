---
title: الرقم
jupyter: python3
---

## وظيفة الأعداد في لغة البرمجة

- **الأعداد الصحيحة** ([int](https://docs.python.org/3/library/functions.html#int))
    - مثالها: `..., -2, -1, 0, 1, 2, ...`
    - وظيفتها: تستعمل في الفهرسة والعد والترتيب ونحو ذلك

- **القيم المنطقية** ([bool](https://docs.python.org/3/library/stdtypes.html#boolean-type-bool))
    - مثالها: `True, False`
    - وظيفتها: تستعمل في الجمل الشرطية وحلقات التكرار، والمقارنة بين الأشياء

- **الأعداد العشرية** ([float](https://docs.python.org/3/library/functions.html#float))
    - مثالها: `3.14, 2.718, 0.0, 15.0, -1.50`
    - وظيفتها: تمثيل الكميات مثل المال، المسافة، والوقت
    

- **الأعداد المركبة** ([complex](https://docs.python.org/3/library/functions.html#complex))
    - مثالها: `(1 + 2j), (1.0 - 2.0j)`
    - وظيفتها: تمثيل الأعداد التخيلية في الهندسة

```{python}
x = 5
y = 3.0
z = -10
b = True
c = 1 + 2j
```

```{python}
print(type(x))
print(type(y))
print(type(z))
print(type(b))
print(type(c))
```

## العمليات الحسابية

وتسمى: Arithmetic operations.

```{python}
print(x + y) # الجمع (Addition)
print(x - y) # الطرح (Subtraction)
print(x * y) # الضرب (Multiplication)
print(x / y) # القسمة (Division)
print(x % y) # باقي القسمة (Remainder)
print(x ** y) # الأس (Exponentiation)
```

## ماذا تعني صفة العددية؟

الاشتراك في صفة العددية يعني أنها تقبل العمليات الحسابية ، مع ملاحظة أن النوع الأقل دقة يتحول إلى النوع الأعلى دقة:

- فمثلاً: `int + float = float`
- وكذلك: `int / int = float`
- وأيضًا: `bool * int = int`
- وهكذا: `int * complex = complex`

```{python}
print(x + z)
print(x + y)
print(y * z)
print(b * x)
print(c + x)
```

لاحظ أن قسمة الصحيح تقوم بتقريب النتيجة إلى الأقرب:

```{python}
print(7 / 2)
print(7 // 2)
```

#### تمرين

تحقق من نوع كل من التعبيرين السابقين باستخدام الدالة `type()`. هل يمكنك استخراج قاعدة من هذه الأمثلة؟


- `7 / 2`
- `7 // 2`
- `7.0 / 2`
- `7 / 2.0`

```python
# try it
```

جرب الآتي حتى تستكشف ماذا يحصل لو:

- [x] `int + bool`
- [ ] `int * str`
- [ ] `str * int`
- [ ] `str + str`
- [ ] `int + str` (لاحظ أن هذه العملية ستفشل)

```{python}
i = 5
b = True
s1 = '5'
s2 = '11'

print(i + b)  # int + bool
```


## ترتيب العمليات

ترتيب العمليات هو نفسه كما في الرياضيات:

1. الأقواس: `()`
2. الأسس: `**`
3. الضرب والقسمة: `*` و `/`
4. الجمع والطرح: `+` و `-`

للتفصيل الشامل انظر: [ترتيب التقييم](https://docs.python.org/3/reference/expressions.html#evaluation-order)

#### تمارين

هذه تمارين للتحقق من فهمك لترتيب العمليات.

أضف الأقواس لتغيير النتيجة لتطابق التوكيد:

```{python}
#| error: true
assert 3 + 2 * 5 == 25
```

الحل:

```{python}
assert (3 + 2) * 5 == 25
```

مثال آخر:

```{python}
#| error: true
assert 8 - 4 / 2 == 2
```

ما هو الحل؟ ضع الأقواس في مكانها الصحيح.

```python
# try it
```

مثال أخير:

```{python}
#| error: true
assert 2 ** 3 * 4 == 4096
```

ما هو الحل؟ ضع الأقواس في مكانها الصحيح.

```python
# try it
```

## التعيين النسبي

يراجع: [التعيين النسبي](https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements).

لأن التعيين النسبي يستعمل بكثرة، فوجب علينا التعرف عليه، وأحيانًا نحتاج لاستعماله. فجمل التعيين التالية متكافئة:

- `i = i + 1` تعادل `i += 1`
- `i = i - 1` تعادل `i -= 1`
- `i = i * 2` تعادل `i *= 2`
- `i = i / 2` تعادل `i /= 2`

جرب الكود أدناه لترى النتيجة:

```{python}
i = 0
print(i)
```

```{python}
i = i + 1
print(i)
```

```{python}
i += 1
print(i)
```

لاحظ أن `i++` تعبير غير صالح في لغة بايثون، ليس مثل سي وجافا. فالكود التالي سيؤدي إلى خطأ:

```{python}
#| error: true
i++
print(i)
```

## وحدة الرياضيات

تذكر أن المكتبة الأساسية توفر لنا وحدة الرياضيات `math` التي يمكن استيرادها والوصول للإجراءات التي فيها باستعمال النقطة `.` بعدها.

في هذا المثال نعرف نقطتين ثم نحسب المسافة بينهما. والمسافة الإقليدية بين نقطتين $(x_1, y_1)$ و $(x_2, y_2)$ تُحسب باستخدام الصيغة التالية:

$$
\text{distance} = \sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}
$$



```{python}
import math

x1, y1 = 0, 0
x2, y2 = 3, 4
distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)
print(distance)
```

```{python}
import math

x = 5.4
print(math.floor(x)) # تقريب لأقرب عدد صحيح أصغر
print(math.ceil(x)) # تقريب لأقرب عدد صحيح أكبر
print(math.trunc(x)) # حذف ما بعد الفاصلة
print(round(x, 2)) # تقريب إلى رقمين بعد الفاصلة
```

ملاحظة: الدالة الأخيرة `round` ليست مستوردة من `math` وإنما هي مُضمَّنة في النطاق العام؛ لذا لا تحتاج لاستيراد شيء.

#### تمرين

اكتب برنامجًا ليعرف رقمين ثم اطبع مجموعهما، الفرق بينهما، حاصل ضربهما، خارج القسمة، وباقي القسمة. استخدم أسماء متغيرات وتعليقات مناسبة.

```python
# try it
```

#### تمرين

احسب مساحة المكعب باستخدام الصيغة التالية:

$$
\text{area} = \text{width} \times \text{length} \times \text{height}
$$

- قم بتعيين العرض (width)، الطول (length)، والارتفاع (height) إلى متغيرات.
- احسب المساحة باستخدام الصيغة.
- اطبع النتيجة.

```python
# try it
```

#### تمرين

اكتب برنامجًا يطلب من المستخدم إدخال عدد الساعات (hours) ومعدل الأجر لكل ساعة (rate per hour) لحساب الأجر الإجمالي (gross pay).

```python
# your code here
```

#### تمرين

اكتب برنامجًا يحسب مساحة الدائرة باستخدام الصيغة التالية:


$$
\text{area} = \pi \times \text{radius}^2
$$

- قم بتعيين نصف القطر إلى متغير.
- احسب المساحة باستخدام الصيغة.
- اطبع النتيجة.

تلميح: يمكنك استخدام الثابت `math.pi` للحصول على قيمة $\pi$.

```python
# your code here
```

#### تمرين

اكتب برنامجًا لتحويل درجة الحرارة من السيليلوس إلى الفهرنهايت استخدم معادلة التحويل التالية:

$$
F = \frac{9}{5} \times C + 32
$$

```python
# your code here
```


## خلاصة

عرفنا الرقم والعمليات الممكنة عليه. لكننا سنتعرف على استعماله أكثر في الدروس القادمة، ولا يمكن حصر جميع ما يستفاد منه فيه في درس واحد، لأنه من أكثر الأمور شيوعًا في البرمجة.

ننتقل الآن [لباب الشرط](03_condition.qmd) حيث الجمل الشرطية والتعيين المشروط.