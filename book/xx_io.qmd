
## أخذ المدخلات من المستخدم

يمكننا استخدام دالة `input()` لأخذ المدخلات من المستخدم. ستقوم دالة `input()` بطباعة رسالة على الشاشة ثم تنتظر من المستخدم أن يكتب شيئًا ويضغط على `Enter`. بمجرد أن يضغط المستخدم على `Enter`، ستعيد دالة `input()` ما كتبه المستخدم.

ملاحظة جانبية (لمستخدمي VS Code): ستظهر نافذة الإدخال في أعلى الشاشة.

```python
name = input("What is your name? ")
```

يمكننا الآن استخدام المتغير `name` للترحيب بالمستخدم:

```python
print("Welcome", name, "to the Python course")
```

يمكننا أيضًا أخذ الأرقام. ومع ذلك، نظرًا لأن دالة `input` تعيد دائمًا سلسلة نصية (string)، نحتاج إلى تحويل السلسلة النصية إلى رقم باستخدام دالة `int()`:

```{python}
#| eval: false
password = input("Enter password: ")

if password == "pythonista":
    print("Welcome to the course")
else:
    print("Sorry, wrong password")
```

#### تمرين:

- استخدم دالة `input` لطلب الاسم الأول من المستخدم وخزنه في متغير يسمى `first_name`
- استخدم دالة `input` لطلب الاسم الأخير من المستخدم وخزنه في متغير يسمى `last_name`
- اطبع رسالة ترحيب للمستخدم باستخدام اسمه الأول والأخير

اكتب الكود الخاص بك أدناه:

```{python}
# try it
```

#### تمرين

احسب مساحة المستطيل:

- استخدم دالة `input` لطلب `عرض (width)` المستطيل من المستخدم
- استخدم دالة `input` لطلب `ارتفاع (height)` المستطيل من المستخدم
- احسب مساحة المستطيل وخزنها في متغير يسمى `مساحة (area)`
- اطبع مساحة المستطيل

**ملاحظة**: يجب عليك تحويل `العرض (width)` و `الارتفاع (height)` إلى أرقام باستخدام دالة `int()`.

```{python}
# try it
```

#### تمرين

اطلب من المستخدم إدخال `العمر (age)` وأخبره كم سيكون عمره بعد 10 سنوات.

```{python}
# try it
```

## Printing


### Carriage Return `'\r'` Character

The "carriage return" character has that name because it refers to a command to return the (print) carriage to the beginning of the line.

<img src="assets/type-writer.png" width="300">

> You'd start a new paragraph by feeding in the paper and then - with your left hand - shoving the carriage (the part on top that has the paper) all the way to the right so the keys will be hitting the spot on the far left first. Then as you typed, the carriage would advance one space at a time. When it got all the way to the right (usually it went "ding!"), you'd have to push that carriage back again, and if you didn't also hit the line-feed lever, you'd start typing over the same line. So the line-feed lever is right there, mounted in the same spot you'd use to push the carriage back anyway, and you could combine both motions. -- [Answer by **nico** on english.stackexchange.com](https://english.stackexchange.com/a/36082)

```{python}
print('A', end='\r')
print('B')
```

```{python}
import time
# progress bar using the Carriage Return "\r" character
for x in range(10 + 1):
    time.sleep(0.20)
    print(f'[{x}/10] ' + '===' * x + '>', end='\r')
```


## Control-Flow

### `str.startswith()` and `str.endswith()`

```{python}
name = 'mr. cat.jpg'
print(name.startswith('mr. '))
print(name.endswith('jpg'))
```


### 

- Textual data in Python is handled with [`str`](https://docs.python.org/3/library/stdtypes.html#str) objects, or *strings*.
- Strings are immutable [sequences](https://docs.python.org/3/library/stdtypes.html#typesseq) of Unicode code points.