---
og:title: index
---

# مقدمة {.unnumbered}

بسم الله الرحمن الرحيم. والحمد لله والصلاة والسلام على رسول الله وآله وصحبه ومن والاه. أما بعد.

## لماذا نبرمج؟

ظل الذكاء الاصطناعي طموحًا عاليًا منذ بزوغ فجر علوم الحاسب (1953). وما زال هذا الهدف دافعًا قويًّا لكل من فهم أننا باختراع الحاسب (1833 - 1871) استطعنا **محاكاة المنطق** في آلات صماء. ولا حد لإمكانيَّة هذا المعالِج الآلي إلا تعبيرك اللغوي أيها الناطق البشري. فهذا جانب **المعالجة**.

وجانب **الإدراك** فيه:

أدوات **الإحساس** التي تُدخِلُ المرئيات والمسموعات ونحوها ؛ وقد تم محاكاتها بآلة التصوير (كاميرا) ولاقط الصوت (مايكروفون). وكذلك أجهزة استشعار دقيقة مثل مستشعر الحرارة أو الرطوبة أو أجهزة قياس المسافة أو ماسحات البصمة أو الرنين المغناطيسي (MRI) أو الموجات الكهرومغناطيسية في الأقمار الصناعية وأجهزة الملاحة الجوية والبحرية والبوصلة أو ميزان التسوية الأفقية (Gyroscope) وغيرها كثير.

ومنها ما **يُسجل يدويًّا** كما يكون في المستشفى: العمر والوزن والطول، أو بيانات الحضور والانصراف أو المبيعات اليومية، أو بيانات طلاب أو متدربين في دورة تدريبية أو سجلات المخزون ونحو ذلك. وهي كثيرة جدًّا.

ثم أدوات **الاستيعاب** وهي التي تجمع المحسوسات في وعاءٍ واحدٍ للاعتبار جُملةً واحدة، وقد تم محاكاتهُا بما نسميه **الذاكرة** (وهي على مراحل تَبعُد وتَقترب من مركز المعالجة). وتشبه الذاكرة في الجهاز ما يراه الشخص في الوقت الواحد أو يمكن تصوُّرُه في الذهن وتخيله في لحظة واحدة. أما الذكريات المخزنة لدينا ، وما نكتبه في مذكرات فيكون مسجلاً في أجهزة **التخزين**.

ثم تأتي أدوات **المعالجة** وهي الآلات القابلة للبرمجة؛ مثل وحدة المعالجة المركزية (CPU) ووحدة المعالجة الرسومية (GPU) وغيرها؛ حيث يوضَع المنطق المترجَم من لغات البرمجة ويشغِّل هذه الإلكترونيات المجهرية لتحقيق مقصوده منها.

## لمن هذا الكتاب؟

بدأت بوادر تأليف هذا الكتاب أثناء تدريسي البرمجة بلغة بايثون لخريجي التخصصات التقنية تمهيدًا لهم للدخول في علوم البيانات والذكاء الاصطناعي. فأردت أن أضع مادة جامعة **شاملة لأهم مفاهيم البرمجة** في مستوى تطبيقي مناسبٍ لذلك الغرض؛ فلا ينزل إلى التفاصيل الدقيقة التي لا يحتاج إليها.

ثم أعدت النظر فيه فراعيت أصحاب **التخصصات غير التقنية** إذْ لم أغرِق في التفاصيل الرياضية ولا الحاسوبية الدقيقة.

- **فمن أراد أن يبدأ في البرمجة فليبدأ بهذا الكتاب**؛ فالمواضيع منظمة بشكل منطقي وعملي مع مسائل نافعة للمبرمج تقترب في كل مرة من الواقع أكثر فأكثر.
- ومن **أراد مرجِعًا لمواضيع البرمجة بلغة بايثون** فهذا الكتاب صديقه؛ فالكتاب مقسَّم بحسب الموضوعات وكل موضوعٍ مقسَّم كذلك لتسهيل الوصول إلى أي مفهوم. كما تستطيع استعمال خاصيَّة البحث.
- وهو كذلك **معينٌ لمن أراد تدريس البرمجة منطلقًا من لغة بايثون**؛ فقد جمعتُ فيه ما تفرَّق ونظمتُه بعد نظرٍ في عدة مؤلفات مماثلة، وعلى ما رأيتُ أنه أنفع للمتعلم، وأضفتُ بعض الأقسام المتممة لما رأيت أنه ناقص بدونها.

## أهداف الكتاب

1. استيعاب ماهية البرمجة، ومعرفة إمكانياتها وحدودها
2. إكساب مهارة التعبير الخوارزمي بلغة بايثون
3. امتلاك القدرة على فتح مكتبات برمجية بايثونية والاستفادة من النتاج المعرفي البرمجي المتراكم في بناء تطبيقات مفيدة

## لماذا وقع الاختيار على لغة بايثون؟

صممت بايثون لتكون **عالية المستوى**: أي مجردة عن كثير من التفاصيل الحاسوبية التي لا يهتم لها غير المختص. وهذا جلعها **سهلة**: ففي البداية يحس المتعلم أنه يتعلم لغة إنجليزية بقواعد معيَّنة. فزادت المكتبات البرمجية (وهي ما يتشاركه المجتمع من قطع برمجية) **وتضافرت الجهود** وتنوَّعت المجالات بشكل كبير جدًّا، حتى لا يكاد يوجد مجال إلا ودخلته بايثون.

### مجالات لغة بايثون

إذا نظرنا في إحصاء [JetBrains 2023](https://www.jetbrains.com/lp/devecosystem-2023/python/#python_for) نجد مجالات استعمال لغة بايثون:

![بم تستعمل لغة بايثون؟](./assets/jetbrains%20devecosystem-2023%20Python.png){target="_blank"} 

- 47% [تحليل البيانات](https://www.coursera.org/professional-certificates/google-advanced-data-analytics){target="_blank"}
- 42% [تعلم الآلة](https://www.youtube.com/playlist?list=PLuRv1IekA3YXlJIZIV8KjVcOEwoDXMY2b){target="_blank"} (الذكاء الاصطناعي)
- 39% [تطوير المواقع](https://www.coursera.org/professional-certificates/meta-back-end-developer){target="_blank"}
- 31% [برمجة كاسحات المواقع](https://www.youtube.com/playlist?list=PLzMcBGfZo4-n40rB1XaJ0ak1bemvlqumQ){target="_blank"} (التي تجمع البيانات)
- 30% [أتمتة إدارة الأنظمة والبنية التحتية التقنية](https://www.coursera.org/professional-certificates/google-it-automation){target="_blank"}
- 26% [أتمتة اختبار البرمجيات](https://playwright.dev/python/docs/intro){target="_blank"}
- 23% أغراض تعليمية
- 22% صناعة برمجيات أوليَّة (أي لسهولتها)

وانظر [إحصاء JetBrains 2024](https://www.jetbrains.com/lp/devecosystem-2024/#functionality_by_lang){target="_blank"} لمقارنة بايثون مع غيرها من اللغات، حيث يظهر في الجدول التالي توزيع استعمال المبرمجين للغات في مختلف المجالات. ويظهر لنا أن بايثون هي أكثر اللغات انتشارًا بين المجالات التقنية؛ فتعلمها يعطيك أوسع فرصة في المجالات:

![[توزيع استعمال اللغات بحسب المجالات التقنية في 2024](./assets/devecossytem-2024%20Code%20functionality%20by%20programming%20language.png)](./assets/devecossytem-2024%20Code%20functionality%20by%20programming%20language.png){target="_blank"}

ومن الشركات التقنية التي قامت على بايثون: Instagram، Spotify, Reddit, Netflix, Dropbox, Quora, Pintrest.

والمجتمعات البرمجية في بايثون كثيرة ومتعددة في اهتماماتها. منها على سبيل المثال:

### 🌐 **تطوير مواقع الشبكة**

- [Django](https://www.djangoproject.com/) - لبناء مواقع متصلة بقواعد بيانات
- [FastAPI](https://fastapi.tiangolo.com/) - حديث وسريع لبناء واجهات برمجية على الشبكة

### 📊 **تحليل البيانات وتصويرها**

- [Pandas](https://pandas.pydata.org/docs/getting_started/intro_tutorials/index.html) - لتحليل البيانات المرصوصة
- [statsmodels](https://www.statsmodels.org/) - للنماذج الإحصائية
- [Seaborn](https://seaborn.pydata.org/) - لتصوير البيانات الإحصائية على أساس Matplotlib.
- [matplotlib](https://matplotlib.org/) - مكتبة شاملة لإنشاء تصورات ثابتة ومتحركة وتفاعلية.
- [Selenium](https://pypi.org/project/selenium/){target="_blank"} لتصفح المواقع بشكل آلي وسحب البيانات منها

### 📊📊📊 **البيانات الضخمة**

- معالجة البيانات المتدفقة بسرعة وكفاءة عالية: [Dask](https://dask.org/){target="_blank"} و [Ray](https://ray.io/){target="_blank"}.
- أتمتة عمليات البيانات: [Airflow](https://airflow.apache.org/){target="_blank"}, [Dagster](https://dagster.io/){target="_blank"} و [Prefect](https://www.prefect.io/){target="_blank"}

### 🤖 **الذكاء الاصطناعي وتعلم الآلة**

- [scikit-learn](https://scikit-learn.org/) - لاكتشاف الأنماط والتنبؤ (تعلم الآلة)
- [PyTorch](https://pytorch.org/) - بناء وتدريب نماذج التعلم العميق
- [Keras](https://keras.io/) - بناء وتدريب نماذج التعلم العميق
- [Hugging Face](https://huggingface.co/) - اختيار وتدريب نماذج التعلم العميق


### 🖼️ **معالجة الصور**

- [Pillow](https://pillow.readthedocs.io/en/stable/handbook/overview.html)
- [Scikit-image](https://scikit-image.org/)
- [OpenCV](https://docs.opencv.org/4.x/d6/d00/tutorial_py_root.html)
- [Manim](https://www.manim.community/) - تصوير الرياضيات: أسسها [3Brown1Blue](https://www.3blue1brown.com/) ليستعملها في مقاطعه التعليمية على اليوتيوب.

### 📐 **التحليل الرياضي**

- [SciPy](https://scipy.org/) - خوارزميات أساسية في الحوسبة العلمية
- [sympy](https://www.sympy.org/) - للرياضيات الرمزية.
- [PySR](https://astroautomata.com/PySR/) - الانحدار الرمزي.
- [cvxPy](https://www.cvxpy.org/index.html) - التحسين (Convex Optimization)
- [FEniCS](https://fenicsproject.org/) - حل المعادلات التفاضلية الجزئية (PDEs) باستخدام طريقة العناصر المحدودة (FEM)
- [igraph](https://python.igraph.org/en/stable/tutorials/quickstart.html) - الترابطات والشبكات
- [python-control](https://python-control.readthedocs.io/) - أنظمة التحكم

### 🧪 **الكيمياء**

- [Cantera](https://cantera.org/)
- [MDAnalysis](https://www.mdanalysis.org/)
- [RDKit](https://github.com/rdkit/rdkit)
- [PyBaMM](https://www.pybamm.org/)

### ⚛️ **الحوسبة الكمومية**

- [PennyLane](https://pennylane.ai/)
- [Qiskit](https://qiskit.org/)

### 🧠 **علم النفس**

- [PsychoPy](https://www.psychopy.org/)

### 🧬 **المعلوماتية الحيوية**

- [BioPython](https://biopython.org/)
- [Scikit-Bio](http://scikit-bio.org/)
- [PyEnsembl](https://github.com/openvax/pyensembl)
- [ETE](http://etetoolkit.org/)

### 🗻 **علوم الأرض**

- [Pangeo](https://pangeo.io/)
- [Simpeg](https://simpeg.xyz/)
- [ObsPy](https://github.com/obspy/obspy/wiki)
- [Fatiando a Terra](https://www.fatiando.org/)

### 🔭 **علم الفلك**

- [AstroPy](https://www.astropy.org/)
- [SunPy](https://sunpy.org/)
- [SpacePy](https://spacepy.github.io/)

## بايثون وحدها لا تكفي

والواقع أن ليسَ ثمة لغة واحدة تحقق كل متطلبات بناء التطبيق؛ بل يغلب على المشاريع البرمجية تعدد اللغات فيها، وإن كانت مشاريع فردية صغيرة.
وإن من منافع التعلم بالطريقة الصحيحة؛ أن تعلُّمَك للغة الثانية يصبح أسهل؛ فقد تختلف أساليب التعبير بين لغة وأخرى، إلا أن المفاهيم مشتركة.


## تعريب المصطلح

لعل وصف المفاهيم باللغة الأم أقرب للطبع، وأمكن في الذهن وأوعى، وأسهل في التقليب والانتقاد، وأوسع في الاختراع والإبداع. فالمفاهيم لا تتعلق باللغة التي كتبت بحروفها ابتداءً. فالمعنى شيء، واللغة شيء ثاني. بل إنَّ علامة العلم أن تحسن التعبير عنه. فليس بينك وبين المفهوم حاجز اللغة، ولا هالة المصطلح.

ويموت المصطلح وإن كان مُثبتًا في قواميس الدنيا؛ إذا لم يتداوله أهله.
فإنَّ الأذن تستغرب غير المتداوَل من الكلام، كالطعم الجديد على اللسان؛ فإذا اعتاده استساغه.
وقد تجد ذلك فيما شَاعَ ودَرَج كالجوال والسيارة، والكهرباء والطيارة.

والمصطلح العلمي له من اللغة معنىً يتأثر بالسياق الذي يُستعمل فيه، وكذلك يتأثر بالمصطلحات المحيطة به. فإذا ما جُرِّد المصطلح عن قصته، ولم يُعرَف أصله؛ فقد يتسرع المرءُ بالحكم على عدم مناسبته.

ولا يُفهم مما سبق أن المصطلح الإنجليزي مُهمَل؛ بل نضرب بالحجر عصفورين. إذْ لا بد لك من إتقان اللغة الإنجليزية لتستقي من تلك المنابع.