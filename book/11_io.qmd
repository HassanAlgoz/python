---
title: File I/O with pathlib
jupyter: python3
---

This module offers classes representing filesystem paths with semantics appropriate for different operating systems. Path classes are divided between [pure paths](https://docs.python.org/3/library/pathlib.html#pure-paths), which provide purely computational operations without I/O, and [concrete paths](https://docs.python.org/3/library/pathlib.html#concrete-paths), which inherit from pure paths but also provide I/O operations.

If you’ve never used this module before or just aren’t sure which class is right for your task, Path is most likely what you need. It instantiates a concrete path for the platform the code is running on.

> [Comparison to the `os` and `os.path` modules](https://docs.python.org/3/library/pathlib.html#comparison-to-the-os-and-os-path-modules): pathlib implements path operations using PurePath and Path objects, and so it’s said to be object-oriented. On the other hand, the os and os.path modules supply functions that work with low-level str and bytes objects, which is a more procedural approach. Some users consider the object-oriented style to be more readable.

```{python}
from pathlib import Path
```

```{python}
assert (
    Path('datasets/pathlib/a/a.txt') ==
    Path(r'datasets\pathlib\a\a.txt') ==
    Path('datasets') / 'pathlib' / 'a' / 'a.txt'
)
```

Note, when copying Windows paths, you should either replace backslashes `\` with forward slashes `/` or use raw strings `r''` to avoid escaping issues (as we did above).

### [Reading and writing files](https://docs.python.org/3/library/pathlib.html#reading-and-writing-files)

Note, [file objects](https://docs.python.org/3/glossary.html#term-file-object) implement methods such as `.read()` and `.write()`. They mediate access to a real on-disk file or to another type of storage or communication device (for example standard input/output/error, in-memory buffers, network sockets, etc.).

```{python}
p = Path('datasets/pathlib/a/a.txt')

f = p.open()
content = f.read()
f.close()

print(content)
```

Here, we read a text file using the `.open()` method with read mode `'r'` (default). To ensure we never forget to close resources, like a file (which could lead to memroy leaks), Python provides the `with` statement.

The `with` statement can only be used with [Context Manager](https://docs.python.org/3/reference/datamodel.html#with-statement-context-managers) types (such as a file object) to lock and unlock resources automatically. In this case, the file object is opened at the entry of the `with` block and is closed when exited.

[Locking](https://en.wikipedia.org/wiki/Lock_(computer_science)) also makes sure only one process can access the resource (file) at a time, thus prevent invalid state caused by concurrent writes to the same resource (race condition). Unlocking releases the resource for other processes to use.

```{python}
p = Path('datasets/pathlib/a/a.txt')

with p.open(mode='r') as file:
    contents = file.read()
    print(contents)
```

The following table specify what `mode` characters mean:

| Character | Meaning |
| --- | --- |
| `'r'` | open for reading (default) |
| `'w'` | open for writing, truncating the file first |
| `'x'` | open for exclusive creation, failing if the file already exists |
| `'a'` | open for writing, appending to the end of file if it exists |
| `'b'` | binary mode |
| `'t'` | text mode (default) |
| `'+'` | open for updating (reading and writing) |

Read more about the built-in [`open()`](https://docs.python.org/3/library/functions.html#open) function.

The `.read()` method reads the entire file, but we can also read line by line using the `.readline()` method.

```{python}
p = Path('datasets/pathlib/a/a.txt')

with p.open(mode='r') as file:
    for i, line in enumerate(file, start=1):
        line = line.rstrip() # <1>
        print(f'Line {i}: {line}')
```
1. Using `.rstrip` to remove the '\n' (newline character)

We can also write to a file using the `.write()` method:

```{python}
p = Path('datasets/pathlib/a/zzz.txt')

with p.open(mode='w') as file:
    file.write('Hello, World!\n') # <1>
```
1. The `.write()` method does not add a newline character, so we need to add it manually.


### [Reading directories](https://docs.python.org/3/library/pathlib.html#reading-directories)

```{python}
p = Path('datasets/pathlib/')
dirs = [x for x in p.iterdir() if x.is_dir()]
dirs
```

A fun exercise is to find out how big is your Downloads folder. We can use the `stat()` method to get the file system metadata of a file or directory. The `st_size` attribute of the `stat()` object gives the size of the file in bytes.

```{python}
p = Path.home() / 'Downloads'
size = p.stat().st_size
print(size, 'bytes')
```

Let's format the size in a human-readable format.

```{python}
def format_size(size):
    size_kb = size / 1024
    size_mb = size_kb / 1024
    size_gb = size_mb / 1024
    if size_gb > 0.1:
        return f'{size_gb:.2f} GB'
    elif size_mb > 0.1:
        return f'{size_mb:.2f} MB'
    return f'{size_kb:.2f} KB'

print(format_size(size))
```


### Listing files in all subdirectories with [`glob`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob)

Let's say we are interested in the total size images only, in a directory tree. We can use the [`glob`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob) to utilize a [Pattern language](https://docs.python.org/3/library/pathlib.html#pathlib-pattern-language) like so:

```{python}
total_size = 0
for p in Path('datasets/pathlib/').glob('**/*.jpg'):
    total_size += p.stat().st_size

print('Total size:', total_size, 'bytes')
print('Total size:', format_size(total_size))
```


### Directory tree traversal with [`walk`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.walk)

Walk the directory tree either top-down or bottom-up.

```{python}
p = Path('datasets/pathlib/')
for dirpath, dirnames, filenames in p.walk(top_down=True):
    print(dirpath)
    for file in filenames:
        print(f'\t{file}')
        # print('\tFULL PATH:', Path(dirpath) / file)
```

You can uncomment the last line to see that we have the full path.


## `pathlib` methods

| [`pathlib`](https://docs.python.org/3/library/pathlib.html#module-pathlib) | Description |
| --- | --- |
| [`PurePath.parent`](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.parent) | Returns the parent directory of the path. |
| [`PurePath.name`](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.name) | Retrieves the last component (file or directory name) of the path. |
| [`PurePath.stem`](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.stem), [`PurePath.suffix`](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.suffix) | `stem`: Returns the file name without extension. `suffix`: Returns the file extension (with dot). |
| [`PurePath.joinpath()`](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.joinpath) | Combines multiple path components. |
| [`PurePath.is_absolute()`](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.is_absolute) | Checks if the path is absolute. |
| [`PurePath.relative_to()`](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.relative_to) | Returns a version of the path relative to another path. |
| [`Path.expanduser()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.expanduser) | Expands `~` to the current user’s home directory. |
| [`Path.resolve()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.resolve) | Returns the absolute path by resolving symbolic links. |
| [`Path.absolute()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.absolute) | Returns the absolute version of the path (without resolving symlinks). |
| [`Path.exists()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.exists) | Checks if the path exists. |
| [`Path.is_file()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_file) | Checks if the path points to a regular file. |
| [`Path.is_dir()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_dir) | Checks if the path points to a directory. |
| [`Path.is_symlink()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_symlink) | Checks if the path points to a symbolic link. |
| [`Path.is_junction()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_junction) | Windows-specific: checks if the path points to a junction. |
| [`Path.is_mount()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_mount) | Checks if the path is a mount point. |
| [`Path.samefile()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.samefile) | Checks if two paths refer to the same file. |
| [`Path.cwd()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.cwd) | Returns the current working directory. |
| [`Path.stat()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.stat) | Returns file system metadata. |
| [`Path.lstat()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.lstat) | Like `stat()` but does not follow symlinks. |
| [`Path.iterdir()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.iterdir) | Returns an iterator over the directory contents. |
| [`Path.walk()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.walk) | Recursively walks through a directory tree. |
| [`Path.mkdir()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir) | Creates a new directory. |
| [`Path.hardlink_to()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.hardlink_to) | Creates a hard link pointing to the path. |
| [`Path.symlink_to()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.symlink_to) | Creates a symbolic link pointing to the path. |
| [`Path.readlink()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.readlink) | Returns the path the symlink points to. |
| [`Path.rename()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.rename) | Renames the file or directory. |
| [`Path.replace()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.replace) | Renames the file or directory, overwriting if necessary. |
| [`Path.unlink()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.unlink) | Removes a file. |
| [`Path.rmdir()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.rmdir) | Removes an empty directory. |
| [`Path.chmod()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.chmod) | Changes file mode and permissions. |
| [`Path.lchmod()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.lchmod) | Like `chmod()` but does not follow symlinks. |
