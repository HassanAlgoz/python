---
title: المدخل إلى بايثون
jupyter: python3
---

تمثل بايثون المسميات البرمجية بنموذج يُعرف بمصطلح البرمجة الشيئية / الكائنية (Object-oriented Programming). فكل **شيء** مكوَّن من عنصرين: **بيانات وإجراءات**. وباعتبار البيانات والإجراءات المشتركة بين الأشياء المعيَّنة تتكون لدينا مُجرَّدات نسميها **الأصناف**. والأصناف نفسها تشترك فيما بينها في إجراءات وبيانات؛ فيتكون لدينا مستوىً أعلى من التجريد كذلك (يأتي الحديث عنه -إن شاء الله- في فصل الأصناف).

نستعرض في هذه المقدمة ثلاثة مفاهيم عامة في اللغات من زاوية بايثون حتى يتكون لدينا تصوُّر شامل:

1. **الشيء المفرد** ونمثل له بصنف **الرقم**. ومن خلالها نريد أن نتعرف على:
	- **المعرَّفات**: وهي أسماء نُسندها للأشياء؛ فتُحفظ في ذاكرة البرنامج حتى نشير إليها في إجراءات لاحقة.
	- **التعيين**: وهي عملية الإسناد نفسها.
	- **العملية / الإجراء**: مثل الجمع (`+`) والطرح (`-`) بين الأرقام. والإجراءات الأساسية مثل:
		- إجراء / عملية `type` لمعرفة النوع / الصنف
		- إجراء / عملية `print` لإظهار النتائج في نافذة المخرجات 
2. **الشيء المجموع**، ونمثل له بصنف **القائمة** (وهي مرتَّبة).

## الشيء المفرد

ويندرج تحت صنف الأرقام أصناف (وإن شئت قل: أنواع) هي:

1. العدد الصحيح
2. والعدد العشري
3. والعدد التخيلي
4. العدد الثنائي (الذي يكون إما صفرًا أو واحدًا .. وذلك يُحتاج إليه في الجمل الشرطية).

فاشتراكها في صفة الرقمية (الذي جعلها تحت صنف الأرقام) أتى من حيث أنها تقبل إجراءات الجمع والطرح والقسمة ، وكذلك إجراءات المقارنة (أكبر من ، وأصغر من ، والمساواة) ونحو ذلك مما تقبله الأرقام. وسيأتي الحديث عنها بالتفصيل في [باب الرقم](02_numbers.qmd).

مثال بلغة البرمجة نقول:

```{python}
x = 123        # int (Integer)
foo = 123.45   # float (Decimal)
ok = True      # bool (Boolean)
not_ok = False # bool (Boolean)
```

ملاحظات حول هذا الكود:

- لاحظ أن ما يُكتب بعد علامة `#` هو تعليق يُمكن إدراجه في ثنايا الكود وذلك لتوضيحه. ونستعمله هنا للتعليم.
- المعرَّفات (في الطرف الأيسر) تقبل أن تكون حرفًا أو كلمة ، أو كلمات مفصولة بشرطة سفلية (`_`) ويكثر استعمال ذلك
1. فالسطر الأول يعين قيمة `123` (وهي من جنس الأعداد الصحيحة) للاسم `x` وذلك عن طريق عملية التعيين (`=`).
2. والثاني  مثله لكن عدد عشري (لاحظ أنه يمكن للمسمى أن يكون كلمة ولا يشترط أن يكون حرفًا كما في الرياضيات). 
3. والثالث مثله لكن قيمة ثنائي تساوي 1 ("نعم"). والأخير مثله لكن تساوي  0 ("لا"). فكل هذه أرقام.


ذلك كان تخزينًا للقيمة. فماذا عسانا أن نفعل بهذه القيم؟ نستعرض الآن بعض العمليات الحسابية بين الأرقام:

```{python}
x = 5
y = 10
z = x + y
print(z)
```

1. في السطر الأول: قمنا بتعيين **القيمة** `5` **لمعرف** `x`
2. في السطر الثاني: مثل الأول لمعرف `y`
3. في السطر الثالث: تعيين ناتج **عملية الجمع** (`+`) بين عددين
4. في السطر الرابع: `print` هي إجراء تقدَّم تعريفها ضمن المكتبة الأساسية في حزمة البايثون، تعمل هنا على الكائن الرقمي `z` ليكون حاصلها: كتابة قيمة الرقم على الشاشة.

لاحظ أن علامة الـ(`=`) **لا تعني استواء الطرفين** (ليست معادلة رياضية). وإنما هي **عملية تعيين** (مثلها مثل عملية الجمع `+`) تقوم بإسناد قيمة لمسمى (وهو `x` هنا)؛ فتُخزِّن القيمة في الذاكرة في الحاسوب كأنما توضَع في صندوقٍ معنوَن بالاسم `x`. وقل مثل ذلك في `y` وكذلك في `z`.

وتستطيع أن تقول إن ما قبل علامة التعيين (`=`) أصبح اسمًا مُعرَّفًا يُشير إلى شيء. وما بعد العلامة هو الشيء: وله صفتان أساسيتان: البيانات (`5`) والإجراءات التي تُعرَف ضِمنيًّا بحسب النوع (`int`) وتعني صِنف الأعداد الصحيحة (Integers)، الذي يندرج تحت صنف الأرقام (numbers).

لو أردنا معرفة نوع الشيء، فلدينا الكلمة `type(x)` نستخدمها هكذا:

```{python}
type(100)
```

```{python}
t = type(x)
print(t)
```

ونستطيع استعمال الناتج من العملية الأولى ليكون داخلاً للعملية الثانية من غير حفظ في مسمى وسيط، وذلك على النحو التالي:

```{python}
print(type(x))
```

والعمليات بين الأرقام تنتج أرقامًا، ولذلك نجد النوع يعمل بهذه الطريقة أيضًا:

```{python}
print(type(x + y))
```

## النص

وقد نقول إن النص نوع مُفرد أو نقول إنه نوعٌ مجموع باعتباره سلسلة من الحروف. لكن بغض النظر عن ذلك، فهو نوع محوري في أي لغة برمجة تتعامل مع ما هو مكتوبٌ رقميًّا كالرسائل والمستندات والمقالات والكتب ونحو ذلك. ويأتي الحديث عنه في [باب النص](09_strings.qmd).

لتعريف النص نضع علامات التنصيص المزدوجة أو المفردة (لا فرق بينهما في بايثون) وذلك على النحو التالي:

```{python}
a = 'Ahmad'
b = "Belal"
```

وإن كان النص يمتد لأسطر كثيرة، فتستعمل ثلاث تنصيصات متتالية على النحو التالي:

```{python}
text = """Salam Alykom
I hope you are enjoying Python.

Best wishes.
"""
```

وتأتي النصوص في أغلب الأحيان من الملفات المخزنة في الجهاز أو المنتقلة عبر الشبكة، فنقرؤها ثم نعالجها، على النحو التالي:

```{python}
with open('datasets/example_root/something.txt') as file:
    contents = file.read()
print(contents)
```

وسنتعلم كيفية التعامل مع الملفات النصية حفظًا وقراءة في [باب الملف](11_files.qmd) وكذلك في [باب سَلسَلة البيانات](12_serialization.qmd). ولا بد عند ذلك من حدوث مسارات في البرنامج غير معتادة، ولذلك سنتعلم أيضًا التعامل مع الأخطاء في [باب الأخطاء](13_errors.qmd).

## الشيء المجموع

تعلمنا كيف نخزن قيمة عدد في `x` وقيمة عدد آخر في `y`. لكن لو أردنا التعامل مع الأرقام في مجموعة معًا لنحسب: مجموعها أو وسيطها أو متوسطها وغير ذلك سواءً كان بسيطًا أو معقَّدًا. فإننا نستعمل القوسين المربعين `[]` ونضع الأرقام مفصولة بعلامة الفاصلة، لتكون في مجموعة لها اسم يجمعها: 


```{python}
my_list = [20, 10, 30]
```

ولمجموعة الأرقام عدد من الإجراءات المضمَّنة في لغة بايثون مثل:

- الجمع: `sum`
- القيمة العليا: `max`
- القيمة الدنيا: `min`
- عد العناصر: `len`

نستعرضها هنا:

```{python}
print(sum(my_list))
print(max(my_list))
print(min(my_list))

avg = sum(my_list) / len(my_list)
print(avg)
```

وكذلك المجموعة قد تتكون من عناصر نصية، ويمكن الاستعلام عن وجود عنصر فيها في جملة شرطية، وذلك على النحو التالي:

```{python}
fruits = ['Apple', 'Banana', 'Banana']

if 'Apple' in fruits:
    print("Keeps the doctor away!")
```

وسيأتي الكلام عن الجمل الشرطية في [باب التحكم في التدفق](03_control-flow.qmd).

أما المجموعات فتنقسم في بايثون بحسب خصائصها:

1. أن يكون الشيء مجموعة (وما يترتب على ذلك من خصائص)
2. أن يكون للمجموعة ترتيب
3. أن تكون قابلة للحذف والإضافة والتعديل
4. أن تكون منتهية أو غير منتهية

وأفردنا لها الحديث في أبواب:

- [المتسلسلة](06_sequences.qmd)
- [المجموعة الرياضية](07_sets.qmd)
- [الربط](08_mapping.qmd)
- [سلسلة الأحرف](09_strings.qmd)
- [اختصارات المجموعات](10_comprehension.qmd)

## ماذا يترتب على اختلاف الأنواع؟
صنف / نوع الشيء يترتب عليه قائمة العمليات الممكنة معه.

فمثلاً: الأرقام يجوز بينها الجمع والطرح والضرب والقسمة والمقارنة:

```{python}
x = 10
y = 5

z = x + y
print(z)

z = x < y
print(type(z))
print('less than?', z)

z = x == y
print(type(z))
print('equals?', z)
```

ويجوز بين النصوص الدمج (باستعمال علامة `+`):


```{python}
a = 'Hello'
b = 'World'

c = a + b
print(c)
```



لكن لا يجوز جمع رقم ونص:

```{python}
#| error: true
a = 'Adam'
x = 10
print(a + x)
```

ويختلط على المبتدئين التفريق بين الرقم الذي هو في الحقيقة نص، والرقم الذي نوعه رقم (لاحظ وجود علامة التنصيص):

```{python}
#| error: true
x = '10'
y = 10
print(x + y)
```

فهذا الخطأ متوقع. وهنا لدينا احتمالان:

1. تحويل `x` إلى رقم صحيح باستعمال عملية `int`
2. تحويل `y` إلى نص باستعمال عملية `str`

وانظر النتيجة في كلا الحالتين:

```{python}
print(int(x) + y)
print(x + str(y))
```

بينما يجوز ضرب النص بالرقم؛ فيتكرر النص بعدد هذا الرقم:

```{python}
a = 'Adam'
print(a * 3)
```

إذًا **فما يجوز وما لا يجوز في الأنواع نفسها وبينها** يحدده تعريفنا للعمليات عند تعريف الأصناف. ولذلك سنفرد لها بابين:

- [باب تعريف الأصناف](14_classes.qmd)
- [باب التخصيص والتركيب](15_extend.qmd)

## نمو اللغة

تتكون لغة بايثون من **مفردات** تستعمل في **جمل** للتعبير عن معاني تترجم كعمليات مفصَّلة في اللغة المنطقية للآلة (CPU) بحسب معماريَّة الآلة.

وهذه المفردات المبنية في أصل لغة بايثون هي:


```
False      await      else       import     pass
None       break      except     in         raise
True       class      finally    is         return
and        continue   for        lambda     try
as         def        from       nonlocal   while
assert     del        global     not        with
async      elif       if         or         yield
```

أما الجمل فتنقسم إلى قسمين:

1. [**جملة بسيطة**](https://docs.python.org/3/reference/simple_stmts.html)، وعادةً ما تكون في سطرٍ واحد. ومن أمثلتها:
	- التعيين (`=`)
	- الحذف (`del`)
	- الإرجاع (`return`)

2. [**جملة مركبة**](https://docs.python.org/3/reference/compound_stmts.html) وعادةً ما تكون على عدة أسطر، لكن -في بايثون- قد تكون مختصرة في سطرٍ واحد. ومن أمثلتها:
	- الجملة الشرطية (`if`)
	- جملة التكرار (`while`) و(`for`)
	- جملة تعريف الإجراء (`def`) وجملة تعريف الصنف (`class`)

وبنى مطوروا بايثون على ذلك الأساس (المفردات والجمل) تعريفات لإجراءات وأصناف ضمنوها مع اللغة وذلك لكثرة الحاجة إليها. فإنك عندما تثبِّت حزمة بايثون في جهازك فإنها تكون ضمن هذه الحزمة. تسمى: **المكتبة الأساسية**. وهي على قسمين:

- **مضمَّنات أساسية**، وفيها:
	- [إجراءات مضمَّنة](https://docs.python.org/3/library/functions.html) مثل: `print`, `sum`, `max`, `min`, `len`
	- [أصناف مضمَّنة](https://docs.python.org/3/library/stdtypes.html) مثل: `str`, `int`, `list`
- **وحدات أساسية**، مثل:
	- وحدة [`math`](https://docs.python.org/3/library/math.html) التي تضم مجموعة إجراءات تعنى بالعمليات الرياضية على الأعداد
	- وحدة [`datetime`](https://docs.python.org/3/library/datetime.html) التي تضم مجموعة أصناف وإجراءات تعنى بالوقت والتاريخ 


ويمكن استعمالها بعد جملة الاستيراد `import` على على النحو التالي:

```{python}
import math

sq = math.sqrt(16)
print(sq)
```

فهذه عملية الجذر التربيعي أتينا بها باستيراد **الوحدة الأساسية** `math` ثم أشرنا إلى الإجراء `sqrt` المعرَّف ضمنها عن طريق علامة النقطة `.`.

ثم يأتي دوْر **المجتمع** ليستعمل اللغة بمفرداتها وجملها ومكتبتها الأساسية، ليبني فوق ذلك ما يخدم أغراضه. فاستطاع كل فئة من الناس تركيب حزمة جديدة مكونة من أشياء مركبة وإجراءات مركبة يستفيدون هم في ذلك من حزم أناس آخرين ، ثم يوفرونها لغيرهم. وهكذا تنمو البرمجيات ، حزمةً تِلو الأخرى بحسب اهتمامات كل مجتمع برمجي. وتسمى هذه: **مكتبات الطرف الثالث** (Third-party Libraries).

ومن مكامن القوة في لغة بايثون: أنها **متوافقة مع لغتي C/C++** إذْ يُمكن كتابة برمجيات عالية الأداء والكفاءة بهما مستفيدين من الحزم الموجودة فيهما، ثم لفُّ ذلك بحزمة سهلة الاستخدام للمطورين بلغة البايثون.

فالمجتمعات البرمجية في بايثون كثيرة ومتعددة في اهتماماتها. منها على سبيل المثال:

- **تطوير مواقع الشبكة**:
	- [Django](https://www.djangoproject.com/) - لبناء مواقع متصلة بقواعد بيانات
	- [FastAPI](https://fastapi.tiangolo.com/) - حديث وسريع لبناء واجهات برمجية على الشبكة 

- **الذكاء الاصطناعي وتعلم الآلة**:
	- [statsmodels](https://www.statsmodels.org/) - للنماذج الإحصائية
	- [scikit-learn](https://scikit-learn.org/) - لاكتشاف الأنماط والتنبؤ (تعلم الآلة) 
	- [PyTorch](https://pytorch.org/) - لبناء نماذج التعلم العميق

- **تصوير البيانات**:
	 - [seaborn](https://seaborn.pydata.org/) - تصور البيانات الإحصائية على أساس Matplotlib.
	 - [matplotlib](https://matplotlib.org/) - مكتبة شاملة لإنشاء تصورات ثابتة ومتحركة وتفاعلية.

- **التحليل الرياضي والهندسة**:
	 - [sympy](https://www.sympy.org/) - للرياضيات الرمزية.
	 - [PySR](https://astroautomata.com/PySR/) - الانحدار الرمزي.
	 - [SciPy](https://scipy.org/) - للرياضيات والعلوم والهندسة.

وتصل عدد المشاريع (تقريبًا عدد الحزم) في قاعدة بيانات [(PyPI)  ](https://pypi.org/) اليوم ما يزيد على 580,000 مشروع. وتجد الكود مشاعًا على أكبر منصة لإدارة الأكواد البرمجية: [GitHub](https://github.com/).

استعن بالله وابدأ الدرس القادم: [الرقم](02_numbers.qmd).