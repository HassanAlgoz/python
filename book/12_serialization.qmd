# حفظ البيانات

تحفظ الملفات بصيغ متعددة حسبما يناسبها وما يتفق عليه الناس. نستعرض في هذا الدرس صيغتين:

- صيغة لحفظ البيانات المرتبطة والمضمنة، ونمثل لها بصيغة `json` وهي اختصار لكلمة: JavaScript Object Notation.
- صيغة لحفظ البيانات الجدولية، ونمثل لها بصيغة `csv` وهي اختصار لكلمة Comma-Separated Values. 

**سَلْسَلة البيانات** (Data Serialization) تشير لعملية تحويل الهياكل البيانية (مثل القاموس أو القائمة) من تمثيلها المترجم من لغة البرمجة إلى صيغة يمكن تخزينها ونقلها بحيث يمكن قراءتها من طرف آخر لإعادتها إلى تمثيل متناسب معه. وعملية تحويل البيانات المسلسلة مرة أخرى إلى شكلها المترجم من لغة البرمجة تسمى فك التسلسل (Deserialization).

## البيانات المرتبطة والمضمنة

صيغ حفظ الروابط كثيرة مثل XML وJSON وYAML. في هذا القسم، سنركز على ملفات JSON. توفر [وحدة `json`](https://docs.python.org/3/library/json.html) وظائف لقراءة وكتابة ملفات JSON.

```{python}
import json
```

لنفترض أن لدينا `user_preferences` محفوظًا في القاموس، ونريد حفظه في ملف JSON:

```{python}
user_preferences = {
    'theme': 'dark',
    'language': 'Arabic',
    'notifications': {
        'email': True,
        'sms': False,
        'push': True
    },
    'last_updated': '2021-09-01',
    'emails': ['example1@domain.com', 'example2@domain.com']
}
```

لنكتبها إلى ملف json:

```{python}
with open('datasets/user_preferences.json', mode='w') as file:
    json.dump(user_preferences, file)
```

لاحقًا عندما نريد تحميلها، يمكننا القيام بما يلي:

```{python}
with open('datasets/user_preferences.json') as file:
    data = json.load(file)
print(data)
```

إذا كنت تتعامل مع صيغ أخرى، تحقق من: [وثائق وحدة `xml` المدمجة](https://docs.python.org/3/library/xml.html) لوثائق XML، أو [مكتبة `pyyaml`](https://pyyaml.org/wiki/PyYAMLDocumentation) لوثائق YAML.

## البيانات الجدولية

تأتي البيانات الجدولية في صيغ متعددة، مثل CSV وTSV وExcel وSQL. في هذا القسم، سنركز على ملفات CSV. فهي مكونة من ثلاثة أحرف:

- C: Comma
- S: Separated
- V: Values

وتعني حرفيًّا: القيَم المفصولة بالفاصلة. وشكلها في الحقيقة عبارة عن صفوف من القيم بحيث يمثل كل سطر في هذا الملف صفًّا واحدًا يتكون من أعمدة بعدد الفواصل + 1، ويحدد ابتداء العمود القادم عند علامة الفاصلة في الصف، وذلك يتبين حينما تفتح الملف باستخدام محرر جداول مثل Excel أو Sheets ونحوهما.

توجد في بايثون وحدة [`csv`](https://docs.python.org/3/library/csv.html) فيها إجراءات للقراءة والكتابة على طريقة csv. فلدينا:

- كائن [`reader`](https://docs.python.org/3/library/csv.html#csv.reader) لعمليات القراءة
- وكائن آخر منفصل اسمه [`writer`](https://docs.python.org/3/library/csv.html#csv.writer) يحوي عمليات الكتابة

```{python}
import csv
```

لنكتب قائمة من الطلاب إلى ملف CSV. لاحظ، لدينا قائمة من قوائم، حيث تمثل كل قائمة داخلية صفًا لوحدها:

```{python}
header = ['Name', 'Age', 'Grade']
rows = [
    ['Adam', 22, 90],
    ['Belal', 23, 92],
    ['Camal', 24, 91],
]
```

نكتبها على النحو التالي:

```{python}
with open('datasets/students.csv', mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(header)
    writer.writerows(rows)
```

ملاحظة، يمكنك محاولة فتح الملف مباشرة من مستكشف الملفات. حاول فتحه باستخدام Excel أو Google Sheet أو أي برنامج جداول بيانات آخر. إذا فتحته باستخدام محرر نصوص، سترى البيانات كملف CSV؛ حرفيًا قيم مفصولة بفواصل.

الآن، دعنا نقرأه كهيكل بيانات في بايثون: كقائمة من القوائم.

```{python}
with open('datasets/students.csv') as file:
    reader = csv.reader(file)
    for row in reader:
        print(row)
```

لنحاول حساب متوسط درجات الطلاب.

```{python}
students = []
with open('datasets/students.csv') as file:
    reader = csv.reader(file)
    next(reader) # skip the header
    for row in reader:
        students.append(row)
```

الآن بعد أن حفظناها في القائمة `students`، دعونا نقوم ببعض العمليات الحسابية.

```{python}
#| error: true
grades = [s[2] for s in students]
avg = sum(grades) / len(grades)
```

هذا الخطأ متوقع عند قراءة الملفات لأنها دائمًا تعتبر من نوع `str`، ولذلك نضطر لتحويل القيَم العددية إلى `int` لإجراء عمليات رياضية:


```{python}
grades = [int(s[2]) for s in students]
avg = sum(grades) / len(grades)
avg
```

يمكنك أيضًا قراءة وكتابة البيانات في شكل قاموس باستخدام الكائنات [`DictReader`](https://docs.python.org/3/library/csv.html#csv.DictReader) و[`DictWriter`](https://docs.python.org/3/library/csv.html#csv.DictWriter).

```{python}
with open('datasets/students.csv') as file:
    reader = csv.DictReader(file)
    for row in reader:
        print(row)
```

الطريقة الموصى بها للتعامل مع البيانات الجدولية (مثل ملفات CSV) هي استخدام مكتبة pandas. توفر هذه المكتبة هيكل بيانات سريع ومرن لمعالجة البيانات وتحليلها. **في هذا المستوى، أشجعك على الاطلاع على [دليل البدء السريع لمكتبة pandas](https://pandas.pydata.org/docs/getting_started/intro_tutorials/index.html) بنفسك**.

