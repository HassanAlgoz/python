# الأفعال

**الفعل**: قطعة كود مخزَّنة مسمَّاة. عادة ما يكون لها عوامل متغيرة.

نحو: `int(x)` لإنشاء العدد الصحيح من النص. مثل: `int("12")` نُنتج: `12`.

وقد يأخذ عاملين نحو: `max(a, b)` مثل: `max(10, 5)` نُنتج: `10`.

وقد يأخذ عاملاً واحدًا لكنَّهُ قائمة نحو: `sum(numbers)` مثل: `sum([1, 2, 3, 4, 5])` نُنتج: `15`.

وقد يكون عدد عوامله لا محدودًا نحو: `print(*values)` مثل:

```{python}
name = "Adam"
age = 25
print("My name is", name, "and I'm", age, "years old")
```

وعلامة النجمة `*` تشير لقبول عوامل مفكوكة على نحو ما تقدَّم، لا كالقائمة.

وقد يكون عامله جائزًا نحو: `range(start, stop, step)` مثل:

```{python}
assert range(10) == range(0, 10, 1)
```

وقد تقدَّم الحديث عنه في [باب التكرار](../03_control_flow/a_control_flow.qmd).

و**طلب التنفيذ** يكون بالقوسين بعد اسمه `()`، وتوضَع العوامل فيهما وهي ضربان:

- **فاعل**: مؤثر
- **مفعول**: متأثر

وفي كل ما سبق كانت العوامل من نوع الفاعل؛ لأنها كانت تؤثر في النتيجة ولا تتأثر بها.

أما المفعول فنحو فعل الترتيب من مكتبة القائمة: `list.sort(numbers)` فإن مفعوله القائمة نفسها، مثل:

```{python}
numbers = [40, 20, 10, 30]
list.sort(numbers)
```

فمع أننا لما نعيِّن النتيجة، فقد تغيَّرت القائمة:

```{python}
print(numbers)
```

بعكس الترتيب بالفعل الذي ليس من المكتبة: `sorted(numbers)` فإنَّ القائمة فيه ليست مفعولاً؛ إذْ يُنتِجُ الفعلُ قائمةً جديدةً ولا يغير القائمة المُدخلة:

```{python}
numbers = [40, 20, 10, 30]
print(sorted(numbers), "هي قائمة جديدة")
print(numbers, "لم يعمل الفعل في القائمة نفسها")
```

ويجتمع الفاعل والمفعول في نحو:

```{python}
list.append(numbers, 50)
```

- `numbers` هنا مفعول
- `50` هنا فاعل

```{python}
print(numbers)
```

وقد خصصت لغات البرمجة للمبني للمفعول الواحد كتابةً على النحو: `list.sort(numbers)` هي نفسها `numbers.sort()` حيث قدَّم المفعول:

```{python}
xs = [20, 10, 30, 40]
ys = [20, 10, 30, 40]

list.sort(xs)
ys.sort()
assert xs == ys

list.append(xs, 50)
ys.append(50)
assert xs == ys
```

وحرف النقطة `.` يصل لما هو مُسنَد إلى الشيء، سواءٌ كان مكتبة نحو `list` أو معيَّنًا من نوع نحو `xs` أو `ys`.

وتدور حولها فلسفة تسمَّى البرمجة الشيئية: Object-Oriented Programming. ويغلب على ما بين الأقواس إذًا أن يكون فاعلاً. ويأتي الحديث عنها في [باب الأصناف](../09_oop/a1_classes.qmd) إن شاء الله.

وقد تُعيَّنُ العوامل بأحد طريقتين:

1. **تعيين بالموضع**: نحو: `range(0, 10, 1)`
2. **تعيين بالاسم**: نحو: `range(start=0, step=1, stop=10)` فلا يشترط فيه ترتيب العوامل.

ويجوز استعمال الطريقتين معًا في نحو: `list.sort(numbers, reverse=True)` ويشترط فيه تقدم التعيين بالموضع ليكون في مكانه، ثم يتبعه التعيين بالاسم حيث لا يشترط الترتيب فيه.

## التعريف والتفاصيل والتنفيذ

نذلف الآن لإنشاء أفعال جديدة.

يعرَّف الفعل بـ `def` ويتكون من ثلاثة أجزاء:

1. **اسم الفعل**: الذي يُطلَبُ به
2. **العوامل**: العوامل التي يتم تعيينها لاحقًا
3. **التفاصيل**: وهي القطعة الكود التي يتم تنفيذها عند الطلب

أما **جملة الرجوع** `return` توقِفُ التنفيذَ عندها وتخرج بالنتيجة **لموضع الطلب**.

```{python}
def calculate_grade(score):
    if score >= 90:
        return "A"
    elif score >= 80:
        return "B"
    elif score >= 70:
        return "C"
    elif score >= 60:
        return "D"
    else:
        return "F"
```

وعند طلب التنفيذ نعين العوامل.

فينتج لنا بطلب `calculate_grade(95)` نسخة معيَّنة من تفاصيل الفعل، نسمّيها [**ظرف التنفيذ**](https://docs.python.org/3/reference/executionmodel.html#structure-of-a-program) ؛ يكون فيه المتغير `score=95` كأنه هكذا:

```python
if 95 >= 90:
    return "A"
elif 95 >= 80:
    return "B"
elif 95 >= 70:
    return "C"
elif 95 >= 60:
    return "D"
else:
    return "F"
```

وبطلب تنفيذ `calculate_grade(80)` يكون الظرف هكذ:

```python
if 80 >= 90:
    return "A"
elif 80 >= 80:
    return "B"
elif 80 >= 70:
    return "C"
elif 80 >= 60:
    return "D"
else:
    return "F"
```

لاحظ أن نتيجة السطرين بحسب الظرفين المختلفين:

```{python}
print(calculate_grade(95))
print(calculate_grade(80))
```

وقد نعدد عوامل كثيرة، نحو:

```{python}
def weather_condition(temperature, humidity, wind_speed):
    if temperature >= 30 and humidity >= 60 and wind_speed >= 10:
        return "Rainy"
    elif temperature >= 20 and humidity >= 50 and wind_speed >= 5:
        return "Cloudy"
    elif temperature >= 10 and humidity >= 30 and wind_speed >= 0:
        return "Sunny"
    return "Normal"
```

ويكون طلبها بالطريقتين كما تقدَّم، بالموضع أو بالاسم:

```{python}
cond = weather_condition(30, humidity=60, wind_speed=10)

if cond == "Rainy":
    print("Don't forget your umbrella!")
```

## العوامل الجائزة

الأصل في العوامل المعرَّفة الوجوب؛ إلا ما عُيِّن عند التعريف، ولو بالقيمة العدميَّة `None` أو ما يوازيها من القيَم الصفرية. وينسخُ ذلك التعيينَ التعيينُ عند طلب الفعل.

لو أردنا للفعل أن يتكيَّف بحسب الفاعل المعيَّن، بحيث:

- لو عينت السلزيوس فالتحويل لفهرنهايت: `convert_temperature(celsius=32)`
- لو عينت الفهرنهايت فالتحويل لسلزيوس: `convert_temperature(fahrenheit=89.6)`

وإليك معادلة التحويل بين نوعيْ درجة الحرارة:

$$
F = \frac{9}{5} C + 32
$$

فنعرِّفُ العوامل بقيَم عدميَّة، ونفحص وجودها بالشرط `is not None` لنُعمِلَها أو نهملها:

```{python}
def convert_temperature(celsius = None, fahrenheit = None):
    if celsius is not None:
        fahrenheit = (9 / 5) * celsius + 32
        return fahrenheit
    elif fahrenheit is not None:
        celsius = (fahrenheit - 32) * (5 / 9)
        return celsius
```

نتأكد:

```{python}
assert convert_temperature(celsius=32) == 89.6
assert convert_temperature(fahrenheit=89.6) == 32
```


## التصريح بالنوع

وجاز في بايثون ذكر أنواع العوامل والنواتج، وليس بلازِم ولا مُلزِم. نحو:

```python
def do_something(a: int = 0, b: str = '') -> float:
    # ...
```

فعبارة: `a: int = 0` تتكون من ثلاثة أجزاء:

- اسم العامل: `a`
- نوعه: `int`
- القيمة الابتدائية: `0`

وكذلك `b: str = ''` مثلها.

وبعد السهم نوع ناتج الفعل: `-> float`

ومن الأنواع المبنيَّة في بايثون:

- `int` الأعداد الصحيحة، نحو: `10`
- `float` الأعداد العشرية، نحو: `10.5`
- `str` وهي نوع النص، نحو: `"Salam"`
- `list` قائمة وإن شئت تحديد نوع العنصر الواحد فيها؛ فإنك تضعه بين القوسين المربعين، نحو:
    - `list[int]`
    - `list[float]`
    - `list[str]`


## نطاق التسمية

ومن خصائص الظرفيَّةِ انعزال المعرَّفات الداخلة عن الخارج. يعني أنها تُنسى بعد إنتهاء الفعل.

```{python}
def calculate_bmi(weight: float, height: float) -> float:
    bmi = weight / (height ** 2)
    return round(bmi, 2)
```

فنتوقع وقوع خطأ هنا لأن `bmi` غير معرفة إلا في نطاق الفعل:

```{python}
#| error: true

print(bmi)
```

وعلى العكس فإن المعرَّفات الخارجة معروفة في الداخل؛ فيمكن أن تكون عاملةً في الفعل:

```{python}
max_length = 8

def check_password_strength(password: str) -> str:
    if len(password) > max_length:
        return "strong"
    elif len(password) > max_length // 2:
        return "medium"
    return "weak"
```

![مستويات نطاق التسمية](../../assets/LEGB.png)


## الفعل المنتج

تُخرج الأفعال نتائج معالجتها بإحدى طريقتين:

- **الرجوع**: حيث ترجِع النتيجة بجملة `return` لموضع طلب الفعل، وغالبًا ما يتم تعيينه نحو: `y = sqrt(x)`
- **تغيير مفعول**:
    - **مذكور**، نحو: `list.sort(xs)` حيث تعدَّل القيمة التي يشير إليها المتغير `xs`
    - **محذوف**، نحو: `print(...)` حيث قيمة المفعول أصلاً: `print(..., file=sys.stdout)` فتُكتَب نتيجة المعالجة على الشاشة

والفعل دائمًا يرجع بنهاية آخر جملة فيه، لكن الذي لا يصرَّحُ فيه بكلمة الرجوع `return` يُقدَّر القيمة العدمية: `None` ويسمى الفعل حنيها **خاويًا** (void).

تأمل المثال التالي الذي يأخذ عوامل ثم لا يرجع بشيء، لكنه يُظهر النتيجة على الشاشة، وقد كتبنا فيه جملة الرجوع `return None` لكنها مقدَّرة على أية حال، ولا يلزمنا أن نضعها:

```{python}
def print_decorated(message: str, n: int) -> None:
    print("=" * n)
    print(message)
    print("=" * n)
    return None

print_decorated("Salam alykom", 15)
```


## الإجمال ثم التفصيل

ويُحبَّذُ في الإنشاء الإجمالُ ثم التفصيل. ويتأتى على النحو التالي:


```{python}
def min_max(numbers: list[float]) -> tuple[float, float]:
    """Return the minimum and maximum values in the list."""
    pass
```

- كتابة اسم معبِّرٍ عن وظيفة الفعل، مع كتابة عوامله وذكر أنواعها
	- وهي جُملة التعريف: `def`
- كتابة وصف -باللغة الإنجليزية- يحدد سلوكه العام بناءً على عوامله يصف ما يَقبل وما يُنتج (إذْ لغة البرمجة عاجزة عن بيان ذلك)
	- وهو النص الملحَقُ: [**`docstring`**](https://peps.python.org/pep-0257/) (ويكونُ أولَّ شيء فيه قبل أي كود) والقاعدة العامة فيه: ألا يصف إلا ما يفيد المستفيد من الفعل. أما التفاصيل التي تفيد مطوِّر الفعل فإنها تكون **تعليقات** بعلامة `#` في ثناياه. فالذي يظهر عند المساعدة `help(min_max)` هو النص الملحق، لا التعليقات.
- بعد ذلك نكتب الاختبارات التي بمجموعها تصف سلوك الفعل من الخارج 
	- ونستعمل لها جملة التوكيد: `assert`
	- ولن تكون حقيقيةً لأن تفاصيل الفعل لم تُكتب بعد، لذا قد تستعمل كلمة `pass` لإرضاء المترجم إلى ذلك الحين 
- وبعد ذلك نأتي لكتابة التفاصيل: التي هي قطعة الكود داخل الفعل.

وهكذا تظهر المساعدة، مثلما لو وضعت المؤشر على اسم الفعل (فإن غالب المحررات تُظهر لك شيئًا):

```{python}
help(min_max)
```

ثم نكتب **اختبارات تصف السلوك** الذي نريده منه:

```python
# assert min_max([10, 20, 30, 40, 50]) == (10, 50)
# assert min_max([50, 40, 30, 20, 10]) == (10, 50)
# assert min_max([10, 10, -900, 10, 10]) == (-900, 10)
```

ثم الآن نعدل الفعل الذي كتبناه:

- تستعمل التعليقات المبتدأة بحرف `#`لتبيين ما قد يُشكل من التفاصيل
- ذكر النوع `tuple[float, float]` يعني أن الفعل يرجع بزوج، لا بقيمة واحدة (وهذا يسمَّى نوع الصف، وسيأتي الحديث عنه)

```{python}
def min_max(numbers: list[float]) -> tuple[float, float]:
    """Return the minimum and maximum values in the list."""

    if len(numbers) == 0:
        return None, None
    
    # Assign the first element to minimum and maximum
    minimum = numbers[0]
    maximum = numbers[0]
    
    for num in numbers:
        if num < minimum:
            minimum = num
        # elif is used because maximum will never be less than minimum
        elif num > maximum:
            maximum = num
    return minimum, maximum
```

ونشغل الاختبارات، ونتوقع أن لا يظهر منها خطأ:

```{python}
assert min_max([10, 20, 30, 40, 50]) == (10, 50)
assert min_max([50, 40, 30, 20, 10]) == (10, 50)
assert min_max([10, 10, -900, 10, 10]) == (-900, 10)
assert min_max([]) == (None, None)
```
