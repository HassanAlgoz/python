# التكرار

**حلقة التكرار**: هي الرجوع بالتنفيذ لجملة سابقة (غالبًا تكون سطرًا سابقًا) وذلك يحصل عددًا من المرات أو معلَّقًا بشرط.

فللتكرار طريقتان:

- **التكرار بمتوالية** (`for`)؛ إذ يتوقف عدد مرات التكرار على عدد العناصر الناتجة من المتوالية التي يجري عليها التكرار.
- **التكرار بشرط** (`while`)؛ إذ يستمر التكرار مادام الشرط متحققًا.

## التكرار بشرط

نبدأ بالتكرار بالطريقة غير المحددة، وهي جُملة تبدأ بالكلمة `while` على النحو التالي.  كأنها `if` متكررة إلى حين تخلُّف الشرط (أن يصبح `False`). وإن لم يتحقق الشرط أصلاً فلا ينفذ الكود المضمَّن أصلا:

```python
while <boolean expression>:
    <code>
```

مثال:

```{python}
i = 0
while i < 5:
    print(i)
    i += 1
print('Done')
```

لنقم بتتبع الخطوات عندما تكون `i = 0`:

1. `0 < 5` تؤول `True`، فنطبع `0` ونزيد `i` لتصبح 1
2. `1 < 5` تؤول `True`، فنطبع `1` ونزيد `i` لتصبح 2
3. `2 < 5` تؤول `True`، فنطبع `2` ونزيد `i` لتصبح 3
4. `3 < 5` تؤول `True`، فنطبع `3` ونزيد `i` لتصبح 4
5. `4 < 5` تؤول `True`، فنطبع `4` ونزيد `i` لتصبح 5
6. `5 < 5` تؤول `False`،فنخرج من الحلقة
7. نطبع `Done`

وهذا تصوير لسير الأوامر لنفس الكود. ملاحظة: اضغط على الزر `Prev` أو `Next` للتنقل بين خطوات التنفيذ الفعلية:

<iframe width="800" height="500" frameborder="0" src="https://pythontutor.com/iframe-embed.html#code=i%20%3D%200%0Awhile%20i%20%3C%205%3A%0A%20%20%20%20print%28i%29%0A%20%20%20%20i%20%2B%3D%201%0Aprint%28'Done'%29&codeDivHeight=400&codeDivWidth=350&cumulative=false&curInstr=0&heapPrimitives=nevernest&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false"> </iframe>

لاحظ أن نسيان جملة الزيادة (`i += 1`) يجعل الشرط دائمًا صحيحًا، فيدور البرنامج في **حقلة لا نهيائة** ولا يخرج أبدًا. ويعتبر هذا خطأ برمجيًّا يتعذر على الكود التعامل معه بنفسه؛ بل يجب على المبرمج أن يكتشفه.

### الخروج من الحلقة

- تستخدم كلمة [`break`](https://docs.python.org/3/reference/simple_stmts.html#break) لإيقاف عملية التكرار كلها.
- تستخدم كلمة [`continue`](https://docs.python.org/3/reference/simple_stmts.html#continue) للانتقال إلى الكرة التالية متخطيةً بقية الخطوات في الكرة الحالية.

أولاً نمثل لاستعمال جملة `break` على النحو التالي:

```{python}
i = 0
while i < 5:
    if i == 3:
        break
    print(i)
    i += 1
print('Done')
```

<iframe width="800" height="500" frameborder="0" src="https://pythontutor.com/iframe-embed.html#code=i%20%3D%200%0Awhile%20i%20%3C%205%3A%0A%20%20%20%20if%20i%20%3D%3D%203%3A%0A%20%20%20%20%20%20%20%20break%0A%20%20%20%20print%28i%29%0A%20%20%20%20i%20%2B%3D%201%0Aprint%28'Done'%29&codeDivHeight=400&codeDivWidth=350&cumulative=false&curInstr=0&heapPrimitives=nevernest&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false"> </iframe>

وهذا مثال لاستخدام عبارة `continue` للتخطي:

```{python}
i = 0
while i < 5:
    if i == 3:
        i += 1
        continue
    print(i)
    i += 1
print('Done')
```

<iframe width="800" height="500" frameborder="0" src="https://pythontutor.com/iframe-embed.html#code=i%20%3D%200%0Awhile%20i%20%3C%205%3A%0A%20%20%20%20if%20i%20%3D%3D%203%3A%0A%20%20%20%20%20%20%20%20i%20%2B%3D%201%0A%20%20%20%20%20%20%20%20continue%0A%20%20%20%20print%28i%29%0A%20%20%20%20i%20%2B%3D%201%0Aprint%28'Done'%29&codeDivHeight=400&codeDivWidth=350&cumulative=false&curInstr=0&heapPrimitives=nevernest&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false"> </iframe>

أما جملة `break` المضمنة تحت طبقتين من التكرار فإن الذي يتوقف هو التكرار الداخلي فقط، ولا يتوقف الخارجي. وهذا مثال:

```{python}
i = 0
while i < 3:
    j = 0
    while j < 3:
        if i == 1:
            break
        print(i, j)
        j += 1
    i += 1
print('Done')
```

<iframe width="800" height="500" frameborder="0" src="https://pythontutor.com/iframe-embed.html#code=i%20%3D%200%0Awhile%20i%20%3C%203%3A%0A%20%20%20%20j%20%3D%200%0A%20%20%20%20while%20j%20%3C%203%3A%0A%20%20%20%20%20%20%20%20if%20i%20%3D%3D%201%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20break%0A%20%20%20%20%20%20%20%20print%28i,%20j%29%0A%20%20%20%20%20%20%20%20j%20%2B%3D%201%0A%20%20%20%20i%20%2B%3D%201%0Aprint%28'Done'%29&codeDivHeight=400&codeDivWidth=350&cumulative=false&curInstr=0&heapPrimitives=nevernest&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false"> </iframe>


## التكرار بمتوالية

الشيء الذي يُساق في جملة التكرار المبتدأة بكلمة `for` هو **متوالية** ([`Iterable`](https://docs.python.org/3/glossary.html#term-iterable)). **وجملة التكرار بمتوالية** لها هذا الشكل:

```python
for item in iterable:
    ...
```

<!-- وتجد تفصلاً أكثر في [باب المولدات](zz_generators.qmd). -->

نعرض  هنا لنوعين من جنس المتواليات:

- **القائمة** ([`list`](https://docs.python.org/3/library/stdtypes.html#list))
- **النطاق** ([`range`](https://docs.python.org/3/library/stdtypes.html#range))

### القائمة

```{python}
my_list = [10, 20, 30]
for item in my_list:
    print(item)
```

ولا يلزم أن تتكون من أرقام فقط، بل يمكن أن تكون أي أنواع من الأشياء:

```{python}
my_list = ['Apple', 'Banana', 'Cherry']
for item in my_list:
    print(item)
```

### النطاق

يمثل **النطاق** ([`range`](https://docs.python.org/3/library/functions.html#func-range)) مولِّدًا لسلسلة أعداد في نطاق محدد ببداية ونهاية، وبين كل عدد والذي يليه مسافة محددة. فهي ثلاثة عوامل تحدده:

1. **البداية** (`start`): مشمول ، وقيمته الافتراضية `0`.
2. **النهاية** (`stop`): غير مشمول ، وتم تعريف النطاق بحيث لا يُمكن إهمال النهاية.
3. **الخطوة** (`step`): مقدار الزيادة أو النقص للعدد التالي ، وقيمته الافتراضية `1` (أي: الزيادة بواحد).

دعونا الآن نلقي نظرة على التعريف كما هو موجود في وثائق بايثون، وذلك لنتعلم كيف نقرؤ التعريف. [ادخل الرابط](https://docs.python.org/3/library/stdtypes.html#range) وتأمل معي ..

- `class range(stop)`
- `class range(start, stop[, step])`

أولاً: نلاحظ كلمة `class` في الابتداء وهذا يعني أنه صِنف وليس إجراءً.

ثانيًا: نلاحظ أن لدينا تعريفان؛ وهما مختلفان، فأيهما تعمل به بايثون؟

نجيب عن ذلك فنقول: التعريف الأوَّل يُعمل به إذا حددنا عاملاً واحدًا؛ فيكون العامل هو `stop` وتأخذ البداية والخطوة فيمتهما الافتراضية: `start=0` و `step=1` حسب ما كُتب:

> If the step argument is omitted, it defaults to 1.
>
> If the start argument is omitted, it defaults to 0

```{python}
for i in range(5):
    print(i)
```

أما التعريف الثاني فيجب تفكيكه لنفهمه:  `class range(start, stop[, step])`.

وجود الأقواس المربعة `[ ]` يعني أجزاءً اختياريَّة. فإذًا؛ الجزء الإلزامي هو `start, stop`؛ فإن عينَّا قيمتين، فتكون الأولى البداية، والثانية النهاية، وتبقى الخطوة على قيمتها الافتراضية `step=1`.

```{python}
for i in range(5, 10):
    print(i)
```

أما إذا عينت الثلاثة جميعًا فسيكون الأول `start` والثاني `stop` والثالث `step`:

```{python}
for i in range(0, 10, 2):
    print(i)
```

ولك أن تعكس النطاق بتعيين `step` بقيمة سالبة، لكن يجب حينها أن تجعل البداية أعلى من النهاية:

```{python}
for i in range(10, 0, -1):
    print(i)
```

## خلاصة

تعرفنا في الدرس على شيء هو من أقوى البُنى البرمجية وهو التكرار. تعلمنا كيف نستعمل جملة التكرار بنوعيها: التكرار بشرط والتكرا بمتوالية. وتعرفنا على النطاق المحدد واستعمالاته المختلفة. وأيضًا عرفنا كيف نوقف التكرار عند الحاجة لذلك بجملة `break` أو جلمة `continue`.

يأتي في الدرس القادم الكلام عن [الإجراء](05_function.qmd): وهي مجموعة جمل برمجيَّة لها اسم.