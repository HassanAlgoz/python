---
og:title: ceasar_cipher
---

# التشفير {.unnumbered}

[**التعمية**](https://ar.wikipedia.org/wiki/%D8%AA%D8%B9%D9%85%D9%8A%D8%A9_(%D8%AA%D8%AE%D8%B5%D8%B5)#:~:text=%D8%A7%D9%84%D8%AA%D8%B9%D9%85%D9%8A%D8%A9%20%D8%A3%D9%88%20%D8%A7%D9%84%D8%AA%D8%B4%D9%81%D9%8A%D8%B1%20%D8%A7%D9%84%D9%85%D9%8F%D9%84%D8%BA%D9%8E%D9%91%D8%B2%20%D8%A3%D9%88,%D8%A7%D9%84%D8%B9%D8%A7%D9%85%D8%A9%20%D9%85%D9%86%20%D9%82%D8%B1%D8%A7%D8%A1%D8%A9%20%D8%A7%D9%84%D8%B1%D8%B3%D8%A7%D8%A6%D9%84%20%D8%A7%D9%84%D8%AE%D8%A7%D8%B5%D8%A9.) أو **التشفير** المُلغَّز أو **الإلغاز** (بالإنجليزية: Cryptography) هو فرع من علم التعمية يهتم بممارسة بعض التقنيات لتأمين عملية التواصل بوجود أشخاص أخرين والذين يسمون أعداء (adversaries). بصوره عامة، تهتم التعمية بإنشاء الأنظمة التي تمنع الأعداء أو العامة من قراءة الرسائل الخاصة. أي بوسائل تحويل البيانات (مثل الكتابة) من شكلها الطبيعي المفهوم لأي شخص إلى شكل غير مفهوم بحيث يتعذّر على من لا يملك معرفة سرية محددة معرفة فحواها.

كان [غايوس يوليوس قيصر (44 ق.م)](https://en.wikipedia.org/wiki/Julius_Caesar) يواجه خطر تسرب المعلومات في رسائله العسكرية في حال وقعت رسائله في أيدي العدو، فابتكر وسيلة بسيطة لإخفاء مضمونها: كان يُبدل كل حرف في النص بحرف آخر يليه بعدد معين من الخانات هذه الطريقة أصبحت تُعرف اليوم بـ **شيفرة قيصر** ([Caesar Cipher](https://en.wikipedia.org/wiki/Caesar_cipher)).

فإذا كان مقدار الإزاحة 3 مثلاً يصير:

- حرف `a` يصير `d`
- حرف `b` يصير `e`
- حرف `c` يصير `f`

وأما الحروف الأخيرة فتدور، فيكون:

- حرف `x` يصير `a`
- حرف `y` يصير `b`
- حرف `z` يصير `c`

ومهمتنا تطبيقها بخوارزمية تأخذ نصًّا وتعميه.

![شيفرة سيزر بإزاحة مقدارها 3 خطوات](../../assets/ceasar_cipher.png)

أولاً نعرف الحروف الكبيرة والصغيرة:

```{python}
alphabet_lower = "abcdefghijklmnopqrstuvwxyz"
alphabet_upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
```

تذكر أن لدينا في بايثون الفعل: `str.index(sub: str) -> int` حيث يأخذ هذا الفعل جُزءًا نصيًّا ويأتي على النص من أوله إلى آخر باحثًا عن موضعه.
ونحن سنستعمل ذلك في البحث عن موضع الحرف فسيكون على النحو التالي:

```{python}
print(alphabet_lower.index('a'))
print(alphabet_lower.index('z'))
```

والأمر الآخر الذي سيفيدنا في تدوير الأرقام هو:

[**الحسابيات المقاسية**](https://ar.wikipedia.org/wiki/%D8%AD%D8%B3%D8%A7%D8%A8_%D9%85%D9%82%D8%A7%D8%B3%D9%8A) (Modular Arithmetic) تتحرك فيه الأرقام بالجمع والضرب ونحوه بحيث تلتف الأرقام حول بعضها البعض عند الوصول إلى قيمة معينة، تسمى **القياس** (Modulus).

![نستعمل في ساعة الحائط القياس 12 في حساب الوقت](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Clock_group.svg/500px-Clock_group.svg.png)

وهذه العملية في بايثون هي `%` وتعبر عن باقي القسمة:

```{python}
(9 + 4) % 12
```


والآن نعرف الدالة التي ستأخذ حرفًا (`char`) ومقدار الإزاحة (`shift`) لتعيد الحرف البديل عنه بعد الإزاحة.

```{python}
def encode(char: str, shift: int) -> str:
    if char in alphabet_lower:
        alphabet = alphabet_lower
    elif char in alphabet_upper:
        alphabet = alphabet_upper
    else:
        return char
    
    code = alphabet.index(char)
    new_code = (code + shift) % len(alphabet)
    new_char = alphabet[new_code]
    return new_char
```

- أولاً نبحث عن الحرف في سلسلة الأحرف الصغيرة، ثم الكبيرة، ثم إن لم يوجد في أي منها فإننا نعيد الحرف كما هو، ولا نزيحه
- فإن وجدنا الحرف في إحدى السلسلتين (الكبيرة أو الصغيرة) فإننا نعين المتغير `alphabet` لهذه السلسلة التي سيتم البحث فيها بعد ذلك
- نبحث في هذه السلسلة بالفعل `.index()` لنعرف موضِع الحرف، حيث سيكون هذا هو رمزه الرقمي (`code`).
- نزيح الرقم بالمقدار المعطى (`shift`) ونُدير الناتج بعملية **باقي القسمة** وهي التعبير: (`% len(alphabet)`)
- نعين المتغير `new_char` للحرف الذي في موضع الرقم بعد الإزاحة
- نعيد الحرف البديل

نختبر الدالة ببعض التوكيادت:

```{python}
assert encode('a', 3) == 'd'
assert encode('b', 3) == 'e'

assert encode('x', 3) == 'a'
assert encode('y', 3) == 'b'
```

أما دالة عكس التعمية، فهي ببساطة تعكس الإزاحة بطرح الرقم بعد جمعه.

```{python}
def decode(char: str, shift: int) -> str:
    if char in alphabet_lower:
        alphabet = alphabet_lower
    elif char in alphabet_upper:
        alphabet = alphabet_upper
    else:
        return char
    
    code = alphabet.index(char)
    new_code = (code - shift) % len(alphabet)
    new_char = alphabet[new_code]
    return new_char
```

فأما دالة استخراج المعمى، فنريدها أن تكون فعلاً تعكِس، ولذلك سنستعمل التوكيد بتمرير المعمة لعكسه مباشرة بهذه الطريقة:

```{python}
assert decode(encode('a', 3), 3) == 'a'
assert decode(encode('z', 3), 3) == 'z'
```

والآن بعد أن تأكدنا من عمل ذلك على مستوى الحرف الواحد، نريد أن نأخذ النص كاملاً فنعميه:

```{python}
def encode_text(text: str, shift: int) -> str:
    result = ""
    for char in text:
        result += encode(char, shift)
    return result
```

- نبدأ بنص فارغ: `result = ""`
- نأتي على الحروف حرفًا حرفًا كما في النص `text` ونستعمل فعل التعمية `encode` لذلك النص، ونضيف الحرف العائد إلى النص الناتج `result`

أما عكس التعمية فباستعمال `decode` بدلاً من `encode` بمثل ما تقدَّم:

```{python}
def decode_text(text: str, shift: int) -> str:
    result = ""
    for char in text:
        result += decode(char, shift)
    return result
```

والآن نريد أن نختبر، ولذلك سنستعين بموقع تفاعلي قد تم فيه عمل ذلك قبلنا، وهو موقع: [cryptii.com](https://cryptii.com/pipes/caesar-cipher) فنأخذ النص ونستعمله ونتأكد أن ما نخرج به نفس ما خرجوا به:

```{python}
assert (
    encode_text("If he had anything confidential to say, he wrote it in cipher, that is, by so changing the order of the letters of the alphabet, that not a word could be made out", 3) ==
    "Li kh kdg dqbwklqj frqilghqwldo wr vdb, kh zurwh lw lq flskhu, wkdw lv, eb vr fkdqjlqj wkh rughu ri wkh ohwwhuv ri wkh doskdehw, wkdw qrw d zrug frxog eh pdgh rxw"
)
```

أخيرًا نستعمل ذلك بعد أن تأكدنا من صحته كاملاً:

```{python}
text = "If he had anything confidential to say, he wrote it in cipher, that is, by so changing the order of the letters of the alphabet, that not a word could be made out."

print("## Text")
print(text)

text_encoded = encode_text(text, 3)
text_decoded = decode_text(text_encoded, 3)

print("## Encoded")
print(text_encoded)

print("## Decoded")
print(text_decoded)
```

#### رسالة في استخراج المعمى

عهد الخليفة المأمون إلى الكندي، وهو [**أبو يُوسُفَ يَعْقُوبُ بنُ إِسْحاقَ الكِنْدِيُّ** (185- 256 هـ / 801- 873 م)](https://ar.wikipedia.org/wiki/%D8%A7%D9%84%D9%83%D9%86%D8%AF%D9%8A) بإدارة بيت الحكمة، وكان ذلك بعد إتمام دراسته، حيث بدأ العمل في ترجمة المخطوطات اليونانية لأرسطو وغيره من الفلاسفة إلى اللغة العربية. واجه الكندي أول مرة خلال عمله الحاجة إلى استخراج النصوص المعماة، حيث كانت بعض المخطوطات التي كان عليه ترجمتها معماة.

قدم الكندي جدولاً بالتكرارات المطلقة لحروف الأبجدية العربية، والتي حسبها في عينة من سبع أوراق من النص.

| الحرف | تكراره | الحرف | تكراره | الحرف | تكراره | الحرف | تكراره |
|-------|--------|-------|--------|-------|--------|-------|--------|
| ا     | 600    | ر     | 155    | س     | 91     | ش     | —      |
| ل     | 437    | ع     | 131    | ق     | 63     | ض     | —      |
| م     | 320    | ف     | 122    | ح     | 57     | خ     | —      |
| ه     | 273    | ت     | 120    | ج     | 46     | ث     | 17     |
| و     | 262    | ب     | 112    | ذ     | 35     | ط     | 15     |
| ي     | 252    | ك     | 112    | ص     | 32     | غ     | 15     |
| ن     | 221    | د     | 92     | خ     | 20     | ظ     | 8      |

ملاحظة: لم يشر المؤلف إلى تكرارات حروف الشين والضاد والخاء، مع الإشارة إلى مكانها في الجدول، مرتبة حسب الترتيب التنازلي للتكرارات.

[يصف المؤلف طريقة استخراج المعمى التكراري](https://ar.wikipedia.org/wiki/%D8%B1%D8%B3%D8%A7%D9%84%D8%A9_%D9%81%D9%8A_%D8%A7%D8%B3%D8%AA%D8%AE%D8%B1%D8%A7%D8%AC_%D8%A7%D9%84%D9%85%D8%B9%D9%85%D9%89#%D8%AE%D9%88%D8%A7%D8%B1%D8%B2%D9%85%D9%8A%D8%A7%D8%AA_%D8%A7%D8%B3%D8%AA%D8%AE%D8%B1%D8%A7%D8%AC_%D8%A7%D9%84%D9%85%D8%B9%D9%85%D9%89) على النحو التالي:

> فمما نحتال به لاستنباط الكتاب المعمى إذا عرف بأي لسان هو، أن يوجد من ذلك اللسان كتاب قدر ما يقع في جلد أو ما أشبهه، فنعد ما فيه من كل نوع من أنواع حروفه، فنكتب على أكثرها عددًا الأول، والذي يليه في الكثرة الثاني، والذي يلى ذلك في الكثرة الثالث، وكذلك حتى نأتي على جميع أنواع الحروف، ثم ننظر في الكتاب الذي نريد استخراجه فنصنف أيضًا أنواع صوره، فتنظر إلى أكثرها عددًا، فنسمه بسمة الحرف الأول، والذي يليه في الكثرة فنسمه بسمة الحرف الثاني، والذي يليه في الكثرة فنسمه بسمة الحرف الثالث، ثم كذلك حتى تنفد أنواع صور حروف الكتاب المعماة التي قصد لاستنباطه
