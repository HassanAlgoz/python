---
og:title: dict
---

# القاموس

![المقابلة](../../assets/mapping.png){width="100%"}

<div class="ltr">

```{mermaid}
%% | label: fig-dict
%% | fig-cap: شجرة أنواع القاموس
flowchart TD
    Collection[<b>الجمع</b> <br> <code>Collection</code>]
    Collection --> Mapping[<b>المقابلة</b> <br> <code>Mapping</code>]
    Mapping --> MutableMapping[<b>المقابلة المتغيرة</b> <br> <code>MutableMapping</code>]
    MutableMapping --> dict[<b>القاموس</b> <br> <code>dict</code>]
```

</div>

وراجع خريطة المجموعات: @fig-collections-tree

**القاموس** ([`dict`](https://docs.python.org/3/library/stdtypes.html#dict)) جمع متغير مرتب من المفاتيح المرقَّمة الفريدة، تقابل كل منها قيمةً.

- **متغير**: يعني قبول الإضافة والحذف والتعديل
- **مرتب**: يعني أن لكل مفتاحٍ موضِعًا بالنسبة لبدايته.
- **المفتاح والقيمة**: هي عناصر المقابلة؛ حيث يدلّ المفتاح على القيمة.
- **مرقَّمة**: فيكون لكل مفتاح رقم هو ناتج عن عملية **التجزئة** ([Hash](https://docs.python.org/3/glossary.html#term-hashable)) وهو الذي يدلّ على القيمة في واقع الأمر (وليس المفتاح ذاته).
- **فريدة**: يعني أن المفتاح لا يتكرر.

ينشأ القاموس بالإجراء المنشئ [`dict()`](https://docs.python.org/3/library/stdtypes.html#dict) أو  بالقوسين المتعرجين `{}` وذلك على النحو التالي:

```{python}
d = {
    'key1': 'value1',
    'key2': 'value2',
}
d1 = dict(key1='value1', key2='value2')
d2 = dict([('key1', 'value1'), ('key2', 'value2')])
assert d == d1 == d2
```

ولاحظ أن القاموس عبارة عن مجموعة اقترانات أو مقابلات:

- فيسمى المتغير `key1` **المفتاح** (ويشترط أن يكون قابلًا للتجزئة - `hash`)
- ويسمى ما يقترن به (مثل `value1`) **بالقيمة**

يستعمل القاموس في كثير من السياقات في البرمجة، وهو من أهم هياكل البيانات.

## استعمالات القاموس

### الكلمة ومعناها

القاموس بالمعنى الذي يشير إليه اللفظ. نفترض أن لدينا قاموسًا يحتوي على ترجمة بعض الكلمات من الإنجليزية إلى العربية:

```{python}
english_to_arabic = {
    'apple': 'تفاحة',
    'banana': 'موزة',
    'orange': 'برتقالة',
}
```

### ربط الأسماء بالأرقام

مثلاً: دليل أرقام الهواتف هو قاموس:

```{python}
name_to_phone = {
    'Adam': '966xxxxxxxxx',
    'Mohammed': '966xxxxxxxxx',
}
```

### دليل أسماء النطاقات

وكذلك دليل أسماء النطاقات (DNS: Domain Name System) على شبكة الانرتنت هو قاموس:

```{python}
domain_to_ip = {
    'google.com': '172.217.14.206',
    'wikipedia.org': '103.86.96.10',
}
```

### اختصار الروابط الطويلة

من استعمالات القاموس: اختصار الروابط الطويلة في روابط قصيرة.

```{python}
short_to_full = {
    'google': 'https://www.google.com',
    'python': 'https://www.python.org',
    'wiki': 'https://www.wikipedia.org',
}
```

### الكلمات المختصرة

أو الاختصارات إلى الكلمة التامة:

```{python}
abb_to_full = {
    'ASAP': 'As Soon As Possible',
    'BRB': 'Be Right Back',
    'DIY': 'Do It Yourself',
    'EDA': 'Exploratory Data Analysis',
    'FYI': 'For Your Information',
    'SAR': 'Saudi Riyal',
}
```

## القاموس (`dict`)

ومن حيث كون القاموس من نوع **الجمع** (`Collection`)، فإنه يقبل الإجراءات ثلاثة:

- العضوية: `x not in d`
- العد: `len(d)`
- التكرار: `for x in d`

ويقبل القاموس لكونه **مقابلة** ([`Mapping`](https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes)) الإجراءات التالية:

- الإشارة مفتاح: `dict[key]`
- الإشارة بمفتاح مع الرجوع بقيمة ابتدائية إن لم يُعثَر عليه: `dict.get(key[, default])`

ولكونه **مقابلة متغيرة** ([`MutableMapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping))، فإنه يقبل الإجراءات التالية:

- التعديل بمفتاح: `dict[key] = value`
- الحذف بمفتاح: `del dict[key]`
- نزع بمفتاح وإرجاع القيمة: `x = dict.pop(key)`
- التحديث: `dict.update(mapping)`

راجع خريطة الجموع: @fig-collections-tree.

وهذه كذلك، كلها قابلة للتجزئة، ولا يشترط أن تكون متجانسة (من نفس النوع)، كما يلي:

```{python}
data = {
    # مقابلة نص بعدد
    'key1': 100,

    # مقابلة عدد بنص
    20: 'value2',

    # مقابلة نص بقائمة
    'c': [10, 20, 30, True],

    # مقابلة صف من أعداد بنص
    (1, 2): 'value3',

    # مقابلة صف من نصوص بنص
    ('a', 'b', 'c'): 'value4',
}

assert len(data) == 5
del data['key1']
assert 'key1' not in data
```

ونحصل عليها بالإشارة بأحد المفاتيح:

```{python}
print(data[20])
print(data['c'])
print(data[(1, 2)])
print(data[('a', 'b', 'c')])
```

## التضمين

يجوز جعل القيمة نفسها قاموسًا. ومثال ذلك قيمة (`notifications`) المضمنة في قاموس اختيارات المستخدم هكذا:

```{python}
user = {
    'name': 'Adam',
    'language': 'Arabic',
    'phone': '966xxxxxxxxx',
    'last_updated': '2021-09-01',
    'age': 25,
    'notifications': {
        'email': 'monthly',
        'sms': 'weekly',
        'push': 'daily'
    },
    'emails': ['example1@domain.com', 'example2@domain.com']
}
```

وللوصول إلى قيمة مضمَّنة، قد تكتب:

```{python}
a = user['notifications']
print(a)
```

```{python}
b = a['sms']
print(b)
```

وذلك أن نوع قيمة المتغير `a` هو قاموس:

```{python}
type(a)
```

أو تأتي بها مرة واحدة:

```{python}
a = user['notifications']['sms']
print(a)
```

وكذا الأمر في الوصول للقائمة المضمَّنة (`emails`) كما يلي:

```{python}
c = user['emails']
print(c)
```

ثم الوصول إلى عنصرٍ من هذه القائمة:

```{python}
print(c[0])
```

وذلك أن نوع قيمة المتغير `c` هو قائمة:

```{python}
type(c)
```

أو الوصول إليها مرة واحدة:

```{python}
d = user['emails'][0]
print(d)
```

ويكثُر استعمال القواميس المضمنة كعناصر للتسلسل، ولذلك وجب علينا التدرب على قراءتها.

فمثلاً هذه قائمة يحتوي كل عنصرٍ منها على قاموس لبيانات مُرَشَّح، ونريد أن نستخلص خبراتهم منها:
```{python}
data = [
    {
        'name': 'Ahmad Hamada',
        'experiences': [
            {
                'company': 'Geo Space',
                'start': '2038-01-01',
                'end': '2039-01-01',
                'role': 'Junior Software Engineer',
            },
            {
                'company': 'Space Roots',
                'start': '2039-01-01',
                'end': '2041-01-01',
                'role': 'Senior Software Engineer',
            },
        ],
    },
    {
        'name': 'Belal Banana',
        'experiences': [
            {
                'company': 'Banana Tech',
                'start': '2041-01-01',
                'end': '2042-01-01',
                'role': 'Smoothie Operator',
            },
            {
                'company': 'BugSquash Labs',
                'start': '2042-02-01',
                'end': '2043-08-01',
                'role': 'Code Pest Control Specialist',
            },
            {
                'company': 'Caffeinated Circuits Inc.',
                'start': '2043-09-01',
                'end': '2045-05-01',
                'role': 'Espresso-Driven Engineer',
            }
        ]
    },
]

```

ولنفترض أننا نريد آخر وظيفة شغلها المرشح الثاني، فإننا نكتبها في بايثون بهذا الشكل:

```{python}
data[1]['experiences'][-1]['role']
```

وبايثون تقيمها من اليسار إلى اليمين، على النحو التالي:

- الوصول إلى `data` (هو قائمة)
- العنصر الثاني (`1`) من ذلك (هو قاموس)
- مقابل المفتاح `experiences` من ذلك (هو قائمة)
- العنصر الأخير من ذلك (هو قاموس)
- مقابل المفتاح `role` من ذلك (هو نص)

وتقول: من المرشحين الثاني، خبراتهُ الأخيرُ منها، وظيفتُه أريدُ.

فإذا أردت أن تقرأها بالعكس من اليمين إلى اليسار، فتقول:

- مقابل المفتاح `role`
- في العنصر الأخير من
- مقابل المفتاح `experiences`
- في العنصر الثاني (`1`) من
- المتغير `data`

وتقول أيضًا: أريد الوظيفة لآخر الخبرات للثاني من المرشحين.

## التكرار

ويحصل التكرار بثلاثة طرق:

- **كر المفاتيح**: `for key in d.keys()`
- **كر القيم**: `for value in d.values()`
- **كر العناصر**: `for key, value in d.items()` (ينتج عنها أزواج (`2-tuple`) من الفاتيح والقيم)

مثال:

```{python}
d = {
    'A': 'Salam',
    'B': 'Hello',
    'C': 'Hi',
}
for value in d.values():
    print(value)
```

## عكس القاموس

إذا أردت عكس القاموس بحيث يصير المفتاح مكان القيمة والقيمة مكان المفتاح، فبهذه الطريقة:

```{python}
d = {
    'ASAP': 'As soon as possible',
    'TBD': 'To be determined',
    'IDK': 'I don\'t know',
}
inverse = dict()
for k, v in d.items():
    inverse[v] = k
inverse
```

أو بالجملة المختصرة:

```{python}
inverse = {v: k for k, v in d.items()}
inverse
```

## إنشاء قاموس من سلسلتين

ويتحصل القاموس من سلسلتين باستعمال الإجراء [`zip()`](https://docs.python.org/3/library/functions.html#zip)، كما يلي:

```{python}
students = ['Ahmad', 'Belal', 'Camal', 'Dawood']
marks    = [     90,      80,      75,       85]
data = dict(zip(students, marks))
data
```
