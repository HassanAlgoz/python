---
og:title: set
---

# المجموعة


<div class="ltr">

```{mermaid}
%% | label: fig-set
%% | fig-cap: شجرة أنواع المجموعة
flowchart TD
    Collection[<b>الجمع</b> <br> <code>Collection</code>]
    Collection --> Set[المجموعة <br> <code>Set</code>]
    Set --> MutableSet[المجموعة المتغيرة <br> <code>MutableSet</code>]
    MutableSet --> set[<b>المجموعة</b> <br> <code>set</code>]
    Set --> frozenset[المجموعة الجامدة <br> <code>frozenset</code>]
```

</div>

وراجع خريطة المجموعات: @fig-collections-tree

**المجموعة** ([`set`](https://docs.python.org/3/reference/datamodel.html#set-types)) هي جمع متغير من عناصر مرقَّمة فريدة بلا ترتيب.

- **متغير**: يعني أنها تقبل الإضافة والحذف والتعديل
- **مرقَّمة**: فيكون لكل عنصر رقم هو ناتج عن عملية **التجزئة** ([Hash](https://docs.python.org/3/glossary.html#term-hashable))
- **فريدة**: يعني أن العنصر لا يتكرر فيها
- **بلا ترتيب**: فليس للعنصر موضِع (0, 1, 2 ...) كما هو الحال في الجمع المرتَّب

أو بالقوسين المتعرجين `{}` أو بالإجراء المُنشئ [`set()`](https://docs.python.org/3/library/stdtypes.html#set) على النحو التالي:

```{python}
s = {10, 20, 30}
s1 = set((10, 20, 30))
s2 = set([10, 20, 30])
s3 = set(range(10, 30+1, 10))
assert s == s1 == s2 == s3
```

تقبل المجموعة -لكونها من نوع **الجمع** ([Collection](https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes))- العمليات التالية:

- العد: `len(s)`
- التكرار: `for x in s`
- العضوية: `x not in s`

وباعتبارها مجموعة متغيرة ([MutableSet](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSet))، فإنها تقبل الإجراءات التالية:

- الإضافة: `add`
- الحذف: `discard`
- نزع عنصر عشوائي: `pop`
- المحو: `clear`

ولا يشترط **تجانس العناصر**؛ بل يجوز أن تكون أنواعها مختلفة:

```{python}
s = {10, 20, 'hello', True, (300, 400)}
```

ونرى عمليات المجموعة عليها: العد، والعضوية والتكرار:

```{python}
assert len(s) == 5
assert 'hello' in s
assert 300 not in s
assert (300, 400) in s

for x in s:
    print(x)
```

وكون المجموعة غير مرتبة، فإنها لا تسجل موقع العنصر أو ترتيب إدراجه. وبالتالي، فإنها لا تقبل الإشارة (`xs[i]`) أو التقطيع (`xs[i:j]`) أو أي سلوك يشبه المتسلسلات. لاحظ الخطأ التالي:

```{python}
#| error: true
xs = {10, 20, 30}
xs[0]
```

## التحقق السريع

عرفنا أن المجموعة تقبل إجراء العضوية `x in s`، ولكن ثمة خصوصية لهذا الإجراء في المجموعة.
وهذه الخصوصية تكمن في سرعة هذا الإجراء في المجموعة مقارنة بسرعة عمله في المجموعة المرتبة.

فهذه المقارنة تكون بالمجموعة `{}`:

```{python}
black_set = {"192.168.1.1", "10.0.0.5", "172.16.0.2"}
ip = "10.0.0.5"
if ip in black_set:
    print("Access Denied")
```

وتكون كذلك في القائمة `[]`:

```{python}
black_list = ["192.168.1.1", "10.0.0.5", "172.16.0.2"]
ip = "10.0.0.5"
if ip in black_list:
    print("Access Denied")
```

لكن الفرق هو تفاصيل هذه العملية، إذ تختلف الكيفية خلف الكواليس. ولن يكون الفرق في السرعة واضحًا إلا حين تكون المجموعة كبيرة جدًّا.

- وذلك أننا في القائمة نحتاج أن نمر على العناصر واحدًا تلو الآخر، حتى نجد العنصر أو لا نجده
- أما في المجموعة، فإن القيمة يتم تجزئتها (`hash`) حتى يُعرف رقم العنصر في المجموعة مباشرة من غير المرور على عناصرها. فعملية التجزئة هذه تعطينا العنوان بشكل رياضي.

وهذا يدخل في دراسة الخوارزميات وهيكلة البيانات. فإن أردت مزيد تفصيل فراجع هذه المادة: [W3Schools DSA Hash Sets](https://www.w3schools.com/dsa/dsa_data_hashsets.php).

## منطق المجموعة الرياضية

مما تتميز به المجموعة عن بقية أنواع الجمع: قبولها المنطق الرياضي على النحو التالي:

- **التقاطع والاتحاد والفرق، والفرق التماثلي**
- وكذلك **تحقق**: (**الجزئية والشمول والانفاصل**).

وهذه القطعة مثال لجميع هذه العمليات الرياضية:

```{python}
set1 = {1, 2, 3, 4, 5}
set2 =          {4, 5, 6, 7, 8}
```

## العمليات على المجموعات

### الاتحاد

![اتحاد مجموعتين](https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/Venn0111.svg/180px-Venn0111.svg.png)

```{python}
set.union(set1, set2)
```

### التقاطع

![تقاطع مجموعتين](https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Venn0001.svg/180px-Venn0001.svg.png)

```{python}
set.intersection(set1, set2)
```

### الفرق

![الفرق](https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Venn0010.svg/180px-Venn0010.svg.png)

```{python}
set.difference(set1, set2)
```

```{python}
set.difference(set2, set1)
```

### الفرق التماثلي

![الفرق التماثلي](https://upload.wikimedia.org/wikipedia/commons/thumb/4/46/Venn0110.svg/180px-Venn0110.svg.png)

```{python}
set.symmetric_difference(set1, set2)
```

ملاحظة: لكل من الإجراءات السابقة علامة تمثله كما هو موضَّح في الجدول. إلا أن استعمال اسم الإجراء يقبل أي نوع من المتكررات (Iterables) ولا تقتصر على نوع المجموعة فقط (`set`):

| العملية                        | العلامة        | الإجراء المكافئ                  |
|--------------------------------|----------------|----------------------------------|
| الاتحاد                        | `set1 | set2`  | `set1.union(set2)`               |
| التقاطع                       | `set1 & set2`  | `set1.intersection(set2)`        |
| الفرق                          | `set1 - set2`  | `set1.difference(set2)`          |
| الفرق التماثلي                | `set1 ^ set2`  | `set1.symmetric_difference(set2)`|

## العلاقات بين المجموعات

### الجزئية والشمول

وكذلك لدينا إجراءات تحقق الجزئية والشمول والانفصال:

| العملية                        | العلامة        | الإجراء المكافئ                  |
|--------------------------------|----------------|----------------------------------|
| تحقق الجزئية (جزء من)                   | `set1 <= set2` | `set1.issubset(set2)`            |
| تحقق الشمول (يشمل)                    | `set1 >= set2` | `set1.issuperset(set2)`          |
| تحقق الانفصال (عدم التقاطع)                  | `len(set1 & set2) == 0` | `set1.isdisjoint(set2)`          |

![الجزئية والشمول](https://upload.wikimedia.org/wikipedia/commons/thumb/b/b0/Venn_A_subset_B.svg/150px-Venn_A_subset_B.svg.png)

```{python}
A = {1, 2, 3}
B = {1, 2, 3, 4, 5, 6}
```

وهذا مثال لاستعمالها كما في الجدول:

```{python}
assert A.issubset(B)
assert B.issuperset(A)
```

### الانفصال

وأما الانفصال، فهو عدم وجود أدنى تقاطع بين المجموعتين:

```{python}
C = {'Apple', 'Banana'}
assert C.isdisjoint(A)
assert C.isdisjoint(B)
```
