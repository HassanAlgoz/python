# الجمع المرقوم

بعد أن رأينا التلسلسل الذي هو نوع مجموعة مرتبة. ننتقل في درسنا هذا للبحث في نوعين آخرين يندرجان تحت الجمع **المرقوم** (وسيأتي بيان معنى الرقم):

**المجموعة**: `set` ويعبر عنها بالقوسين المتعرجين `{ }`.

مثل الألوان: `{الأحمر ,الأصفر ,الأخضر}` إذ ليس بينها ترتيب معين

وباعتبار ما يُمكن شراؤه: `{اللبن، الخبز، البيض}`. أما باعتبار ما لديك في السلَّة فقد تكون قائمة مثل `[لبن, خبز, خبز, خبز, بيض]` لأنك وضعت بعضها قبل بعض، ولأن فيها تكرارًا؛ فصار لدينا ترتيب (لاحظ أننا استعملنا القوسين المربعين هنا للدلالة على القائمة المرتبة)، والمجموعة لا ترتيب لها.

**القاموس**: `dict` وهي بالقوسين المتعرجين لكن عناصرها روابط `{ key: value }`.

ومثالها أسعارُ سلة المشتريات على النحو التالي: `{اللبن: 8, الخبز: 6, البيض: 15}`.

## المجموعة

**المجموعة** ([`set`](https://docs.python.org/3/reference/datamodel.html#set-types)) هي جمع متغير يحوي أشياء مرقومة فريدة بلا ترتيب.

- **متغيرة**: يعني أنها تقبل الإضافة والحذف والتعديل على عناصرها
- **فريدة**: يعني أن العنصر لا يتكرر فيها
- **مرقومة**: يعني أن عناصرها يجب أن تكون قابلة للرقم (`hash`)
- **بلا ترتيب**: يعني أن العنصر ليس له موقع محدد فيها فليس له ما قبله وليس له ما بعده

انظر [MutableSet](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSet) في خريطة المجموعات: @fig-collections-tree.

تنشأ المجموعة الفريدة بالفعل المنشئ [`set()`](https://docs.python.org/3/library/stdtypes.html#set). أو بالقوسين المتعرجين `{ }`:

```{python}
s1 = set([10, 20, 30])
s2 = {10, 20, 30}
assert s1 == s2
```

تقبل المجموعة لكونها **جمعًا** ([Collection](https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes)) العمليات التالية:

- العد: `len(s)`
- التكرار: `for x in s`
- العضوية: `x not in s`

وباعتبارها مجموعة متغيرة ([MutableSet](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSet))، فإنها تقبل الأفعال التالية:

- الإضافة: `add`
- الحذف: `discard`
- نزع عنصر عشوائي: `pop`
- المحو: `clear`

ذكرنا أن شرط عضوية العنصر في **المجموعة** (`set`) وفي **القاموس** (`dict`) أن يكون مرقومًا؛ أي: قابلًا للرقم، أي: أن يُرمَزَ إليه برَقَم. ومعلومٌ أن الحروف أصلها أرقام: فكلمة `cat` مكونة من ثلاثة أرقام هي: 99, 97, 116.

ونبسِّط عمليَّة الرَّقم بمثال فنقول: إن إحدى طرق رَقْمِ الكلمة أن تجمع أرقام حروفها وتقسم على عدد ثابت ثم تأخذ باقي القسمة. فتقول: `(99+97+116) % 100 = 12`. (ملاحظة: علامة `%` هي لباقي القسمة) ويكون هذا الرقم (`12`) هو رمز الكلمة `cat`، ثم يستخدم هذا الرقم في الدلالة على موضع تخزين العنصر في الذاكرة. ولن نخوض في تفاصيل ذلك لأنها دون التطبيق.

**المرقوم** ([`Hashable`](https://docs.python.org/3/glossary.html#term-hashable)): هو ما يقبل الفعل `hash()` الذي يحول الشيء إلى رقم يرمز إليه. ومنه:

- الرقم (`int`) رقْمه هو نفسه
- النص (`str`) له خوارزمية معيَّنة لرقْمه ([انظر هنا للاستزادة](https://cp-algorithms.com/string/string-hashing.html))
- الصف (`tuple`) رقْمه هو رقم عناصره (فيجب أن تكون جميع عناصره مرقومة)

وهو بخلاف الجمع المرتَّب -كالقائمة التي سبقت دراستها-، حيث ترقيم عناصرها يكون بالموضع نسبة إلى موضع الأوَّل: `0` ثم `1` ثم `2` ...إلخ. ولكون القائمة **متغيرة** (تقبل زيادة أو حذف أو تعديل عنصر) فإن رقمها غير ثابت، والشرط في المرقوم ألا يتغير رقمه أبدًا؛ لذا تجد الصف معدودًا ضمن المرقومات؛ لأنه **الجامد** لا يتغير بعد إنشائه.

نرى في المثال إمكان اختيار عناصر مرقومة للمجموعة بأنواع مختلفة:

```{python}
s = {10, 'AAA', True, (22, 'BB')}
```

ونرى عمليات المجموعة عليها: العد، والعضوية والتكرار:

```{python}
assert len(s) == 4
assert 10 in s
assert 22 not in s
assert (22, 'BB') in s

for x in s:
    print(x)
```

باعتبارها مجموعة غير مرتبة، فإنها لا تسجل موقع العنصر أو ترتيب إدراجه. وبالتالي، فإنها لا تقبل الإشارة (`xs[i]`) أو التقطيع (`xs[i:j]`) أو أي سلوك يشبه المتسلسلات. لاحظ الخطأ التالي:

```{python}
#| error: true
xs = {10, 20, 30}
xs[0]
```

### منطق المجموعة الرياضية

وتقبل المجموعة الفريدة ما تقبله المجموعة في الرياضيات من عمليات:

- **التقاطع والاتحاد والفرق، والفرق التماثلي**
- وكذلك **تحقق**: (**الجزئية والشمول والانفاصل**).

وهذه القطعة مثال لجميع هذه العمليات الرياضية:

```{python}
set1 = {1, 2, 3, 4, 5}
set2 =          {4, 5, 6, 7, 8}
```

![اتحاد مجموعتين](https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/Venn0111.svg/180px-Venn0111.svg.png)

```{python}
set1 | set2
```

![تقاطع مجموعتين](https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Venn0001.svg/180px-Venn0001.svg.png)

```{python}
set1 & set2
```

![الفرق](https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Venn0010.svg/180px-Venn0010.svg.png)

```{python}
set1 - set2
```

```{python}
set2 - set1
```

![الفرق التماثلي](https://upload.wikimedia.org/wikipedia/commons/thumb/4/46/Venn0110.svg/180px-Venn0110.svg.png)

```{python}
set1 ^ set2
```

نصيحة: من الأفضل استعمال اسم الفعل بدلاً من العلامة التي تقابله حيث أنها تقبل أي نوع من المتكررات (Iterables) ولا تقتصر على نوع المجموعة فقط (`set`). أي، استعمل ما يقابلها كما هو موضَّح في الجدول:

| العملية                        | العلامة        | الفعل المكافئ                  |
|--------------------------------|----------------|----------------------------------|
| الاتحاد                        | `set1 | set2`  | `set1.union(set2)`               |
| التقاطع                       | `set1 & set2`  | `set1.intersection(set2)`        |
| الفرق                          | `set1 - set2`  | `set1.difference(set2)`          |
| الفرق التماثلي                | `set1 ^ set2`  | `set1.symmetric_difference(set2)`|

وكذلك لدينا أفعال تحقق الجزئية والشمول والانفصال:

| العملية                        | العلامة        | الفعل المكافئ                  |
|--------------------------------|----------------|----------------------------------|
| تحقق الجزئية                   | `set1 <= set2` | `set1.issubset(set2)`            |
| تحقق الشمول                    | `set1 >= set2` | `set1.issuperset(set2)`          |
| تحقق الانفصال                  | `len(set1 & set2) == 0` | `set1.isdisjoint(set2)`          |


![الجزئية والشمول](https://upload.wikimedia.org/wikipedia/commons/thumb/b/b0/Venn_A_subset_B.svg/150px-Venn_A_subset_B.svg.png)

```{python}
A = {1, 2, 3}
B = {1, 2, 3, 4, 5, 6}
```

وهذا مثال لاستعمالها كما في الجدول:

```{python}
assert A.issubset(B)
assert B.issuperset(A)
```

وأما الانفصال، فهو عدم وجود أدنى تقاطع بين المجموعتين:

```{python}
C = {'Apple', 'Banana'}
assert C.isdisjoint(A)
assert C.isdisjoint(B)
```

## القاموس

**القاموس** ([`dict`](https://docs.python.org/3/library/stdtypes.html#dict)) جمع مرتب من المرقومات الفريدة المشيرة إلى قيمة.

انظر [MutableMapping](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping) في خريطة الجُمُوع: @fig-collections-tree.

تنشأ المجموعة الرابطة بالفعل المنشئ [`dict()`](https://docs.python.org/3/library/stdtypes.html#dict) أو  بالقوسين المتعرجين `{ }`:

```{python}
d1 = dict(key1='value1', key2='value2')
d2 = {'key1': 'value1', 'key2': 'value2'}
assert d1 == d2
```

اصطلاحات: نسمي `key1` المرقوم ونسمي `value1` القيمة؛ وهما معًا نسميهما **رابطًا**.

واخترت في ترجمة المصطلح الصفة الأصلية بدلا من ترجمتة كلمة `key` إلى مفتاح. والصفة الأساسية هي: الرَّقم؛ فسميته مرقومًا.

ومن حيث كون القاموس **جمعًا** (`Collection`)، فإنه يقبل الأفعال ثلاثة:

- العضوية: `x not in d`
- العد: `len(d)`
- التكرار: `for x in d`

ويقبل القاموس لكونه **دالة** ([`Mapping`](https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes)) الأفعال التالية:

- الإشارة بمرقوم: `dict[key]`
- الإشارة بمرقوم أو إرجاع قيمة ابتدائية: `dict.get(key[, default])`

ويجوز التكرار بثلاثة طرق:

- كر الروابط: `for key, value in d.items()`
- كر المرقومات: `for key in d.keys()`
- كر القيم: `for value in d.values()`

ولكونه **دالة متغيرة** ([`MutableMapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping))، فإنه يقبل الأفعال التالية:

- التعديل بمرقوم: `dict[key] = value`
- الحذف بمرقوم: `del dict[key]`
- نزع بمرقوم وإرجاع القيمة: `x = dict.pop(key)`
- التحديث بدالَّة أو بمكرر روابط: `dict.update(mapping)`

ملاحظة: منذ بايثون 3.7 أصبح القاموس مرتبًا. أي أن الروابط لها ما قبلها ولها ما بعدها بحسب ترتيب إدراجها.

لاحظ أننا نستعمل مرقومات مختلفة وأيضًا نستعمل قيم مختلفة:

```{python}
data = {
    'key1': 100,
    20: 'value2',
    'c': [10, 20, 30, True],
    (1, 2): 'value3',
    ('a', 'b', 'c'): 'value4',
}

assert len(data) == 5
del data['key1']
assert 'key1' not in data
```

ونحصل عليها بالإشارة بمرقوم:

```{python}
print(data[20])
print(data['c'])
print(data[(1, 2)])
print(data[('a', 'b', 'c')])
```

### إنشاء قاموس من سلسلتين

ويتحصل القاموس من سلسلتين باستعمال الفعل [`zip()`](https://docs.python.org/3/library/functions.html#zip)، كما يلي:

```{python}
students = ['Ahmad', 'Belal', 'Careem', 'David']
marks = [90, 80, 75, 85]
data = dict(zip(students, marks, strict=True))
data
```


## أفعال التحقق

أفعال التحقق تقبل مُكرَّرًا (Iterable)، وتنتج قيمة صواب (`True`) أو خطأ (`False`).
وقد عرفنا أن الصف والقائمة والقاموس كلها من جنس المُكرَّر.
وهما فعلان:

- فعل **أي** (`any`) يتحقق بوجود عنصرٍ واحد متحقق على الأقل
- فعل **كل** (`all`) يتحقق بتحقق جميع العناصر كلها

فهذه جُمَل التوكيد لجميع الحالات الممكنة لهما:

```{python}
assert any([True, False]) == True
assert any([True, True]) == True
assert any([False, False]) == False

assert all([True, True]) == True
assert all([True, False]) == False
assert all([False, False]) == False
```

وذلك باعتبار ما يصير إليه المُكَرَّر.

## المصطلحات

| العربية | الإنجليزية |
|----------|------------|
| جمع مرقوم | Hashable Collection |
| مجموعة | Set |
| قاموس | Dictionary |
| متغير | Mutable |
| فريد | Unique |
| مرقوم | Hashable |
| بلا ترتيب | Unordered |
| العد | Length |
| التكرار | Iteration |
| العضوية | Membership |
| الإضافة | Add |
| الحذف | Discard |
| نزع | Pop |
| المحو | Clear |
| التقاطع | Intersection |
| الاتحاد | Union |
| الفرق | Difference |
| الفرق التماثلي | Symmetric Difference |
| الجزئية | Subset |
| الشمول | Superset |
| الانفصال | Disjoint |
| رابط | Entry |
| مرقوم | Key |
| قيمة | Value |
| دالة | Mapping |
| دالة متغيرة | Mutable Mapping |
