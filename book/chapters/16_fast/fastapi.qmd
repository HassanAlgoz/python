# واجهة التطبيقات البرمجية

**واجهة التطبيقات البرمجية** (Application Programming Interface - API) هي أشهر من مجموع ما سبق كله؛ لأنها تتعلق بتخاطب البرمجيات مع بعضها لا مع المستخدم المباشر (وكل ما سبق موجَّه للمستخدم المباشر). وتخاطب البرمجيات أكثرُ بكثير؛ إذ أن المستخدم بضغطة زر واحدة قد يتسبب في حوار بين 20 خادمًا لتحقيق ما يريد.

فإذا نظرنا للسيارة؛ فإن الواجهة تتألف من: المِقْوَد، ودوَّاستي الوقود والمكابح، وناقل الحركة، مما هو ظاهر ويتعامل معه السائق بشكل مباشر. وكذلك لوحة القيادة التي تعرِض مؤشر الوقود والسرعة ودرجة الحرارة ونحو ذلك. لكن السيارة في الحقيقة تتكون من أشياء معقَّدة ومركَّبة لكنَّها مخفية وراء هذه البساطة.

وإذا تأملنا المشتري من السوق، فإنَّه يتعامل بشكل مباشر بالنظر إلى السلع التي أمامه، ويتكلم مع البائع ويشتري منه بواسطة النقد. فهذه الواجهة التي بينه وبين السلعة؛ فهو لا يحتاج ليشتريها أن يعرف عن خطوط الإنتاج والتوزيع وإدارة المصانع ونحو ذلك. فالأمر بسيطٌ بالنسبة للمشتري.

فنتصوَّر الشبكة العالميَّة أنها مكوَّنة من أجهزة تقدِّم خدمات لبعضها، وقليلٌ منها يواجه المستخدمين الأصليين (العملاء / الزبائن) بشكل مباشر. والصورة التالية توضِّح أنواعًا من الترابطات (وليس موضوعنا الآن).

![أنواع الترابطات بين البرمجيات على الشبكة العالمية](https://upload.wikimedia.org/wikipedia/commons/thumb/9/97/NetworkTopologies.svg/508px-NetworkTopologies.svg.png)

وقد كنا في حال المستفيد عندما استخدمناها في [باب الاستفادة من الخدمات البرمجية](../10_integration/a1_http.qmd)، عن طريق مكتبة `httpx` و `geopy` للتمثيل على ذلك. وسؤالنا الآن: **كيف تُصنع مثل هذه الواجهة؟**

فمن المكتبات في بايثون المشهورة في صناعة واجهة التطبيقات البرمجية (API):

1. مكتبة [FastAPI](https://fastapi.tiangolo.com/): "أداء عالي، سهل التعلم، سريع في البرمجة، جاهز للإنتاج"
2. مكتبة [Flask](https://flask.palletsprojects.com/): "تم تصميمه لجعل عملية البدء سريعة وسهلة، مع القدرة على التوسع في التطبيقات المعقدة."
3. مكتبة [Django](https://www.djangoproject.com/): "تسهيل إنشاء تطبيقات ويب أفضل بسرعة أكبر وباستخدام قدر أقل من التعليمات البرمجية."

**ولا يضر بأيها بدأت**.

وتتم الاستفادة كما تقدَّم في [باب الاستفادة من الخدمات البرمجية](../10_integration/a1_http.qmd) عن طريقة مكتبة تتخاطب بلغة HTTP ولو اختلفت لغة البرمجة للبرنامج المستفيد. فقد تكون اللغات مثل: **Go** أو **Java** أو **C#** أو **JavaScript** أو حتى **Python** نفسها، لكنه برنامج منفصل.

![البرامج المستفيدة](../../assets/users/server_to_clients.png) 


# تأليف واجهة التطبيقات البرمجية

يجب على المبرمج أن يلبسان حذاءين:

### المبرمج الخلفي

يبني نموذجًا للبيانات
Builds an API (Python) -- well-documented, with examples .. and covers the key common features in an API
    - files: pdf or images
Materialize this data model via a database (document store for flexibility?)

### Frontend developer

git clone <repo>
generate client-code
look through docs while implementing UI

- Motivate
- Install
- HTTP review
    - Path, Query, and Body
    - Pydantic BaseModel
    - Nested and Listed


## Other data types[¶](https://fastapi.tiangolo.com/tutorial/extra-data-types/#other-data-types)

Here are some of the additional data types you can use:

- `UUID`:
    - A standard "Universally Unique Identifier", common as an ID in many databases and systems.
    - In requests and responses will be represented as a `str`.
- `datetime.datetime`:
    - A Python `datetime.datetime`.
    - In requests and responses will be represented as a `str` in ISO 8601 format, like: `2008-09-15T15:53:00+05:00`.
- `datetime.date`:
    - Python `datetime.date`.
    - In requests and responses will be represented as a `str` in ISO 8601 format, like: `2008-09-15`.
- `datetime.time`:
    - A Python `datetime.time`.
    - In requests and responses will be represented as a `str` in ISO 8601 format, like: `14:23:55.003`.
- `datetime.timedelta`:
    - A Python `datetime.timedelta`.
    - In requests and responses will be represented as a `float` of total seconds.
    - Pydantic also allows representing it as a "ISO 8601 time diff encoding", [see the docs for more info](https://docs.pydantic.dev/latest/concepts/serialization/#custom-serializers).
- `frozenset`:
    - In requests and responses, treated the same as a `set`:
        - In requests, a list will be read, eliminating duplicates and converting it to a `set`.
        - In responses, the `set` will be converted to a `list`.
        - The generated schema will specify that the `set` values are unique (using JSON Schema's `uniqueItems`).
- `bytes`:
    - Standard Python `bytes`.
    - In requests and responses will be treated as `str`.
    - The generated schema will specify that it's a `str` with `binary` "format".
- `Decimal`:
    - Standard Python `Decimal`.
    - In requests and responses, handled the same as a `float`.
- You can check all the valid Pydantic data types here: [Pydantic data types](https://docs.pydantic.dev/latest/usage/types/types/).