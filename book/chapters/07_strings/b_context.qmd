# تطبيقات {.unnumbered}

## عد الكلمات

هذا مثال لاستخراج الكلمات (من غير تكرار) من قاموس من العبارات (ثلاثة عبارات). هذه العملية تستعمل كثيرًا في تحليل النصوص إذ نريد أن نعرف جميع الكلمات الواردة في مجموعة من النصوص، ولا نريد الكلمات المعهودة جدًّا (هنا نسميها `stop_words`)، كما أننا نستعمل `.lower()` في التعبير الناتج حتى لا يفرق بين الحروف في حالتيها الإنجليزية:

```{python}
stop_words = {'is', 'and', 'the', 'be', 'not'}

documents = {
    'Python':     "python is great and Python is easy",
    'Java':       "Java is verbose and java is popular",
    'JavaScript': "JavaScript is for the web and javascript is everywhere"
}

word_counts = dict()

for doc in documents.values():
    doc = doc.lower()
    words = doc.split()
    for w in words:
        if w not in stop_words:
            word_counts[w] = word_counts.get(w, 0) + 1

for w, count in word_counts.items():
    print(f"{w}: {count}")
```


## ترجمة أوامر

نكتب برنامج يقرأ سطرًا يأمره بعملية حسابية على عوامل محددة. فهو كلغة برمجة بسيطة.

```{python}
def parse_command(cmd):
    """
    Parse a command and return the result of the operation.

    Example:
    >>> parse_command("+ 5 10 2")
    17
    >>> parse_command("* 5 10 2")
    100
    >>> parse_command("max 5 10 2")
    10
    """

    operator, *operands = cmd.split(" ")

    match operator:
        case "+":
            total = 0
            for item in operands:
                total += float(item)
            return total

        case "*":
            total = 1
            for item in operands:
                total *= float(item)
            return total

        case "max":
            max_value = float(operands[0])
            for item in operands[1:]:
                f = float(item)
                if f > max_value:
                    max_value = f
            return max_value

        case _:
            raise ValueError(f"Unknown operator: {operator}")

assert parse_command("+ 5 10 2") == 17
assert parse_command("* 5 10 2") == 100
assert parse_command("max 5 10 2") == 10
```

