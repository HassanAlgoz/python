# مسائل {.unnumbered}

## كم عمرك يومئذ؟

اكتب إجراء يحسب عمرك في أي سنة معينة.

```{python}
def age_at(age_now: int, current_year: int, at_year: int) -> int:
    pass # اكتب هنا بدل كلمة pass

print(age_at(0, 2000, 2010)) # بعد الولادة
print(age_at(20, 2000, 2010)) # في المستقبل
print(age_at(20, 2000, 1995)) # في الماضي
```

## حساب الأجر

عرِّف الإجراء الذي يحسب الأجر بعاملين:

- `hours: float`: عدد الساعات التي يعملها الموظف
- `per_hour_rate: float`: سعر الساعة الواحدة

واجعل نوع العائد `float` كذلك باستعمال `-> float`.

```{python}
# اكتب الإجراء هنا
```

ثم اختبر الإجراء باستعمال جمل توكيدية: `assert`.


## توحيد الصيغة

في هذا المثال، تعود هذه النصوص كلها إلى نفس المعنى.

- ('medina', 'madinah', 'madina', 'al madinah', 'al madina', 'medina', 'madinah', 'madina', 'المدينة', 'مدينة'),
- ('mecca', 'makkah', 'makka', 'makkah', 'makkah', 'مكة', 'مكه'),

المطلوب إنشاء قاموس بحيث لو أعطيته أحد هذه الكلمات كمفتاح، فإنها جميعًا تؤول إلى صيغة موحدة:

```{python}
def normalize_city_name(city_name: str) -> str:
    pass # اكتب جسد الإجراء هنا
```

```python
assert (
    'madinah' ==
    normalize_city_name('المدينة') ==
    normalize_city_name('al madinah') ==
    normalize_city_name('medina')
)

assert (
    'makkah' ==
    normalize_city_name('مكة') ==
    normalize_city_name('makkah') ==
    normalize_city_name('makka') ==
    normalize_city_name('mecca')
)
```


## حساب الجُمَّل

[حِسَاب الجُمَّل](https://ar.wikipedia.org/wiki/%D8%AD%D8%B3%D8%A7%D8%A8_%D8%A7%D9%84%D8%AC%D9%85%D9%84) هي طريقة لتسجيل صور الأرقام والتواريخ باستخدام الحروف الأبجدية، إذ يُعطى كل حرف رقما معينا يدل عليه.

فكانوا من تشكيلة هذه الحروف ومجموعها يصلون إلى ما تعنيه من تاريخ مقصود وبالعكس كانوا يستخدمون الأرقام للوصول إلى النصوص.

| حساب الجمَّل |  |  |  |  |  |  |  |
| --- | --- | --- | --- | --- | --- | --- | --- |
| ا | 1 | ي | 10 | ق | 100 | غ | 1000 |
| ب | 2 | ك | 20 | ر | 200 | بغ | 2000 |
| جـ | 3 | ل | 30 | ش | 300 | جغ | 3000 |
| د | 4 | م | 40 | ت | 400 | دغ | 4000 |
| هـ | 5 | ن | 50 | ث | 500 | هغ | 5000 |
| و | 6 | س | 60 | خ | 600 | وغ | 6000 |
| ز | 7 | ع | 70 | ذ | 700 | زغ | 7000 |
| ح | 8 | ف | 80 | ض | 800 | حغ | 8000 |
| ط | 9 | ص | 90 | ظ | 900 | طغ | 9000 |

اكتب تفاصيل الإجراء الذي يحسب الجمَّل لكلمة معينة.

```python
def gematria(word: str) -> int:
    pass
```

```python
assert gematria('غرم') == 1240
assert gematria('رب') == 202
assert gematria('ريح') == 218
assert gematria('شعب') == 372
```

وكذلك في العبارات:

```python
assert gematria('في المشمش') == 801 == 80+10+1+30+40+300+40+300
assert gematria('مات الشعر بعده') == 1123 == 40+1+400+1+30+300+70+200+2+70+4+5
```

## توزيع الفرق


### بحسب حجم المجموعة

لديك قائمة من الأسماء وتريد توزيعها إلى مجموعات حيث `group_size` هو حجم المجموعة الواحدة:

```python
def make_groups_by_size(items: list[str], group_size: int) -> list[list[str]]:
    pass
```

افترض أن هذه القائمة التي لديك:

```
Ahmad
Mohannad
Mohammed
Salem
Ali
Samir
```

الاختبارات

```python
g2 = make_groups_by_size([
    "Ahmad",
    "Mohannad",
    "Mohammed",
    "Salem",
    "Ali",
    "Samir",
], group_size=2)
assert len(g2) == 3
assert len(g2[0]) == 2
assert len(g2[1]) == 2
assert len(g2[2]) == 2
```

### بحسب عدد المجموعات

نريد الآن توزيعها بحسب عدد المجموعات `group_count`:

```python
def make_groups_by_count(items: list[str], group_count: int) -> list[list[str]]:
    pass
```

الاختبار:

```python
g1 = make_groups_by_count([
    "Ahmad",
    "Mohannad",
    "Mohammed",
    "Salem",
    "Ali",
    "Samir",
], group_count=2)
assert len(g1) == 2
assert len(g1[0]) == 3
assert len(g1[1]) == 3
```

### دمج الاثنين في فعل واحد

هل يمكنك جعل كلا الأمرين في فعل واحد؟ بحيث:

- لو تم تعيين `group_size` فإنه يتم توزيع العناصر بحسب حجم المجموعة
- لو تم تعيين `group_count` فإنه يتم توزيع العناصر بحسب عدد المجموعات

```python
def make_groups(items: list[str], group_size: int = None, group_count: int = None) -> list[list[str]]:
    pass
```

### ضم الأقران

ماذا لو أردت أن تضم قائمة من الأشخاص بحيث يكون فارق العمر بينهم أقل ما يمكن؟

```
Ahmad: 24
Mohannad: 17
Mohammed: 16
Salem: 32
Ali: 26
Samir: 31
```

```python
peers = [
    ("Ahmad", 24),
    ("Mohannad", 17),
    ("Mohammed", 16),
    ("Salem", 32),
    ("Ali", 26),
    ("Samir", 31),
]
```

```python
def make_pairs_by_age_diff(items: list[tuple[str, int]]) -> list[tuple[str, str]]:
    """Make pairs of people by their age difference minimum."""
    pass
```

الاختبارات

```python
pairs = make_pairs_by_age_diff(peers)
for p in pairs:
    if "Ahmad" in p:
        assert "Ali" in p
    if "Mohannad" in p:
        assert "Mohammed" in p
    if "Salem" in p:
        assert "Samir" in p
```

## التوفيق بين مجموعتين

مسألة التوفيق بين مجموعتين تجدها في سياقات كثيرة.

نريد في هذا التمرين التوفيق بين أشخاص وما لديهم من مهارات وبين شركات وما تطلبها من هذه المهارات.

يمكن أن تبدأ بهذا الشكل لإيجاد كمية التوافق:

```python
person_skills = {"Python", "SQL"}
needed_skills = {"Python", "R", "Ninja", "Gymnastics", "Art of War"}
```

لكن في الواقع تأتي البيانات لمجموعة من الأشخاص مع مجموعة من الشركات هكذا:

```python
people = [
    {"name": "Ahmad", "skills": ["Python", "Go", "JavaScript", "Machine Learning", "Statistics"]},
    {"name": "Jawad", "skills": ["Management", "Business", "Marketing"]},
    {"name": "Belal", "skills": ["Python", "Statistics", "R", "Management"]},
]

companies = [
    {"name": "X", "skills_needed": ["Python", "Machine Learning", "Statistics"]},
    {"name": "Y", "skills_needed": ["Sales", "Marketing", "Leadership", "Management"]},
    {"name": "Z", "skills_needed": ["Statistics", "R", "Management"]},
]
```

اكتب برنامج للتوفيق بين المجموعتين بحيث ترتب على بما يناسب الشركات مرة، وبما يناسب الأشخاص مرة.

```
X: Ahmad, ...
Y: Jawad, ...
Z: Belal, ...

Ahmad: X, ...
Jawad: Y, ...
Belal: Z, ...
```