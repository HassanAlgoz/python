# لغة البرمجة

يتألف البرنامج المكتوب بلغة بايثون من **قطع برمجية** هي عبارة عن سلسلة من **الجُمَل** البسيطة والمركبة المكونة من **مفردات** للتعبير عن الأوامِر بطريقة سهلة على المبرمج كتابتها ، وفي نفس الوقت تتبع **قواعد نحوية** صارمة لا تشتبه عند ترجمتها لتعليمات مفصَّلة ودقيقة بلغة المنطق الرقمي لآلة لتنفذها.

## أصول اللغة

 وقد تكون هذه الجمل البرمجية **أصلية** في اللغة وقد تكون **مزيدة** مما أضيف لاحقًا. فأما [المفردات الأصلية في لغة بايثون](https://docs.python.org/3/reference/lexical_analysis.html#keywords) فهي:


```
False      await      else       import     pass
None       break      except     in         raise
True       class      finally    is         return
and        continue   for        lambda     try
as         def        from       nonlocal   while
assert     del        global     not        with
async      elif       if         or         yield
```

ومنها كذلك: `match`, `case`, `type` و `_`.

أما الجمل فتنقسم إلى قسمين:


:::: {.columns}

::: {.column width="50%"}
[**جملة بسيطة**](https://docs.python.org/3/reference/simple_stmts.html):

- التعبير: `x + y`
- التعيين: `x = y`
- التأكيد: `assert condition`
- المرور: `pass`
- الحذف: `del x`
- الإرجاع: `return y`
- الإنتاج: `yield y`
- رفع الاستثناء: `raise Exception`
- الكسر: `break`
- الاستمرار: `continue`
- الاستيراد: `import module`
- العالمية: `global x`
- غير المحلية: `nonlocal x`
- النوع: `type(x)`
:::

::: {.column width="50%"}
[**جملة مركبة**](https://docs.python.org/3/reference/compound_stmts.html):

- الشرط: `if ...`
- التكرار: `while ...`
- الحلقة: `for ...`
- المحاولة: `try ...`
- السياق: `with ...`
- المطابقة: `match ...`
- تعريف الدالة: `def ...`
- تعريف الفئة: `class ...`
- الروتينات المتزامنة: `async def ...`
- قوائم معلمات النوع: `[T1[, T2, ...]]`
:::

::::


ثم لدينا المعاملات والمحددات.


:::: {.columns}

::: {.column width="50%"}
[**المعاملات**](https://docs.python.org/3/reference/lexical_analysis.html#operators) فهي رموز لعمليات تختلف بحسب السياق (العوامل):

```
+       -       *       **      /       //      %      @
<<      >>      &       |       ^       ~       :=
<       >       <=      >=      ==      !=
```

فمثلاً: معامل الجمع `+` له أكثر من تفسير في العبارة: `x + y`:

- إذا كان `x` و `y` أرقامًا فإن `+` هو عملية جمع
- إذا كان `x` و `y` نصين فإن `+` هو عملية دمج

:::

::: {.column width="50%"}
[**المحددات**](https://docs.python.org/3/reference/lexical_analysis.html#delimiters) هي رموز تبين أين تبتدئ بعض الجمل أو تنفصل أو تنتهي:

```
(       )       [       ]       {       }
,       :       !       .       ;       @       =
```

ومن أمثلتها:

- في العبارة: `x = (y + z) * (a + b)` لتحديد ترتيب العمليات
- في الإجراء المستدعى: `print(x, y, z)` لتحديد العوامل
- في تعريف صف: `xs = (10, 20, 30)` لتحديد العناصر

:::
::::


**تنبيه**: ليس المطلوب حفظ ذلك الآن، وإنما هذه نظرة عامَّة لتكوين تصوُّر مجمل.

إذاً في لغة بايثون:

1. قطع برمجية
2. في كل قطعة جمل متتابعة بسيطة أو مركبة
3. في كل جملة مفردات وتعبيرات وعوامل ومحددات

## القطعة البرمجية

في **لغة إجرائية** كبايثون فإن تنفيذ الأسطر البرمجية يكون حسب ترتيب كتابتها من الأعلى إلى الأسفل.

### المثال الأول: جمل التعيين والشرط

```{python}
distance = 200
speed =  100
time_to_arrive = distance / speed

if time_to_arrive > 1:
    print('we are going to be late!')
else:
    print('on time')
```

في هذه القطعة مجموعة جُمل

- تعريف المتغيرات عن طريق جمل التعيين: `distance = 200` و `speed = 100`
- تعيين ناتج حساب قسمة المسافة على السرعة: `time_to_arrive = distance / speed`
- جملة شرطية: `if`
    - الجزء الأول (الشرط): `time_to_arrive > 1`
        - الجزء الثاني المضمن داخل القطعة: هي جمل برمجية متعلقة بنفوذ الشرط
    - الجزء الثالث (في حالة انتفاء الشرط): `else`
        - الجزء الرابع (المضمن داخل القطعة): هي جمل برمجية متعلقة بانتفاء ذلك الشرط

وقد تتضح أكثر حين نرسمها:

```{mermaid}
flowchart TD
    B[distance = 200] --> C[speed = 100] --> D[time_to_arrive = distance / speed] --> IF1{{"if time_to_arrive > 1"}}
    IF1 -->|False| X["on time"]
    IF1 -->|True| Y["we are going to be late!"]

    style IF1 fill:#82aeff, stroke:#333, stroke-width:2px;
```

### المثال الثاني: القوائم وحلقات التكرار

هذا المثال أكثر تعقيدًا نسبيًّا:

- نعرف سعر كل ثمرة في قائمة أسعار: `fruit_prices`

```{python}
fruit_prices = {
    'apple': 0.5,
    'banana': 0.25,
    'orange': 0.75
}
```

- نضع بعض المشتريات في السلة: `basket`

```{python}
basket = ['apple', 'apple', 'apple', 'banana']
```

- نحسب سعر السلة كلها بحسب قائمة الأسعار: `total_price`
- نحتاج لاستعمال جملة الحلقة: `for` للمرور على كل عنصر في السلة
- نستعمل جملة الزيادة: `+=` لزيادة الحاصل
- أخيرًا جملة استدعاء لإجراء الطباعة: `print`

```{python}
total_price = 0

for fruit in basket:
    total_price += fruit_prices[fruit]

print(total_price)
```

## المزيدات

من خواص لغة البرمجة: إنشاء مركبات لغوية جديدة. وذلك بثلاثة أمور:

1. **تعريف الدوال** / **الإجراءات**
2. **تعريف الأصناف** / **الأنواع**
3. **تعريف الوحدات** المتضمنة للأمرين السابقين

فأضاف مطوروا بايثون أنفسهم إلى اللغة ما يسمى **بالمكتبة الأساسية** وهي على قسمين:

1. **مضمَّنات أساسية**، وفيها:
	- [إجراءات مضمَّنة](https://docs.python.org/3/library/functions.html) مثل: `print`, `sum`, `max`, `min`, `len`
	- [أصناف مضمَّنة](https://docs.python.org/3/library/stdtypes.html) مثل: `str`, `int`, `list`
2. **وحدات أساسية**، مثل:
	- وحدة [`math`](https://docs.python.org/3/library/math.html) التي تضم مجموعة إجراءات تعنى بالعمليات الرياضية على الأعداد
	- وحدة [`datetime`](https://docs.python.org/3/library/datetime.html) التي تضم مجموعة أصناف وإجراءات تعنى بالوقت والتاريخ 

وكونها مكتبة أساسية فهي تنزل وتثبت مع حزمة لغة بايثون نفسها.

### مثال الإجراءات المضمَّنة

```{python}
my_list = [20, 10, 30, 40, 50, 20, 10, 20,
           30, 40, 50, 60, 30, 20, 30, 40]
```

فلمجموعة الأرقام عدد من الإجراءات المضمَّنة في لغة بايثون مثل:

- الجمع: `sum`
- القيمة العليا: `max`
- القيمة الدنيا: `min`
- عد العناصر: `len`

نستعرضها هنا:

```{python}
print('sum is:', sum(my_list))
print('max is:', max(my_list))
print('min is:', min(my_list))

avg = sum(my_list) / len(my_list)
print('average is:', avg)
```

وغيرها كثير.

### مثال وحدة الرياضيات الأساسية

في هذا المثال نعرف نقطتين ثم نحسب المسافة بينهما. والمسافة الإقليدية بين نقطتين $(x_1, y_1)$ و $(x_2, y_2)$ تتبع معادلة فيثاغورس:

$$
\text{distance} = \sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}
$$

تعمل هذه القطعة كالتالي:

- جملة استيراد المكتبة الرياضية: `import math`
- تعريف النقطتين: `x1, y1 = 0, 0` و `x2, y2 = 3, 4`
- حساب المسافة: `distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)` وفيه:
    - `x2 - x1` هو الفرق بين الإحداثيات السينية
    - `y2 - y1` هو الفرق بين الإحداثيات الصادية
    - `**` هي عملية تربيع العدد
    - `math.sqrt` هي دالة حساب الجذر التربيعي
- طباعة النتيجة: `print(distance)` وفيه:
    - `distance` هو الناتج النهائي لحساب المسافة
    - `print` هي دالة تطبع الناتج على الشاشة

```{python}
import math

x1, y1 = 0, 0
x2, y2 = 3, 4
distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)
print(distance)
```

ويمكن كتابة قطع برمجية مخزَّنة بحدود يتم تعيينا لاحقها كما هو حال الدوال الرياضية التي تتغير نتيجتها بتغير مدخلاتها. كما في هذا المثال:

```{python}
def distance(x1, y1, x2, y2):
    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)

print(distance(x1=0, y1=0, x2=3, y2=4))
print(distance(x1=1, y1=1, x2=2, y2=2))
```


## المكتبات المساهمة

فهذه عملية الجذر التربيعي أتينا بها باستيراد الوحدة الأساسية `math` ثم أشرنا إلى الإجراء `sqrt` المعرَّف ضمنها عن طريق معامل `.`.

أما ما ليس أساسيًّّا (**مكتبات مساهمة**) فإنه متوفِّر في قواعد بيانات على الشبكة مثل [PyPI](https://pypi.org/) الذي يضم ما يزيد على ما يزيد على 580,000 مشروع، أو غيره من مواقع استضافة حزم بايثون. ويمكن تنزيلها وتثبيتها باستعمال: `pip install package_name` ومن ثم استعمال لغتها المزيدة بعد بجملة الاستيراد: `import package_name` على نحو ما فعلناه مع المكتبة الأساسية `math`.

مدير الحزم pip هو أداة لتثبيت الحزم من فهرس حزم بايثون (Python Package Index - PyPI). هنا مثلاً صفحة [حزمة numpy](https://pypi.org/project/numpy/). على سبيل المثال، تختص حزمة [ `numpy`](https://numpy.org/) **بالعمليات العددية** (Numerical Python) على المصفوفات متعددة الأبعاد. وتعتبر هذه الحزمة أصلاً أساسيًّا لدى حزم كثيرة جدًّا في بايثون. ولنستخدمها نحن، يجب تثبيتها على النحو التالي:

```bash
pip install numpy
```


بعد ذلك نستطيع استعمالها بعد جملة الاستيراد، لنجرب عملية الضربالنقطي بين مصفوفتين:


```{python}
import numpy as np

mat1 = np.array([
    [1, 2],
    [3, 4]
])

mat2 = np.array([
    [5, 6],
    [7, 8]
])

print(np.dot(mat1, mat2))
```


ومن الحزم التي تبني علي `numpy` حزمة [`pandas`](https://pandas.pydata.org/docs/getting_started/comparison/comparison_with_spreadsheets.html) المتخصصة في تفكيك وتركيب الجداول والتحليلات الإحصائية عليها. ونحن إذا أردناها نستوردها ونستعملها:

```bash
pip install pandas
```

```{python}
import pandas as pd

df = pd.read_csv('../../datasets/students.csv')
df
```

ثم التحليل كالتالي:

```{python}
df.describe(include=['number']).T
```

وهي من أشهر المكتبات المساهمة في تحليل البيانات المجدولة.

والمثال الأخير هو حزمة [`geopy`](https://geopy.readthedocs.io/en/stable/) المتخصصة في الإحداثيات المكانية على الأرض وما يتعلق بها من حسابات وبيانات. يبدوا استعمالها معقَّدًا؛ لكنك ستراه سهلاً فيما بعد:

```bash
pip install geopy
```

```python
from geopy.distance import geodesic
from geopy.geocoders import Nominatim

geolocator = Nominatim(user_agent="exercise")

dammam_location = geolocator.geocode("Dammam, Saudi Arabia")
bahrain_location = geolocator.geocode("Bahrain")

dammam_coords = (dammam_location.latitude, dammam_location.longitude)
bahrain_coords = (bahrain_location.latitude, bahrain_location.longitude)

# Calculate the distance
distance = geodesic(dammam_coords, bahrain_coords).kilometers
print(f"Between Dammam and Bahrain is {distance:.2f} km")
```


## المجتمع يطور اللغة

فهنا دور **المجتمع** ليبني باللغة بمفرداتها وجملها ومكتبتها الأساسية والخارجية، ليبني فوق ذلك ما يخدم أغراضه. فاستطاع كل فئة من الناس تركيب حزمة جديدة مكونة من أشياء مركبة وإجراءات مركبة يستفيدون هم في ذلك من حزم أناس آخرين ، ثم يوفرونها لغيرهم. وهكذا تنمو اللغة ، حزمةً تِلو الأخرى بحسب إسهامات كل مجتمع برمجي بما يهتم به.

ومن مكامن القوة في لغة بايثون: أنها **متوافقة مع لغتي C/C++** إذْ يُمكن كتابة برمجيات عالية الأداء والكفاءة بهما مستفيدين من الحزم الموجودة فيهما، ثم توفيق ذلك ليكون كمكتبة في لغة بايثون.

فالمجتمعات البرمجية في بايثون كثيرة ومتعددة في اهتماماتها. منها على سبيل المثال:

- **تطوير مواقع الشبكة**:
	- [Django](https://www.djangoproject.com/) - لبناء مواقع متصلة بقواعد بيانات
	- [FastAPI](https://fastapi.tiangolo.com/) - حديث وسريع لبناء واجهات برمجية على الشبكة 

- **الذكاء الاصطناعي وتعلم الآلة**:
	- [statsmodels](https://www.statsmodels.org/) - للنماذج الإحصائية
	- [scikit-learn](https://scikit-learn.org/) - لاكتشاف الأنماط والتنبؤ (تعلم الآلة) 
	- [PyTorch](https://pytorch.org/) - لبناء نماذج التعلم العميق

- **تصوير البيانات**:
	 - [seaborn](https://seaborn.pydata.org/) - تصور البيانات الإحصائية على أساس Matplotlib.
	 - [matplotlib](https://matplotlib.org/) - مكتبة شاملة لإنشاء تصورات ثابتة ومتحركة وتفاعلية.

- **التحليل الرياضي والهندسة**:
	 - [sympy](https://www.sympy.org/) - للرياضيات الرمزية.
	 - [PySR](https://astroautomata.com/PySR/) - الانحدار الرمزي.
	 - [SciPy](https://scipy.org/) - للرياضيات والعلوم والهندسة.

وتصل عدد المشاريع (تقريبًا عدد الحزم) في قاعدة بيانات [(PyPI)  ](https://pypi.org/) اليوم ما يزيد على 580,000 مشروع. وتجد الكود مشاعًا على أكبر منصة لإدارة الأكواد البرمجية: [GitHub](https://github.com/).
