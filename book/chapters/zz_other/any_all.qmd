
## إجراءات التحقق

إجراءات التحقق تقبل مُكرَّرًا (Iterable)، وتنتج قيمة صواب (`True`) أو خطأ (`False`).
وقد عرفنا أن الصف والقائمة والقاموس كلها من جنس المُكرَّر.
وهما إجراءان:

- فعل **أي** (`any`) يتحقق بوجود عنصرٍ واحد متحقق على الأقل
- فعل **كل** (`all`) يتحقق بتحقق جميع العناصر كلها

فهذه جُمَل التوكيد لجميع الحالات الممكنة لهما:

```{python}
assert any([True, False]) == True
assert any([True, True]) == True
assert any([False, False]) == False

assert all([True, True]) == True
assert all([True, False]) == False
assert all([False, False]) == False
```

وذلك باعتبار ما يصير إليه المُكَرَّر.



###


## استعمال إجراءات التحقق

وننظر إلى المثال التالي لتوضيح الفائدة من إجراءات التحقق.
نفترض أننا نريد أن نعرف هل أحد هذه الكلمات يبدأ بالحرف: `ال`:

```{python}
words = ["السلام", "ثلاثة", "دعسوقة", "السيف"]
mask = [s.startswith("ال") for s in words]
print(mask)
```

وهذه نتيجة استعمال فعلي التحقق:

```{python}
print("أي منها يبدأ بالحرف: ال", any(mask))
print("كلها يبدأ بالحرف: ال", all(mask))
```

ونمثل عليه بمثال آخر من القاموس:

- هل اجتاز جميع الطلاب الامتحان؟
- هل اجتاز أي طالب الامتحان؟

```{python}
students = [
    {'name': 'علي', 'passed': True},
    {'name': 'خالد', 'passed': False},
    {'name': 'فاطمة', 'passed': True}
]

# هل اجتاز جميع الطلاب الامتحان؟
all_passed = all(s['passed'] for s in students)  # False (لأن خالد لم يجتز)

# هل اجتاز أي طالب الامتحان؟
any_passed = any(s['passed'] for s in students)  # True (لأن علي وفاطمة اجتازا)
```

ومن أمثلته تحقيق البيانات:

اشتراط وجوب وجود المفتاحين: `name` و `email` في القاموس:

```{python}
data = {
    'name': 'Adam',
    'email': 'adam@example.com',
}

if all(not data.get(k) for k in ["name", "email"]):
	print("البيانات غير مكتملة")
else:
	print("البيانات مكتملة")
```

فحص ما إذا كان أجاب الشخص بأحد الأجوبة التالية:

```{python}
answer = "مكة"

answer_set = {
    "مكة",
    "المدينة",
    "المسجد الحرام",
    "المسجد النبوي",
}
if any(a == answer for a in answer_set):
	print("صواب")
else:
	print("خطأ")
```
