
## خوارزمية البحث الثنائي

البحث عن عنصر في سلسلة عناصر يستغرق من الوقت: `O(n)` أي: في أسوأ الحالات نحتاج أن نفحص كل عنصر.

لكن إذا كانت السلسلة مرتبة، يمكننا استعمال خوارزمية البحث الثنائي التي تستغرق من الوقت: `O(log n)`. دعونا نحسب ماذا يعني هذا:

```{python}
import math

print(round(math.log2(1_000)), "checks for", 1_000, "items")
print(round(math.log2(1_000_000)), "checks for", 1_000_000, "items")
print(round(math.log2(1_000_000_000)), "checks for", 1_000_000_000, "items")
```

وإليك تطبيق الخوارزمية بالتكرار:

```{python}
def binary_search(items: list[int], item: int) -> int:
    left, right = 0, len(items) - 1
    while left <= right:
        mid = (left + right) // 2
        if items[mid] == item:
            return mid
        elif items[mid] < item:
            left = mid + 1
        else:
            right = mid - 1
    return -1
```

## حساب مجموع المسافات بين التنبؤ والحقيقة

تستعمل معادلة مجموع القيم المطلقة للفروق بين التنبؤ والحقيقة في الانحدار الخطي الذي يستعمل في تعلم الآلة:

$$
\text{MAE} = \sum_{i=1}^{n} |y^{(i)}_\text{predicted} - y^{(i)}_\text{actual}|
$$

فلدينا قائمتين من الأعداد، ما تم التنبؤ به من قبل النموذج، وما هو حقيقي ضمن البيانات، ونريد أن نجد مجموع الفروق المطلقة بينهما.

```{python}
predictions = [ 1, 2, 3, 4, 5]
actuals =     [-2, 3, 4, 5, 6]
errors =      [ 0, 0, 0, 0, 0]

for i in range(len(predictions)):
  errors[i] = abs(predictions[i] - actuals[i])

print('errors:', errors)
print('total error:', sum(errors))
```
