

### تمرير التحويل إلى تحويل ثاني

يمكن تكوين مسار من العمليات على المكرر بتمرير كل مُكرِّر ناتج عن التحويل للتحويل التالي. نحو:

```{python}
xs = [2, 4, 6]
plus = map(lambda x: x + 100, xs)
mult = map(lambda x: x * 2, plus)
```

فإذا جئنا للتكرار عليها فإننا نرى النتيجة:

```{python}
for x in mult:
    print(x)
```

## إنشاء مسار معالجة

تتكون **مسارات المعالجة** (pipelines) من ثلاثة أفعال عالية:

1. **التحويل**: [`map`](https://docs.python.org/3/library/functions.html#map)
2. **الترشيح**: [`filter`](https://docs.python.org/3/library/functions.html#filter)
3. **التجميع**: [`reduce`](https://docs.python.org/3/library/functools.html#functools.reduce)

فتُنسَج بها المسارات على النحو التالي:

```{python}
step_0 = range(1, 5+1) # إنشاء مُكرَّر أعداد
step_1 = map(lambda x: x ** 2, step_0) # تحويل
step_2 = map(lambda x: x + 100, step_1) # تحويل
step_3 = filter(lambda x: x % 2 == 0, step_2) # ترشيح
```

فإذا ما استعملنا التكرار على المكرِّر الأخير، فإن إنشاء المكرر في الخطوة الأولى يبدأ بإنشاء عناصرها شيئًا فشيئًا؛ فتدخُل إلى التحويل ثم التحويل ثم الترشيح شيئًا فشيئًا، ويتمُّ طباعتها كذلك:

```{python}
for result in step_3:
    print(result)
```

وبعد نفاذها، فإنك لو حاول سرد المُكرِّر الأخير مرة أخرى فإنك ستراه قد استُنزِف.
أما لو كان مُكرَّرًا -بفتح الراء- فإنه السرد لا يستنزفه؛ إذْ كان ومازال في الذاكرة. أما المُكرِّرُ فإنَّه مؤجَّل لا يحلُّ إلا عند الحاجة إليه.

```{python}
for result in step_3:
    print(result)
```

وأما فعل **التجميع** ([`reduce`](https://docs.python.org/3/library/functools.html#functools.reduce)) فيكون للعمليَّة التي تنظر في جميع العناصر وليست معالجتها لكلِّ عنصرٍ على حده (كما هو الحال في التحويل والترشيح).
هب أن لدينا هذا التسلسل:

```{python}
step_0 = range(1, 5+1) # إنشاء مُكرَّر أعداد
step_1 = map(lambda x: x ** 2, step_0) # تحويل
step_2 = map(lambda x: x - 10, step_1) # تحويل
step_3 = filter(lambda x: x > 0, step_2) # ترشيح
```

ثم نريد جمع العناصر، ابتداءً بقيمة `0` ونضم إليها كلِّ عنصرٍ من عناصر المُكرِّر الأخير:

```{python}
from functools import reduce

total = reduce(lambda x, y: x + y, step_3, 0)
total
```

وفيما يلي تصوير لمسار المعالجة هذا:

```{mermaid}
graph TD
    A[1, 2, 3, 4, 5] -->|map| B[1, 4, 9, 16, 25]
    B -->|map| C[-9, -6, -1, 6, 15]
    C -->|filter| D[6, 15]
    D -->|reduce| E[21]
```

ونمثل له بمثال أقرب للواقع، في متجر في قائمة الأسعار

```{python}
prices = {
    'apple': 15.25,
    'banana': 10.50,
    'orange': 5.75,
    'cantaloupe': 40.00
}
```

وما وضعه الزبون في السلة:

```{python}
basket = ['apple', 'apple', 'banana', 'orange', 'banana']
```

ثم نريد حساب المجموع بعد خصم 10% على الأسعار:

```{python}
# تحويل الأسماء في السلة إلى أسعارها في القائمة
prices_in_basket = map(
    lambda fruit: prices[fruit],
    basket
)

# تطبيق خصم 10% على الأسعار
discounted_in_basket = map(
    lambda price: price * 0.9,
    prices_in_basket
)
```

تجميع الأسعار لمعرفة المجموع، وباعتبار أن الزبون مديون للمتجر بـ `10` ريالات:

```{python}
from functools import reduce

total = reduce(
    lambda x, y: x + y,
    discounted_in_basket,
    10
)

print(round(total, 2))
```

وهذه رسمة للمسار:

```{mermaid}
graph TD
    A[apple, apple, banana, orange, banana] -->|map| B[15.25, 15.25, 10.5, 5.75, 10.5]
    B -->|map| C[13.725, 13.725, 9.45, 5.175, 9.45]
    C -->|reduce| D[61.53]
```

