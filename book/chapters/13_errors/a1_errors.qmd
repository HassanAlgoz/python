# الخطأ

ينقسم الخطأ لثلاثة أنواع:

1. **نحوي** (Syntactic): وهو الخطأ في مبنى اللغة؛ أي: مخالفة قواعدها وقوانينها.
2. **منطقي** (Logical): وهو تعبيرٌ صحيحٌ نحويًّا لكنَّه لا يؤدي المقصود الذي في ذهنك.
3. **عملي** (Runtime): ويسمى **الاستثناء** وهو حالة غير مثالية يجب أن يتعامل معها الرنامج.
    - يأتي الحديث عنه في [الفصل التالي](a2_exceptions.qmd).

## الخطأ النحوي: الخطأ في اللغة

الأخطاء النحوية تتعلق بتركيب اللغة لا أكثر ولا أقل. إليك ثلاثة أمثلة.

### فقدان النقطتين `:`

```{python}
#|error: true
if (x > 5)
    print("x")
```

### علامات اقتباس غير متوازنة

```{python}
#|error: true
print("x
```

### اسم متغير غير صالح

```{python}
#| error: true
my-variable = 10
```

### أخطاء المحاذاة

من الأخطاء النحوية الشائعة في بايثون: أخطاء المحاذاة (Indentation Error).

وذلك أن بايثون تقبل نوعين من المسافات البادئة للسطر؛ إما بحرف المسافة التي بين الكلمات `\s` أو بحرف المسافة بين الأعمدة `\t`. فإذا نسخت قطعةً من إحدى مواقع الشبكة، من هنا وهناك، فقد يخلتط عندك الأمران؛ وهذا مما لا تقبله بايثون. لذلك تضبط محررات النصوص عملية النسخ واللصق فتوحِّد المسافة البادئة بأحدهما، حتى لا نهتم لذلك نحن. فهي حروف خفيَّة! 

إليك بعض الأمثلة لما يحصل من أخطاء في المحاذاة:

عدم وجود مسافة بادئة، عندما تكون متوقعة:

```{python}
#| error: true
if True:
print("x")
```

عدم تطابق المحاذاة:

```{python}
#| error: true
if True:
    print("x")
     print('y')
```

### تجويد العبارة

من تجويد العبارة تسمية المتغيرات بما يدل على وظيفتها، مثل:


```{python}
rate = 50
hours_per_day = 6
days = 5
pay = rate * hours_per_day * days
print(pay)
```

وإن كان ليس من الخطأ النحوي كتابتها بطريقة مختلفة وبأسماء غير معبِّرة، إلا أنه فعلٌ غير مستحسن:

```{python}
r, hpd, d = 50, 6, 5
p = r * hpd * d
print(p)
```

وفي هذا نصائح كثيرة، يراجع فيها [دليل أسلوب الكتابة في بايثون](https://peps.python.org/pep-0008/).

## الخطأ المنطقي: الخطأ في التعبير

وهي التي نقصدها حين نقول: **خطأ برمجي** (Bug)، ولذلك قيل للبرنامج الذي يساعد في إصلاحها: **المدقق** أو الكاشف (Debugger)، وعملية البحث عنها وإصلاحها: **التدقيق** (Debugging).

**الأخطاء المنطقية صامتة**. إذ لا يكتشفها المترجم، وتتسبب في تصرف البرنامج بشكل غير صحيح. الأخطاء المنطقية هي الأصعب في التتبع والإصلاح لأنها ليست واضحة. يمكن أن تكون ناجمة عن:

- افتراضات غير صحيحة
- خطوات غير موصِلة

وإليك بعض الأمثلة

### استعمال الإجراء الخاطئ

```{python}
import math

square = math.sqrt(4) # should use math.pow(4, 2) instead
```

### استعمال العامل الخاطئ

```{python}
x = 16
if (x == "16"):
    print('equal')
```

### مستوى محاذاة خاطئ

هنا كانت النية تقتضي أن تكون `print(j)` داخل الحلقة الداخلية:

```{python}
for i in range(2):
    for j in range(3):
        print(i)  
    print(j)
```

### خطأ الحافَّة

يكاد يكون أشهر الأخطاء في البرمجة: خطأ الحافَّة. ويسمى (Off-by-one error).

نشرحه بمثال: النية هنا هي طباعة الأرقام من 5 إلى 0 بما في ذلك 0، ولكن الحلقة تتوقف عند 1.

```{python}
for i in range(5, 0, -1):
    print(i)
```

## كشف الأخطاء المنطقية

لكونها جملاً صحيحة في ذاتها؛ لا يستطيع البرنامج كشف هذه الأخطاء لوحده. بل يجب على من يُدركُ حقيقة المطلوب من البرنامج أن يتكفل بذلك. وهنا تكون الحاجة ماسَّة **لجمل التوكيد**: `assert` وقد رأيناها كثيرًا.

و**التدقيق**؛ إذْ أفضل طريقة لحل الأخطاء المنطقية هي تنفيذ القطعة البرمجية والنظر في الناتج، وتتبع المنطق مرة أخرى إلى النص البرمجي سطرًا بسطر. يمكنك استخدام عبارات الطباعة `print` لتصحيح الأخطاء وفهم تدفق البرنامج. وقد يكون الأفضل من ذلك استعمال [**المدقق**](https://code.visualstudio.com/docs/python/debugging) (Debugger).

**مراجعة الأقران**: بحيث يطلع على النص البرمجي شخص آخر، فإنه قد يرى منه ما تعذر عليك رؤيته. وقد يتم تنظيمه بين أعضاء الفريق الواحد بأحد برمجيات التعاون مثل: GitHub وGitLab وBitbucket وغيرها. لكن ليس شرطًا أن يكون بطريقة منظَّمة حتى تستفيد منه.

## المصطلحات

| العربية | الإنجليزية |
|------------------|---------------------|
| الخطأ النحوي | Syntactic Error |
| الخطأ المنطقي | Logical Error |
| الخطأ العملي | Runtime Error |
| الاستثناء | Exception |
| أخطاء المحاذاة | Indentation Error |
| أسلوب الكتابة | Code Style |
| خطأ الحافَّة | Off-by-one Error |
| المدقق | Debugger |
| التدقيق | Debugging |
| جمل التوكيد | Assert Statements |
| مراجعة الأقران | Peer Review |
| برمجيات التعاون | Collaboration Tools |
