---
og:title: oop_intro
---

# الكائنات

رأينا فيما تقدَّم طريقةً **لتبعيض مسارات البرنامج** لأجزاء تعمل على معطيَات محددة (الدالة / الإجراء)، بحيث يُمكن استدعاؤها بمعطيات مختلفة، ومرات متعددة. وكل جزء منها فيه سير للأوامر من بدايته حتى أحد النهايات بجملة الرجوع (`return`).

والآن نتعرَّف على طريقة **لتبعيض البرنامج إلى برامج جزئية**؛ لها مساراتها وأيضًا متغيرتها الخاصَّة. وتسمى هذه **البرمجة الكائنية**  (Object-oriented Programming - OOP) حيث يحتفظ كل كائن بأمرين:

1. **الحال** (State) وتمثِّلُها المتغيرات، والإجراءات التي تقرأ من تلك المتغيرات.
2. **الانتقال** (Transition) وتمثِّلُها الإجراءات التي تكتب في تلك المتغيرات.

وبالمثال يتضح المقال.

**القائمة** ([`list`](https://docs.python.org/3/library/stdtypes.html#list)) يتم إنشاؤها بالقوسين المربعين `[]`، وهذا من اختصارات بايثون. والأصل أن الكائن يتمُّ إنشاؤه بذكر نوعه مع القوسين `()` ليتم استدعاء الإجراء المُنشئ للكائن، على هذا النحو:

```{python}
xs1 = []
xs2 = list()
print(xs1 == xs2)
```

فأما حال القائمة:

- قيَم العناصر التي تحتويها
- موضِع كل عنصر فيها بالترتيب
- عدد العناصر

ويُمكِنُ **قراءة** (Read) الحال بالإجراءات التالية:

- القراءة: `print(xs[0])`
- العد: `len(xs)`
- البحث: `10 in xs`
- الكر: `for x in xs`
- المقارنة: `xs == ys`

وأما الانتقال من حالٍ إلى حال، فيتم بأحد إجراءات **الكتابة** (Write):

- الإضافة: `xs.append(50)`
- الحذف: ` xs.remove(50)`
- التعديل: `xs[0] = 30`

وقد يُصرَّحُ بذكر اسم الإجراء مع عامل الاستدعاء (وهو القوسان: `()`) وقد يُضمَر.
وكل ما سبق عمليَّات تمثَّل بإجراءات، لكنَّ قد يحلّ محل الإجراء عامل يدلُّ عليه:

- فالعمليات المصرَّح فيها باسم الإجراء فنحو: `.append()` و `.remove()`. وإذا أُسنِدَ الإجراء للكائن فهو مما يختصُّ به لا بغيره؛ فالمفعول به هو هذا الكائن، فيكون مُعطىً مُقدَّر لا يحتاج لتمريره بين القوسين.
- ولعلك تلاحظ عمليات أخرى لكنَّها تستعمل إجراءات لا تختص بهذا الكائن تحديدًا، نحو: `print()` و `len()`.
- ومن الإجراءات ما **يعوَّض مكان العامل**، نحو: `xs[0]` فهو إجراء قراءة اسمه: (`__getitem__`) لكن بايثون تخصُّه بهذه الكتابة للاختصار. ومثله أيضًا: `xs == ys` فهو يستدعي إجراء المقارنة (`__eq__`) وكذلك البحث (`__contains__`).
وأما الكر فيتطلب وجود إجراء (`__iter__`) يُرجِع كائنًا له الإجراء (`__next__`).

وهذه الأسماء تهمُّنا عند تعريف أنواع بأنفسنا.

## تعريف النوع

تأمل المثال التالي:

```{python}
class Counter:
    def __init__(self, count):
        self.count = count
    
    def increment(self, by=1):
        self.count += by
```

- **الصنف** (Class): `Counter`
- **الخصائص** (Properties): هي كل ما تم تعيينه وإسنادُه إلى `self` وهي هنا: `count` فقط
- **الطرائق** (Methods): وهي كل إجراء تم تعريفُه في داخل تعريف النوع، وهي هنا: `increment` فقط

أما إجراء [`__init__`](https://docs.python.org/3/reference/datamodel.html#object.__init__) (بشرطتين قبل وشرطتين بعد `__`) يرمز للكلمة (Initialization) وتعنى **الإنشاء**؛ ويتم استدعاؤُها فوْر ذِكر اسم النوع كدالة لإنشائه في نحو: `Counter(0)`.

تتقدَّم `self` (**نفس**) كمعطى في الابتداء في جميع الأفعال؛ والإسنادُ إليها إسنادٌ لكائن مُضمَر أنشئ من هذا النوع.

## إنشاء الكائنات

تتم كتابة اسم الصنف، ثم القوسان (عامل الاستدعاء) وبينهما المعطيات لطريقة الإنشاء `__init__` على النحو التالي:

```{python}
c1 = Counter(10)
```

وللوصول إلى خاصية أو طريقة ما فإننا نتسعمل عامل الوصول، النقطة (`.`) على النحو التالي:

```{python}
print(c1.count)
c1.increment(2)
c1.increment(3)
print(c1.count)
```


وهذا معيَّن آخر من نفس الصنف:

```{python}
c2 = Counter(0)
```

وكل واحد منهما له حال خاصَّة به:

```{python}
print(c1.count)
print(c2.count)
```
