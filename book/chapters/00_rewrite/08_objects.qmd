---
og:title: oop_intro
---

# الكائنات

رأينا فيما تقدَّم طريقةً **لتبعيض مسارات البرنامج** لأجزاء تعمل على معطيَات محددة (الدالة / الإجراء)، بحيث يُمكن استدعاؤها بمعطيات مختلفة، ومرات متعددة. وكل جزء منها فيه سير للأوامر من بدايته حتى أحد النهايات بجملة الرجوع (`return`).

والآن نتعرَّف على طريقة **لتبعيض البرنامج إلى برامج جزئية**؛ لها مساراتها وأيضًا متغيرتها الخاصَّة. وتسمى هذه **البرمجة الكائنية**  (Object-oriented Programming - OOP) حيث يحتفظ كل كائن بأمرين:

1. **الحال** (State) وتمثِّلُها المتغيرات، والإجراءات التي تقرأ من تلك المتغيرات.
2. **الانتقال** (Transition) وتمثِّلُها الإجراءات التي تكتب في تلك المتغيرات.

وبالمثال يتضح المقال.

**القائمة** ([`list`](https://docs.python.org/3/library/stdtypes.html#list)) يتم إنشاؤها بالقوسين المربعين `[]`، وهذا من اختصارات بايثون. والأصل أن الكائن يتمُّ إنشاؤه بذكر نوعه مع القوسين `()` ليتم استدعاء الإجراء المُنشئ للكائن، على هذا النحو:

```{python}
xs1 = []
xs2 = list()
print(xs1 == xs2)
```

فأما حال القائمة:

- قيَم العناصر التي تحتويها
- موضِع كل عنصر فيها بالترتيب
- عدد العناصر

ويُمكِنُ **قراءة** (Read) الحال بالإجراءات التالية:

- القراءة: `print(xs[0])`
- العد: `len(xs)`
- البحث: `10 in xs`
- الكر: `for x in xs`
- المقارنة: `xs == ys`

وأما الانتقال من حالٍ إلى حال، فيتم بأحد إجراءات **الكتابة** (Write):

- الإضافة: `xs.append(50)`
- الحذف: ` xs.remove(50)`
- التعديل: `xs[0] = 30`

وكل ما سبق عمليَّات تمثَّل بإجراءات، لكنَّ قد يحلّ محل اسم الإجراء عامل يدلُّ عليه:

- فالعمليات المصرَّح فيها باسم الإجراء فنحو: `.append()` و `.remove()`. وإذا أُسنِدَ الإجراء للكائن فهو مما يختصُّ به لا بغيره؛ فالمفعول به هو هذا الكائن، فيكون مُعطىً مُقدَّر لا يحتاج لتمريره بين القوسين.
- ولعلك تلاحظ عمليات أخرى لكنَّها تستعمل إجراءات لا تختص بهذا الكائن تحديدًا، نحو: `print()` و `len()`.
- ومن الإجراءات ما **يعوَّض مكان العامل**، نحو: `xs[0]` فهو إجراء قراءة اسمه: (`__getitem__`) لكن بايثون تخصُّه بهذه الكتابة للاختصار. ومثله أيضًا: `xs == ys` فهو يستدعي إجراء المقارنة (`__eq__`) وكذلك البحث (`__contains__`).
وأما الكر فيتطلب وجود إجراء (`__iter__`) يُرجِع كائنًا له الإجراء (`__next__`).

وهذه الأسماء تهمُّنا عند تعريف أنواع بأنفسنا.

## تعريف النوع

تأمل المثال التالي:

```{python}
class Counter:
    def __init__(self, count):
        self.count = count
    
    def increment(self, by=1):
        self.count += by
```

- **الصنف** (Class): `Counter`
- **الخصائص** (Properties): هي كل ما تم تعيينه وإسنادُه إلى `self` وهي هنا: `count` فقط
- **الطرائق** (Methods): وهي كل إجراء تم تعريفُه في داخل تعريف النوع، وهي هنا: `increment` فقط

أما إجراء [`__init__`](https://docs.python.org/3/reference/datamodel.html#object.__init__) (بشرطتين قبل وشرطتين بعد `__`) يرمز للكلمة (Initialization) وتعنى **الإنشاء**؛ ويتم استدعاؤُها فوْر ذِكر اسم النوع كدالة لإنشائه في نحو: `Counter(0)`.

تتقدَّم `self` (**نفس**) كمعطى في الابتداء في جميع الأفعال؛ والإسنادُ إليها إسنادٌ لكائن مُضمَر أنشئ من هذا النوع.

## إنشاء الكائنات

تتم كتابة اسم الصنف، ثم القوسان (عامل الاستدعاء) وبينهما المعطيات لطريقة الإنشاء `__init__` على النحو التالي:

```{python}
c1 = Counter(10)
```

وللوصول إلى خاصية أو طريقة ما فإننا نتسعمل عامل الوصول، النقطة (`.`) على النحو التالي:

```{python}
print(c1.count)
c1.increment(2)
c1.increment(3)
print(c1.count)
```


وهذا معيَّن آخر من نفس الصنف:

```{python}
c2 = Counter(0)
```

وكل واحد منهما له حال خاصَّة به:

```{python}
print(c1.count)
print(c2.count)
```

## عوامل الحاويات

وكي يتضح مفهوم الأصناف، فإننا سنمثل **المجموعة الرياضية** (`Set`) بأنفسنا، وإن كانت جودودة في بايثون أصلاً.

تسمي بايثون الحروف والعلامات المستعملة مع أنواع الجموع: [**عوامل الحاوية**](https://docs.python.org/3/reference/datamodel.html#emulating-container-types) (Container Operators).

ونمثل بتعريف صنف **المجموعة الرياضية**، حيث تقبل:

- العد: `len(s)` يُسمَّى فعله: `__len__`
- العضويَّة: `x in s` يُسمَّى فعله: `__contains__`
- التكرار: `for x in s` يُسمَّى فعله: `__iter__`
- الحذف: `.remove()`

ومن سماتها أن العنصر فيها لا يتكرر.

ومن طرائقها: منطق المجموعة الرياضية.

## منطق المجموعة الرياضية

المجموعة في الرياضيات لها بعض المفاهيم المتعلقة بها وهي:

- **التقاطع والاتحاد والفرق، والفرق التماثلي**
- وكذلك **تحقق**: (**الجزئية والشمول والانفاصل**).

وتمثلها بايثون باستعمال القوسين المعقوفين (`{}`) على هذا النحو:

```{python}
set1 = {1, 2, 3, 4, 5}
set2 =          {4, 5, 6, 7, 8}
```

وفيما يلي نشرح هذه العمليات، ثم ننتقل إلى كيفية تمثيل ذلك في بايثون.

## العمليات على المجموعات

### الاتحاد

![اتحاد مجموعتين](https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/Venn0111.svg/180px-Venn0111.svg.png)

```{python}
set1.union(set2)
```

### التقاطع

![تقاطع مجموعتين](https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Venn0001.svg/180px-Venn0001.svg.png)

```{python}
set1.intersection(set2)
```

### الفرق

![الفرق](https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Venn0010.svg/180px-Venn0010.svg.png)

```{python}
set1.difference(set2)
```

```{python}
set2.difference(set1)
```

### الفرق التماثلي

![الفرق التماثلي](https://upload.wikimedia.org/wikipedia/commons/thumb/4/46/Venn0110.svg/180px-Venn0110.svg.png)

```{python}
set1.symmetric_difference(set2)
```


## العلاقات بين المجموعات

### الجزئية والشمول

![الجزئية والشمول](https://upload.wikimedia.org/wikipedia/commons/thumb/b/b0/Venn_A_subset_B.svg/150px-Venn_A_subset_B.svg.png)

```{python}
A = {1, 2, 3}
B = {1, 2, 3, 4, 5, 6}
```

وهذا مثال لاستعمالها كما في الجدول:

```{python}
print(A.issubset(B))
print(B.issuperset(A))
```

### الانفصال

وأما الانفصال، فهو عدم وجود أدنى تقاطع بين المجموعتين:

```{python}
C = {'Apple', 'Banana'}
print(C.isdisjoint(A))
print(C.isdisjoint(B))
```


## تعريف المجموعة الرياضية

ونعرف **المجموعة الرياضيَّة** (`Set`) بأنفسنا لغرض تعليمي وإن كانت نوعًا أصليًّا في بايثون اسمه (`set`).
ولاحظ أن التمثيل الداخلي (Internal Representation) الذي سنعتمد عليه هو: القائمة (`list`) الممثلة بالمتغيِّر: `self.elements`.

```{python}
class Set:
    # طريقة الإنشاء
    def __init__(self, elements):
        self.elements = elements

    # طريقة التمثيل
    def __repr__(self):
        return f"Set({self.elements})"
    
    # طريقة العد تمررها كما هي
    def __len__(self):
        return len(self.elements)
    
    # طريقة العضويَّة تمررها كما هي
    def __contains__(self, x):
        return x in self.elements
    
    # طريقة التكرار تمررها كما هي
    def __iter__(self):
        return iter(self.elements)
    
    # طريقة الإضافة تتحقق أولاً من عدم وجود العنصر
    def add(self, x):
        if x not in self.elements:
            self.elements.append(x)
    
    # طريقة الحذف تتحقق أولاً من وجود العنصر
    def remove(self, x):
        if x in self.elements:
            self.elements.remove(x)
    
    # طريفة الاتحاد
    def union(self, other):
        result = []
        for x in self.elements + other.elements:
            if x not in result:
                result.append(x)
        return Set(result)
    
    # طريقة التقاطع
    def intersection(self, other):
        result = []
        for x in self.elements:
            if x in other.elements:
                result.append(x)
        return Set(result)
    
    # طريقة الفرق
    def difference(self, other):
        result = []
        for x in self.elements:
            if x not in other.elements:
                result.append(x)
        return Set(result)
    
    # طريقة الفرق التماثلي
    def symmetric_difference(self, other):
        d1 = self.difference(other)
        d2 = other.difference(self)
        return d1.union(d2)
    
    # طريقة الانفصال
    def isdisjoint(self, other):
        return len(self.intersection(other)) == 0
    
    # طريقة الجزئية
    def issubset(self, other):
        for x in self.elements:
            if x not in other.elements:
                return False
        return True
    
    # طريقة الشمول
    def issuperset(self, other):
        return other.issubset(self)
```

ولاحظ في المثال السابق عدة أمور:


الطريقة (`__repr__`) تعني **التمثيل** (Representation)، وهي تظهر حين نعرض الكائن مثلاً بأمر الطباعة `print()`.

أن بعض الطرائق تغير التمثيل الداخلي (`elements`) مباشرةً، مثل: `add` و `remove`.

وبعض الطرائق يُنشئ نُسخة جديدة منه، ويجري العمليَّة عليه، ثم يُنشئ كائن مجموعة (`Set`) ويمرر إليه هذا التمثيل ويرجع به: `return Set(result)`.
**والفائدة من هذه الحركة**: هي إمكانيَّة استعمال هذه الطرائق ضمن طرائق أخرى.
كما ترى في `.symmetric_difference()` و `.isdisjoint()`.
فلو لم نقم بهذه الحركة، لم يمكن ذلك.

ثم الإنشاء والاستعمال على النحو التالي:

```{python}
s1 = Set([1, 2, 3])
s2 = Set([3, 4, 5])
```

```{python}
print(s1.union(s2))
print(s1.intersection(s2))
print(s1.difference(s2))
print(s2.difference(s1))
print(s1.symmetric_difference(s2))
```

```{python}
print(Set([1, 2]).isdisjoint(Set([3, 4])))
print(Set([1, 2]).issubset(Set([1, 2, 3])))
print(Set([1, 2, 3]).issuperset(Set([1, 2])))
```


## تحديد عمل العوامل

تأمل التالي وتوقَّع النتيجة وعلل إجابتك. ما هي نتيجة:

القطعة الأولى:

```python
[1, 2, 3] + [4, 5, 6]
```

القطعة الثانية:

```python
[1, 2, 3] * [4, 5, 6]
```

القطعة الثالثة:

```python
[1, 2, 3] * 5
```

القطعة الرابعة:

```python
[1, 2, 3] - 3
```


## عوامل الأرقام

كل الذي سبق، قد تم تعريفه في بايثون لهذه الأنواع التي تراها بالتحديد عن طريق إجراءات مخصصة. وإليك هذا الجدول للعوامل المخصصة:

| مثال | الإجراء |
|----------|----------|
| `self + other` | `__add__` |
| `self - other` | `__sub__` |
| `self * other` | `__mul__` |
| `self / other` | `__truediv__` |
| `self // other` | `__floordiv__` |
| `self % other` | `__mod__` |
| `self ** other` | `__pow__` |

(وانظر [مرجع بايثون لمحاكاة العمليات الرقمية](https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types)).

فنستطيع تعريف نوع المتجَّه (Vector2D) على النحو التالي.

```{python}
class Vector2D:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def __repr__(self):
        return f"<{self.x}, {self.y}>"
    
    def __add__(self, other):
        return Vector2D(self.x + other.x, self.y + other.y)
    
    def __sub__(self, other):
        return Vector2D(self.x - other.x, self.y - other.y)
    
    def __mul__(self, other):
        return Vector2D(self.x * other.x, self.y * other.y)
```

وفي الجمع والطرح والضرب، يكون العائد متجهًا جديدًا هو حاصل العملية على أفراد العناصر المتقابلة بين المتجهين `self` و `other`. حيث يمثل الأوَّل (`self`) المتجَّه في الطرف الأيسر من العامل، والثاني (`other`) في الطرف الأيمن.

والآن يمكننا إنشاء متجهين ووضع العوامل بينهما:

```{python}
v1 = Vector2D(1, 2)
v2 = Vector2D(3, 4)

v1 + v2
```

```{python}
v1 - v2
```

```{python}
v1 * v2
```

ماذا لو أردنا إضافة عمليات بين المتجه والعدد، نحو: `v1 + 3`? يتطلب ذلك إضافة شرط لفحص النوع، وهو `isinstance` كالتالي:

```{python}
class Vector2D:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def __repr__(self):
        return f"Vector({self.x}, {self.y})"
    
    def __add__(self, other):
        if isinstance(other, Vector2D):
            return Vector2D(self.x + other.x, self.y + other.y)
        else:
            return Vector2D(self.x + other, self.y + other)
    
    def __sub__(self, other):
        if isinstance(other, Vector2D):
            return Vector2D(self.x - other.x, self.y - other.y)
        else:
            return Vector2D(self.x - other, self.y - other)
    
    def __mul__(self, other):
        if isinstance(other, Vector2D):
            return Vector2D(self.x * other.x, self.y * other.y)
        else:
            return Vector2D(self.x * other, self.y * other)
```

وهكذا يصبح التفاعل بين المتجَّه والعدد، وهما نوعان مختلفان (`int` و `Vector`):

```{python}
v1 = Vector2D(1, 2)
v1 + 3
```

لكن لاحظ أنك لو وضعت العدد أولاً فسيظهر خطأ:

```{python}
#|error: true
3 + v1
```

هذا لأن عملية الجمع الآن لا تنظر في نوع العدد (`int`) ولا تجد فيه قبولاً للمتجه (فقد عرفناه للتو). ولحل هذه المشكلة توفر بايثون لكل فعل مخصص مقابل يبدأ بحرف `r` على النحو التالي:

| العامل | الإجراء |
|----------|----------|
| `other + self` | `__radd__` |
| `other - self` | `__rsub__` |
| `other * self` | `__rmul__` |

نعدل الإجراء بحيث نضيف إليه المقابل:

```{python}
class Vector2D:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def __repr__(self):
        return f"Vector({self.x}, {self.y})"
    
    def __add__(self, other):
        if isinstance(other, Vector2D):
            return Vector2D(self.x + other.x, self.y + other.y)
        else:
            return Vector2D(self.x + other, self.y + other)

    def __radd__(self, other):
        return self + other
```

والآن كلاهما يعمل بشكل صحيح:

```{python}
v1 = Vector2D(1, 2)
3 + v1
```

```{python}
v1 + 3
```
