# التجريد


::: {.callout-note}
هذا الفصل يتطلب تركيزًا أكثر. فهي الأدوات المجردة التي تبنى بها المكتبات المفيدة للمبرمجين أنفسهم. وقد لا يستعملها كثيرًا من يريد برمجة التطبيقات فقط.
:::

ومن الخصائص الممتعة في بناء البرمجيات: العلاقات بين المجردات في المستويات المختلفة من التجريد. وسنمثل لذلك بـ:

1. **التعميم**: بحيث يكون النوع غير مقيَّد بحالة معيَّنة، بل يُخصص عند التعيين.
2. **التركيب**: مثل تعريف صنف **المضلَّع** أنه مركَّب من **سلسلة + نقاط** ونركِّب من عوامل اللغة ما يجعله من **الجموع**
3. **التخصيص**: حيث نبني صنف **الطابور** باختيار أفعال محددة من السلسلة على نسق ما
4. **التسلسل**: وهو النوع الذي يرتبط بمثله. كالشجرة، فروعها أصولٌ لفروع، وهكذا يتسلسل حتى نصل إلى الثمار.

## التعميم

نريد أن نعمم نوع المتجه بحيث لا يتقيد بعنصرين `x,y` بل يقبل أن يكون أكثر من ذلك:

```{python}
class Vector:
    def __init__(self, *args):
        self.elements = args
    
    def __add__(self, other):
        result = []
        if isinstance(other, Vector):
            for i in range(len(self.elements)):
                result.append(self.elements[i] + other.elements[i])
        else:
            for i in range(len(self.elements)):
                result.append(self.elements[i] + other)        

        return Vector(*result)
    
    def __radd__(self, other):
        return self + other
    
    def __repr__(self):
        return f"Vector({self.elements})"
        
```

- لاحظ استعمال النجمة في فعل الإنشاء `*args` وذلك لتكون عدد العناصر غير مقيدة بحد
- وفي `__add__` لنا حالتان: ما إذا كان المدخل عبارة عن متجه أو عدد
- أما السطر الأخير منها: `return Vector(*result)` فعلامة النجمة تفك القائمة بحيث تمرر عناصرها كمعيَّنات منفصلة لفعل الإنشاء الذي تم تعريفه في الأعلى.

```{python}
v1 = Vector(10, 20, 30)
v2 = Vector(60, 50, 40)

v1 + v2
```

```{python}
v1 + 10
```

```{python}
10 + v1
```


## التركيب

لو كان عندنا تعريف نوع نقطة ..

```{python}
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def __repr__(self):
        return f"Point({self.x}, {self.y})"
    
    @staticmethod
    def distance(p1, p2):
        return ((p1.x - p2.x)**2 + (p1.y - p2.y)**2)**0.5
```


يمكننا **تركيب** شيء مكون من النقاط، وهو المضلَّع، على النحو التالي:

- يأخذ فعل الإنشاء `__init__` سلسلة من النقاط ويعيِّنُها لمتغير اسمه `points`
- يعرض فعل التمثيل `__repr__` كلمة `Polygon` وداخل أقواسها يضع تمثيل النقاط
- لاحظ أن فعل `perimeter` يُنتج قُطر المضلَّع؛ وهو مجموع المسافات بين النقاط المتوالية


```{python}
class Polygon:
    def __init__(self, points):
        self.points = points

    def __repr__(self):
        return f"Polygon({self.points})"

    def perimeter(self):
        n = len(self.points)
        s = 0
        for i in range(n):
            s += Point.distance(self.points[i], self.points[(i+1)%n])
        return s
```

لاحظ أن إنشاء المضلَّع يتطلَّب إنشاء نقاط. ولاحظ أننا جعلنا كل نقطة في سطر، لكنها في الحقيقة كلها عناصر لقائمة، وهو واضحٌ بملاحظة القوسين المربعين `[ ]`:


```{python}
poly = Polygon([
    Point(0, 0),
    Point(5, 0),
    Point(5, 5),
    Point(0, 5),
])
poly
```

والآن يمكن استعمال فعل حساب المحيط:

```{python}
poly.perimeter()
```

ولأن هذا المركَّب مكوَّن من أفراد، فنريده أن يُشابه **الأنواع الحاوية**، التي لها أفعال معيَّنة. وذلك ممكنٌ باستعمال الأفعال المخصصة:

- العد: `len(s)` يُسمَّى فعله: `__len__`
- الإشارة: `s[i]` يُسمَّى فعله: `__getitem__`
- التعيين: `s[i] = p` يُسمَّى فعله: `__setitem__`
- الحذف: `del s[i]` يُسمَّى فعله: `__delitem__`

انظر التوثيق الرسمي لبايثون حول [محاكاة أنواع الحاويات](https://docs.python.org/3/reference/datamodel.html#emulating-container-types) لمزيد من المعلومات.

```{python}
class Polygon:
    def __init__(self, points):
        self.points = points

    def __repr__(self):
        return f"Polygon({self.points})"

    def __len__(self):
        return len(self.points)
    
    def __getitem__(self, i):
        return self.points[i]

    def __setitem__(self, i, p):
        self.points[i] = p

    def __delitem__(self, i):
        del self.points[i]
    
    def perimeter(self):
        n = len(self.points)
        s = 0
        for i in range(n):
            s += Point.distance(self.points[i], self.points[(i+1)%n])
        return s
```

```{python}
poly = Polygon([
    Point(0, 0),
    Point(5, 0),
    Point(5, 5),
    Point(0, 5),
])
poly
```

والآن نستطيع عدَّ النقاط بالفعل المعروف `len` الذي بدوْره يستدعي الفعل المتعلق بالشيء `__len__` (فُهما سواء):

```{python}
assert len(poly) == poly.__len__()
len(poly)
```


بتعريفنا لفعل معرفة الطول، انسجم هذا النوع مع المجموعات مثل القائمة ومجموعة الفرائد والروابط والسلسلة النصية وغيرها.

وقد تتساءل: هل أي كلمة أكتبها بين الشرطتين السفليتين استطيع استعماله مثل `len`؟ والجواب: للأسف لا؛ وإنما هي أسماء مخصوصة.

أما قبول الفعل `len` لأنواع مغايرة عن بعضها فتسمَّى خاصيَّة **تعدد الأشكال** [(Polymorphism)](https://en.wikipedia.org/wiki/Polymorphism_(computer_science)): أي أن الفعل الواحد يقبل أنواع متعددة في الحقيقة لكنَّها تُظهر نفس السلوك الخارجي. بعبارة أخرى نقول:

- الظاهر: المدخلات والمخرجات واحدة
- الحقيقة: الخوارزمية (التفاصيل) قد تختلف اختلافًا جذريًّا !

وهذا كثيرٌ في البرمجيات.


ثم الإشارة برقم أو بشريحة:

```{python}
print(poly[0])
print(poly[-1])
print(poly[1:3])
print(poly[::-1])
```

ثم التعيين:

```{python}
poly[0] = Point(10, 10)
poly
```

وأخيرًا الحذف:

```{python}
del poly[0]
poly
```

تبين بهذا محاكاة بعض أفعال الحاويات الأساسية مثل `list` و`set` و`tuple` و`str` و`dict`. وقد تقدَّم معنا أن النقطة تستطيع محاكاة الأنواع العددية باستعمال الفعل المخصص للجمع `+` الذي هو `__add__`.

## التخصيص

يكثر استعمال **الطابور** كهيكل بيانات لحل مجموعة من المسائل بطريقة سهلة. نستعرض في هذا المثال كيفية تخصيص القائمة (`list`) ذات الأفعال الكثيرة من الحذف والإضافة والتعديل، لنوع له أفعال مختلفة لكنها مبنية عليها.

الطابور يُعرَّف بفعلين أساسيين:

- الإدخال من جهة
- الإخراج من الجهة المقابلة (بحيث يكون ما دخل أولاً هو الذي يخرج أولاً)

فهو بهذا أخص من القائمة التي تزيد عليه: الإشارة لعنصر برقمٍ وإمكان تعديله أو حذفه أو الإضافة في الوسط، وغيرها.

![[توضيح الطابور](https://en.wikipedia.org/wiki/Queue_(abstract_data_type))
](https://upload.wikimedia.org/wikipedia/commons/thumb/5/52/Data_Queue.svg/330px-Data_Queue.svg.png)

فهذا مثال لكتابة نوع الطابور:

```{python}
class Queue:
    def __init__(self):
        self.items = []

    def enqueue(self, item):
        """Add an item to the end of the queue"""
        self.items.append(item)

    def dequeue(self):
        """Remove an item from the front of the queue"""
        if not self.is_empty():
            return self.items.pop(0)
        return None

    def peek(self):
        """Return the item at the front without removing it"""
        if not self.is_empty():
            return self.items[0]
        return None

    def is_empty(self):
        """Check if the queue is empty"""
        return len(self.items) == 0
    
    def __len__(self):
        return len(self.items)

    def __repr__(self):
        """Return the underlying list representation"""
        return repr(self.items)
```

- لاحظ أن فعل الإنشاء `__init__` يعيِّن قائمة فارغة للشيء `self`
- ثم الفعل `enqueue` يتم بواسطة فعل القائمة `append`
- والفعل `dequeue` يتم بواسطة فعل القائمة `pop`
- وكذلك `peek` باستعمال الإشارة بالرقم للعنصر في الموضع `0`
- ثم `is_empty` بالنظر لطول القائمة بالفعل `len`

نختبر ذلك الآن:

```{python}

q = Queue()

q.enqueue(1)
q.enqueue(2)
q.enqueue(3)

print(q)
```

نزيل عُنصرًا:

```{python}
q.dequeue()
print(q)
```

هل يمكننا معرفة عدد العناصر؟:

```{python}
len(q)
```

صحيح أن القائمة أكثر قدرة (إذْ تتضمن عمليات أكثر)، إلا أن الطابور مخصص لخدمة وظيفة محددة.


## التسلسل

ومن الأنواع ما يتسليل مثل الشجرة، حيث فروعها قد تكون أصولاً لفروع أخرى. وهكذا يتسلسل الأمر حتى نصل إلى الأوراق / الثمار (القيم الأخيرة).

ومثل هذا له استعمالات كثيرة في هيكلة البيانات بأمثل بنية تكون فيها أسرع في البحث والإدراج والحذف ونحو ذلك. لكننا نكتفي بمثال نتأمله، نعرف فيه الشجرة الثنائية:

```{python}
class BinaryTreeNode:
    def __init__(self, value):
        self.value = value
        self._left = None
        self._right = None
        self._parent = None
    
    @property
    def left(self):
        return self._left

    @left.setter 
    def left(self, node):
        self._left = node
        if node is not None:
            node.parent = self

    @property
    def right(self):
        return self._right

    @right.setter
    def right(self, node):
        self._right = node
        if node is not None:
            node.parent = self
    
    @property
    def parent(self):
        return self._parent
    
    @parent.setter
    def parent(self, node):
        self._parent = node

    def __repr__(self):
        if self._left is None and self._right is None:
            return f"({self.value})"
        return f"{self._left} <-- [{self.value}] --> {self._right}"
```

**تخصيص عملية التعيين**:  لاحظ في المثال استعمال `.setter` بعد اسم المتغير `left` و`right` و`parent`؛ وهذا يعني أن تعيين القيمة للمتغير ستفضي إلى هذا الفعل، فمثلاً حين تقول: `tree.left = x` فإن هذا الفعل هو الذي سيتم تنفيذه. أما اسم المتغير الذي يحمل القيمة؛ فهو مختبئ عن طريق الشرطة المبتدأة: `_left` و`_right` و`_parent`. وبهذا يتبيَّن كيف لنا أننا نستطيع تخصيص عملية التعيين نفسها.

والهدف من التخصيص في مثالنا هذا أن نمنع تعيين فرعٍ أيمن أو أيسر لا يعرف أصله: `.parent`.

ثم ننشيئ الجشرة، ونصلها بفرعين:

```{python}
tree = BinaryTreeNode(10)
tree.left = BinaryTreeNode(5)
tree.right = BinaryTreeNode(15)

tree
```

ثم نفرع عن كل فرعٍ فرعين:

```{python}
tree.left.left = BinaryTreeNode(3)
tree.left.right = BinaryTreeNode(7)
tree.right.left = BinaryTreeNode(13)
tree.right.right = BinaryTreeNode(17)

tree
```

ويمكننا أن نصل من الفرع إلى الأصل باستعمال `.parent`، هكذا:

```{python}
x = tree.left.left
print('x:', x)
print('x.parent:', x.parent)
```

نكتفي بهذا القدر.


## المصطلحات

| العربية | الإنجليزية |
|------------------|---------------------|
| التجريد | Abstraction |
| التعميم | Generalization |
| التركيب | Composition |
| التخصيص | Specialization |
| التسلسل | Recursion |
| المضلَّع | Polygon |
| النقطة | Point |
| المتجه | Vector |
| الطابور | Queue |
| الشجرة | Tree |
| الشجرة الثنائية | Binary Tree |
| العقدة | Node |
| الفرع | Branch |
| الأصل | Parent |
| الورقة/الثمرة | Leaf |
| تعدد الأشكال | Polymorphism |
| هيكل البيانات | Data Structure |
| الأنواع الحاوية | Container Types |
| الروابط | Links |