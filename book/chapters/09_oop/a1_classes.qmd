# الأنواع

تتخذ بايثون نموذجًا في البرمجة يسمى **البرمجة الشيئية**؛ فالمتغيرات أسماء تشير لأشياء: فالرقم شيء، والنص شيء، والقائمة شيء، والمصفوفة شيء، وهلم جرا.

و**الشيء** هو ما تُسنَدُ إليه: صفات (وهي المتغيرات) وأفعال؛ ويندرج تحت نوع ما.

وأشملُ نوعٍ في بايثون هو الشيء (Object).

## تعريف النوع

يُعرَّف النوع بالكلمة `class` ويُبتدأُ غالبًا بتعريف فعل الإنشاء [`__init__`](https://docs.python.org/3/reference/datamodel.html#object.__init__) ليتم تعيين الصفات فيه بالإسناد للاسم `self` الذي يشير إلى الشيء المعين الذي يتم إنشاؤه الآن.

أما تعريف الأفعال فكالأفعال مثل `def move` بزيادة `self` في الابتداء.

تأمل المثال:
```{python}
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def move(self, dx, dy):
        self.x += dx
        self.y += dy
```

والآن نستطيع إنشاء معيَّنات من هذا النوع ونمرر القيم `x, y` بحسب ما هو موجود في الفعل المخصص للإنشاء: `__init__` على النحو التالي:

```{python}
p1 = Point(3, 4)
p2 = Point(7, 1)
```

نستعمل حرف النقطة `.`  بعد اسم المعيَّن للإشارة لصفةٍ أو فعل، نحو: `p1.x`:

```{python}
x_diff = abs(p1.x - p2.x)
y_diff = abs(p1.y - p2.y)
print(f'X difference is {x_diff} and Y difference is {y_diff}.')
```

وهذا مثال لطلب الفعل: `p1.move()`

```{python}
p1.move(4, 4)
print(p1.x, p1.y)
```

لو أردنا طباعة النقطة، كيف تظهر؟

```{python}
print(p1)
```

لتخصيص طريقة عرض الشيء، بحيث لو طبعناه أو ذكرناه في آخر السطر يظهر البشكل الذي نريده، يمكن تغيير الفعل المخصص [`__repr__`](https://docs.python.org/3/reference/datamodel.html#object.__repr__) أي: التمثيل .. هكذا:

```{python}
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def move(self, dx, dy):
        self.x += dx
        self.y += dy
    
    def __repr__(self):
        return f"Point({self.x}, {self.y})"
```

والآن إن عرفنا نقطة جديدة، ووضعناها على السطر لوحدها ، ستظهر لنا الإحداثيات، لا عنوانها الذاكري:

```{python}
p = Point(3, 4)
p.move(7, 6)
p
```

**الفعل الثابت** هو ما يُسنَدُ للنوع نفسه لا للأعيان. ويتم تثبيت الفعل بعلامة **المزيِّن** `@staticmethod`. لاحظ عدم وجود `self` في الفعل الجديد `distance` لأنه ثابت:

```{python}
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def move(self, dx, dy):
        self.x += dx
        self.y += dy
    
    def __repr__(self):
        return f"Point({self.x}, {self.y})"
				
    @staticmethod
    def distance(p1, p2):
        return ((p1.x - p2.x)**2 + (p1.y - p2.y)**2)**0.5
```

ويتم استدعاؤه بذكر اسم النوع والنقطة `.`:

```{python}
a = Point(0, 1)
b = Point(1, 0)

Point.distance(a, b)
```

كذلك يُجعل المتغير من النوع الثابت بتعيينه بمحاذاة غيره من الأفعال نحو ما فعلنا هنا بالمتغير `distance_type`. ولاحظ استعماله في الفعل `distance` في جملة `if-else` من غير استعمال `self` لأننا لا نشير إلى معيَّن:

```{python}
class Point:
    distance_type = 'euclidean'

    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def move(self, dx, dy):
        self.x += dx
        self.y += dy
    
    def __repr__(self):
        return f"Point({self.x}, {self.y})"
    
    @staticmethod
    def distance(p1, p2):
        if Point.distance_type == 'euclidean':
            return ((p1.x - p2.x)**2 + (p1.y - p2.y)**2)**0.5
        elif Point.distance_type == 'manhattan':
            return abs(p1.x - p2.x) + abs(p1.y - p2.y)
```

## التغليف (Encapsulation)

فكرة التغليف في البرمجة الشيئية هي إبعاد التفاصيل عن المستفيد.

في المثال التالي لا نريد للمستفيد أن يعدِّل على الرصيد `balance` إلا عن طريق الفعل `deposit` الذي يضمن أن الزيادة تكون موجبة.

ولاحظ أن استعمال `__balance` عرفٌ بين المبرمجين في بايثون لنقول أن الصفة مخفيَّة عن المستفيد، وأنه يجب أن لا يغيرها مباشرةً.

أما المزيِّن `@property` في الفعل `balance` فإنه يرجع بقيمة الصفة لا بالصفة نفسها. وذلك ليمنع التعديل عليها.

```{python}
class Account:
    def __init__(self, name, balance):
        self.name = name
        self.__balance = balance

    def deposit(self, amount):
        if amount <= 0:
            raise ValueError("must be positive")
        self.__balance += amount
        print('time of deposit:', '2027-07-07')

    @property
    def balance(self):
        return self.__balance
```

```{python}
a1 = Account('Adam', 100)
a1.balance
```

```{python}
a1.deposit(100)
a1.balance
```

ولو حاولت التغيير مباشرة فلن تستطيع (من غير الشرطتين السفليتين):

```{python}
#|error: true
a1.balance = 1000
```

## تصنيف الأنواع

تصنف الأنواع في البرمجة بطريقتين:

- **تصنيف اسمي**: حيث يتم التصريح بأن النوع فلان، يستمد من النوع فلان (وقد يتعدد). وتتم **بالوراثة** (Inheritance)
- **تصنيف عملي**: حيث يكون اعتبار التصنيف بحسب أفعال النوع. وتتم **بالواجهة** (Interface) وهو نوعٌ من **التركيب** (Composition)

## التصنيف الاسمي: الوراثة (Inheritance)

**الوراثة**: أن يندرج النوع تحت نوعٍ آخر؛ فهو يستمد منه ويزيد عليه صفةً أو فعلاً (أو أكثر).

وهو اسميٌّ لأن المعتبر هو أسماء الأنواع؛ فتقول:

- **الشكل** هو ما كان له محيط
- **المستطيل** شكلٌ (إذًا له محيط) و فوق ذلك فإنه له: طولًا وعرضًا ومساحة
- **والمثلث** شكلٌ (إذًا له محيط) و فوق ذلك فإنه له: ثلاثةَ أضلاعٍ ومساحة
- أما **المربع** فهو مستطيل (إذًا له محيط لأن المستطيل شكل، وله طول وعرض ومساحة): لكن عرضه وطوله متساويان

وهذه شجرة التوارث للأنواع المذكورة:

```{mermaid}
flowchart BT
  Shape
  Rectangle -- "is a" --> Shape
  Square -- "is a" --> Rectangle
  Triangle -- "is a" --> Shape
```

ويستعمل الإجراء `super()` للإشارة إلى النوع الأصل الذي استمدَّ منه. فإننا في فعل الإنشاء `__init__` في المخصص نطلب فعل الإنشاء `__init__` في الأصل.

```{python}
class Shape:
    def __init__(self, *sides):
        self.sides = sides
    
    @property
    def perimeter(self):
        return sum(self.sides)

class Rectangle(Shape):
    def __init__(self, width, height):
        super().__init__(width, height, width, height)
    
    @property
    def width(self):
        return self.sides[0]
    
    @property
    def height(self):
        return self.sides[1]
    
    @property
    def area(self):
        return self.width * self.height
    
class Triangle(Shape):
    def __init__(self, a, b, c):
        super().__init__(a, b, c)

    @property
    def a(self):
        return self.sides[0]
    
    @property
    def b(self):
        return self.sides[1]
    
    @property
    def c(self):
        return self.sides[2]
    
    @property
    def area(self):
        s = self.perimeter / 2
        return (s * (s - self.a) * (s - self.b) * (s - self.c))**0.5
    

class Square(Rectangle):
    def __init__(self, side):
        super().__init__(side, side)
```


```{python}
x = Triangle(10, 10, 10)
print("Triangle")
print("Perimeter:", x.perimeter)
print("Area:", round(x.area, 2))
print(f"Sides: a={x.a}, b={x.b}, c={x.c}")
```

```{python}
y = Rectangle(10, 20)
print("Rectangle")
print("Perimeter:", y.perimeter)
print("Area:", round(y.area, 2))
print(f"Sides: width={y.width}, height={y.height}")
```

وتجد في شجرة المجموعات @fig-collections-tree أن المجموعات المتغيرة نوع مخصص من الأنواع الجامدة:

- القائمة (`list`) مخصصة من التسلسل المتغير (`MutableSequence`) الذي هو من نوع التسلسل (`Sequence`).
- المجموعة (`set`) مخصصة من المجموعة المتغيرة (`MutableSet`) التي هي من نوع المجموعة (`Set`).
- القاموس (`dict`) مخصص من القاموس المتغير (`MutableMapping`) الذي هو من نوع القاموس (`Mapping`).

يفضل كثير من الممارسين التصنيف العملي على التصنيف الاسمي في أغلب الأحيان. لمرونته التي نحتاجها في التطوير المستمر للبرنامج، بينما التصنيف الاسمي جامد، وتخرق قواعده الصرامة بسرعة عند التغيير. وكثيرٌ مما ينظَّرُ له في التصنيف الاسمي يمكن تحقيقه بجملة `if-elif-else` أو جملة `match-case` وتنتهي القصة. ولذلك يجب استعماله في حالات قليلة يكون الاستمداد فيها من حيثية محددة: مثل التغيُّر (Mutability) كما في المثال السابق.

## التصنيف العملي: التركيب (Composition)

ومثاله في نفس شجرة المجموعات @fig-collections-tree هو نوع **الجمع** (`Collection`)، حيث له ثلاثة اعتبارات:

1. كونها تقبل العضويَّة: `x in s` وفعلها هو: `__contains__` تصنَّف أنها حاوية (Container)
2. كونها تقبل التكرار: `for x in s` وفعلها هو: `__iter__` تصنَّف أنها متوالية (`Iterable`)
3. كونها تقبل العد: `len(s)` وفعلها هو: `__len__` تصنَّف أنها محجَّمة (`Sized`)

وكذلك المتسلسلة (Sequence) تقبل العكس، وفعلها المخصص هو: `__reversed__`؛ فبهذا الاعتبار هي من النوع **القابل للعكس** (Reversible).
 
فمثلاً: أيُّ شيءٍ يعرِّفُ الفعل `len(sized)__ -> int__` فإنه ينتمي لنوع **ذوات الحجم** (`Sized`)، ونمثل لذلك بنوع المتجه في فضاء ثنائي الأبعاد حيث يتكون من عنصرين:

```{python}
class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __len__(self):
        return 2

v1 = Vector(10, 20)
len(v1)
```

ولاحظ عدم وجود ذكر اسم النوع `Sized` البتة، فليس بينهما علاقة مباشرة، ولكن تم تعريف ذلك الصنف المجرَّد لاحقًا لاعتبار جميع ما له الفعل `__len__` لمعرفة عدد عناصره.

ويكثر فيه المجرَّداتُ ذات الفعل الواحد أو الفعلين. لأننا نريد أشياء كثيرة تنتمي بحسب ما يكون فيها من أفعال.

## المعاملات (Operators)

تأمل التالي وتوقَّع النتيجة وعلل إجابتك. ما هي نتيجة:

الأول:

```python
[1, 2, 3] + [4, 5, 6]
```

الثاني:

```python
[1, 2, 3] * [4, 5, 6]
```

الثالث:

```python
[1, 2, 3] * 5
```

الرابع:

```python
[1, 2, 3] - 3
```
 
كل الذي سبق، قد تم تعريفه في بايثون لهذه الأنواع التي تراها بالتحديد عن طريق أفعال مخصصة. وإليك هذا الجدول للمعاملات المخصصة:

| مثال معامله | الفعل |
|----------|----------|
| `self + other` | `__add__` |
| `self - other` | `__sub__` |
| `self * other` | `__mul__` |
| `self / other` | `__truediv__` |
| `self // other` | `__floordiv__` |
| `self % other` | `__mod__` |
| `self ** other` | `__pow__` |

(وانظر [توثيق بايثون لمحاكاة العمليات الرقمية](https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types)).

فنستطيع تعريف نوع متجَّه على النحو التالي.

```{python}
class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def __repr__(self):
        return f"Vector({self.x}, {self.y})"
    
    def __add__(self, other):
        return Vector(self.x + other.x, self.y + other.y)
    
    def __sub__(self, other):
        return Vector(self.x - other.x, self.y - other.y)
    
    def __mul__(self, other):
        return Vector(self.x * other.x, self.y * other.y)
```

والآن يمكننا إنشاء متجهين وفعل العمليات المخصصة:

```{python}
v1 = Vector(1, 2)
v2 = Vector(3, 4)

v1 + v2
```

```{python}
v1 - v2
```

```{python}
v1 * v2
```

ماذا لو أردنا إضافة عمليات بين المتجه والعدد، نحو: `v1 + 3`? يتطلب ذلك إضافة شرط لفحص النوع:

```{python}
class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def __repr__(self):
        return f"Vector({self.x}, {self.y})"
    
    def __add__(self, other):
        if isinstance(other, Vector):
            return Vector(self.x + other.x, self.y + other.y)
        else:
            return Vector(self.x + other, self.y + other)
    
    def __sub__(self, other):
        if isinstance(other, Vector):
            return Vector(self.x - other.x, self.y - other.y)
        else:
            return Vector(self.x - other, self.y - other)
    
    def __mul__(self, other):
        if isinstance(other, Vector):
            return Vector(self.x * other.x, self.y * other.y)
        else:
            return Vector(self.x * other, self.y * other)
```

والآن يمكننا فعل العمليات المخصصة:

```{python}
v1 = Vector(1, 2)
v1 + 3
```

لكن لاحظ أنك لو وضعت العدد أولاً فسيظهر خطأ:

```{python}
#|error: true
3 + v1
```

هذا لأن عملية الجمع الآن لا تنظر في نوع العدد (`int`) ولا تجد فيه قبولاً للمتجه (فقد عرفناه للتو). ولحل هذه المشكلة توفر بايثون لكل فعل مخصص مقابل يبدأ بحرف `r` على النحو التالي:

| المعامل | الفعل |
|----------|----------|
| `other + self` | `__radd__` |
| `other - self` | `__rsub__` |
| `other * self` | `__rmul__` |

نعدل الفعل بحيث نضيف إليه المقابل:

```{python}
class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def __repr__(self):
        return f"Vector({self.x}, {self.y})"
    
    def __add__(self, other):
        if isinstance(other, Vector):
            return Vector(self.x + other.x, self.y + other.y)
        else:
            return Vector(self.x + other, self.y + other)

    def __radd__(self, other):
        return self + other
```

والآن كلاهما يعمل بشكل صحيح:

```{python}
v1 = Vector(1, 2)
3 + v1
```

```{python}
v1 + 3
```
