---
og:title: file_io
---

# الملفات

**لا يكون البرنامج مفيدًا من غير منفذٍ يُخرِج فيه نتائجه.**

رغم تعقيد الحواسيب اليوم، إلا أنها في الأصل راجعة إلى معمارية فون نويمان (1945م) التي سبق بيانها:

![نموذج فون نويمان للحاسب](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Von_Neumann_Architecture-ar.svg/450px-Von_Neumann_Architecture-ar.svg.png)

فتنقسم العمليات الحاسوبية إلى نوعين بحسب المنفذ الحقيقي لها:

الأول **عمليات حساب** (Computation): عمليات تنفذها وحدة المعالجة المركزية (CPU).
وذلك مثل الجمع والطرح، وفصل النصوص ودمجها، والشرط والتكرار، ونحو ذلك.

الثاني **عمليات إدخال وإخراج** (I/O): عمليات تنفذها الأجهزة المرتبطة به؛ بناءً على طلبه.
ومثالها مما رأينا:

1. الإجراء `input()` فإنها من جنس عمليات إدخال المعطيات؛ ولا بُدَّ لها من منفذ تستقبل منه البيانات؛ فكان هو **لوحة المفاتيح**.
2. الإجراء `print()` فإنها من جنس عمليات إخراج النتائج؛ ولا بُدَّ لها من مَنفَذ تدفع إليه مخرجاتها؛ فكان هو **نافذة البرنامج** (الشاشة).

ومن أجهزة الإدخال والإخراج (I/O) أيضًا:

- **أجهزة استشعار**: الحرارة والرطوبة والبعد والميل والاهتزاز والحركة ...إلخ.
- **أجهزة تحريك**: المفتاح والماطور  والصمام والطنان والسماعات ...إلخ.
- أجهزة غالبًا هي متصلة بالجهاز المكتبي: لوحة المفاتيح والمؤشر والطابعة والكاميرا والمايكروفون والشاشة ...إلخ.

وسننظر في كيفية قراءة وكتابة الملفات؛ فهي الشيء البرمجي الذي نتعامل معه لحفظ واسترجاع البيانات من **أجهزة التخزين** (Storage Devices).


## المسار

**المسار** هو سلسلة تحدد موقع الملف في النظام.
وهو على نوعين:

1. **مطلق** (Absolute): يحدد المسار بشكل كامل بدءًا من الجذر.
2. **نسبي** (Relative): يحدد المسار بالنسبة لموقع الملف الحالي.

وفواصل المسار شرطة مائلة:

- `/` تميل للأمام (اليمين) في عُرف أنظمة ويندوز
- `\`  تميل للخلف (اليسار) في عُرف أنظمة يونكس

والنقطة والنقطتان تدل على نسبية المسار:

- `.` للدليل الحالي (هنا)
- `..` للدليل الأب (صعود)

<div class="ltr">

| Path | Example |
| --- | --- |
| Absolute | `/home/adam/projects/xyz/scripts/analysis.py` |
| Relative | `.` |
| Relative | `..` |
| Relative | `./a/b` |
| Relative | `../a/b` |
| Relative | `a/b` |

</div>

يتم ترتيب الملفات شجريًّا.

ففي نظام ويندوز (Windows) تكون الشرطة خلفية (`\`):

```
C:\
└── Users
    └── Adam
        └── MyProject
            ├── data
            │   └── datafile.csv
            └── scripts
                └── analysis.py
```

فالحرف الأوَّل في الأعلى (`C:`) يمثِّل مكان جهاز التخزين. وإن رأيت `D:` أو `E:` فيعني أن الملفات تخزن في جهازين آخرين.

وقد تتساءل لماذا لم نبدأ بالحرف `A:` أو `B:`؟ وسبب ذلك تاريخي. وذلك أنَّهما كانا محجوزين للإشارة لجهاز تخزين عتيق يسمى القرص المرن (floppy disk)، ولم يعد يستعمل.

أما في أنظمة لينكس (Linux) وماك (MacOS) فإن الأصل يعبَّر عنه لا بحرف، وإنما **بالمسار الجذر**: `/` على النحو التالي:

```
/
└── home
    └── adam
        ├── projects
            └── myproject
                ├── data
                │   └── datafile.csv
                └── scripts
                    └── analysis.py
```

وتسمى الملفات المتضمنة لملفات أخرى: **دليل** (Directory). وهو الذي يعبَّر عنه فيما ترى في الواجهة الرسومية على شكل **مجلَّد** (Folder).

![Folder Icon](../../assets/Folder_Windows.png){width=64px}

فإذًا الملفات على نوعين:

1. **ملف** (File): وهو الذي يحوي بيانات نصية أو ثنائية. مثل:
    - `datafile.csv` ملف بيانات جدولية ![](../../assets/File_csv.png)
    - `analysis.py` ملف برنامج بايثون ![](../../assets/File_py.png)

2. **دليل** (Directory): وهو قائمة من الملفات والأدلة. مثل:
    - `data` دليل / مجلد البيانات ![](../../assets/Folder_Mint.png)
    - `myproject` دليل / مجلد المشروع ![](../../assets/Folder_Mint_2.png)

**صيغة الملف** (File Extension) تُعرَفُ بالحروف بعد آخر نقطة. مثل:

- `datafile.csv` صيغة `csv`
- `analysis.py` صيغة `py`

## قراءة وكتابة الملفات

يتم فتح الملفات لغرض القراءة أو الكتابة بالإجراء [`open()`](https://docs.python.org/3/library/functions.html#open) هكذا:

```python
f = open(file='salam.txt', mode='r')
content = f.read()
f.close()

print(content)
```

- تم تحديد مسار الملف بالنسبة للملف الذي نحن فيه
- تم تحديد **وضع القراءة**: `mode='r'` عند **الفتح** (`open()`)
- يتم **قراءة** المحتوى النصي للملف بالفعل: `.read()` المُسنَد إلى الملف `file`؛ ونعين قيمة ذلك في المتغير `content`
- يتم **إغلاق الملف** حتى يستطيع برنامج آخر أن يفتحه؛ إذ لا يجيز نظام التشغيل أن يُفتح الملف في نفس الوقت من برنامجين مختلفين
- تتم طباعة المحتوى الذي قُرئ

أما فتحُ الملف لغرض القراءة، فيتم بتحديد وضعية القراءة `open(mode='w')` على النحو التالي:

```python
content = """Salam everyone,
I hope you are enjoying the course,

Thank you.
"""

f = open(file='salam.txt', mode='w')
f.write(content)
f.close()

print(content)
```

انظر [مرجع قراءة وكتابة الملفات](https://docs.python.org/3/library/pathlib.html#reading-and-writing-files).

ولأن الفتح والإغلاق مقترنان في الموارد (Resources) المتنازع عليها (والذي يديرها نظام التشغيل)؛ فلا بد من الإغلاق بعد كل فتح.
ووضع في اللغة مفهوم [**مدير السياق**](https://docs.python.org/3/reference/datamodel.html#with-statement-context-managers) حيث يستعمل معها جملة `with`: فيكون ما بداخلها يعمل في سياق توفر المورِد، فإذا انتهت القطعة أغلِق المورِد تلقائيًّا. وبالمثال يتضح المقال:

```python
contents = ''
with open(file='salam.txt', mode='r') as f:
    contents = f.read()
print(contents)
```

لاحظ أننا لم نحتج لفعل الإغلاق: `f.close()` بل يتم ذلك بعد آخر جملة مضمَّنة داخل نطاق `with`.

## مكتبة المسار (`pathlib`)

```{python}
from pathlib import Path
```

تعنى **مكتبة المسار** ([`pathlib`](https://docs.python.org/3/library/pathlib.html)) بجميع ما يخص المسار: إنشائه والبحث فيه والاستعلام عن مدلوله والسير فيه.

::: {.callout-note}
يجدر بالذكر أن مكتبة `pathlib` جاءت متأخرة في إصدار `Python 3.4` لمعالجة الملفات بأسلوب البرمجة الشيئية (OOP)، بينما تستعمل مكتبة `os` التي سبقتها لأغراض متعددة فيما يخص نظام التشغيل (os = Operating System) من ضمنها خُصِّصَت `os.path` للتتعامل مع نظام الملفات إلا أنها كُتِبَت بأسلوب إجرائي تأسيًّا بلغة سي (C)، فهي منخفضة المستوى (تتعامل مباشرة مع `bytes` و `str`) بالمقارنة بالبرمجة الشيئية الأعلى في التجريد؛ **وهو ما نفضله**. انظر [مقارنة pathlib بوحدات `os` و `os.path`](https://docs.python.org/3/library/pathlib.html#comparison-to-the-os-and-os-path-modules).
:::

ويستعمل المسار `Path` مكان النص بعد إنشائه على النحو التالي:

```python
p = Path('salam.txt')

contents = ''
with open(file=p, mode='r') as f:
    contents = f.read()
print(contents)
```

## الدليل (Directory)

أحيانًا نريد التعامل مع مجلَّد يحوي مجموعة ملفات، بنقلها أو نسخها أو حذفها ونحو ذلك.

انظر [قراءة الأدلة](https://docs.python.org/3/library/pathlib.html#reading-directories).

لعرض قائمة الدليل، نستعمل المكرر الناتج من فعل `.iterdir()` ونكرر عليه، وهو بدورِه يُنتج في كل كرةٍ **مساراً** (`x`). وهذا المسار يُمكن التحقق من أنه يشير إلى دليل أو لا (`x.is_dir()`) على النحو التالي: 

```python
p = Path('.')
dirs = [x for x in p.iterdir() if x.is_dir()]
dirs
```

#### جرب

هل تريد أن تعرف حجم دليل التنزيلات (Downloads) في جهازك؟. لديك الفعل `stat()` للحصول على بيانات عن الدليل، والتي من ضمنها الحجم (`st_size`) هكذا:

```python
p = Path.home() / 'Downloads'
size = p.stat().st_size
print(size, 'bytes')
```

ثم هذا الإجراء لتحويل الوِحدة من البايت إلى الكيلو والميجا والقيقا:

```python
def format_size(size):
    size_kb = size / 1024
    size_mb = size_kb / 1024
    size_gb = size_mb / 1024
    if size_gb > 0.1:
        return f'{size_gb:.2f} GB'
    elif size_mb > 0.1:
        return f'{size_mb:.2f} MB'
    return f'{size_kb:.2f} KB'

print(format_size(size))
```

## البحث العام

يستعمل **البحث العام** (Globbing) لمطابقة عدة ملفات تحت مسار معيَّن [بنمط معيَّن](https://docs.python.org/3/library/pathlib.html#pathlib-pattern-language).

وهي لغة تنميط بسيطة جدًّا لا تقارن بتعقيد **التعبيرات النمطية** (Regular Expression) التي سبق ذكرها.
وإليك تطبيقًا تفاعليًّا يجمع لك جميع مفاهيمها: [globster](https://globster.xyz/).

مثلاً: نبحث في المسار `path/to/my/pictures/` عن جميع الصور (ذات الصيغة `.jpg`) في كل ما يتفرع عن ذلك المسار وإن نزل:

```python
total_size = 0
for p in Path('path/to/my/pictures/').glob('**/*.jpg'):
    total_size += p.stat().st_size

print('Total size:', total_size, 'bytes')
print('Total size:', format_size(total_size))
```

## المشي على جميع ملفات الشجرة

نستعمل الفعل [`.walk()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.walk) لطرق جميع فروع المسار:

```{python}
p = Path('../../datasets/example_root/')
for dirpath, dirnames, filenames in p.walk(top_down=True):
    print(dirpath)
    for file in filenames:
        print(f'\t{file}')
        # print('\tFULL PATH:', Path(dirpath) / file)
```

لاحظ أن `.walk()` يعطينا ثلاثة قيَم في كل كرة:

- `dirpath`: المسار الحالي للدليل.
- `dirnames`: قائمة بأسماء الأدلة التي يدل عليها.
- `filenames`: قائمة بأسماء الملفات التي يدل عليها.

لإظهار كامل المسار؛ أزل علامة التعليق `#` من السطر الأخير لتنفيذه.

مصادر أخرى

- إذا كنت تريد قراءة الملفات وكتابتها بشكل بسيط انظر: [`open()`](https://docs.python.org/3/library/functions.html#open).
- وإذا كنت تريد التعامل مع الملفات المؤقتة فانظر: [`tempfile`](https://docs.python.org/3/library/tempfile.html#module-tempfile).
- وكثير من عمليات التعامل مع الملفات والأدلة تجدها في: [`shutil`](https://docs.python.org/3/library/shutil.html#module-shutil).
