# الواجهة الرسومية (GUI)

يُستعمل مصطلح **واجهة المستخدم** (User Interface) كثيرًا في البرمجة. ويُقصدُ به الشيء الظاهر الذي يراه المستفيد من البرنامج ويتعامل معه. أما الحرف **G** في **GUI** فللدلالة على أنها بصرية أو رسومية أو مرئية (Graphical).

فإذا نظرنا للسيارة؛ فإن الواجهة تتألف من: المِقْوَد، ودوَّاستي الوقود والمكابح، وناقل الحركة، مما هو ظاهر ويتعامل معه السائق بشكل مباشر. وكذلك لوحة القيادة التي تعرِض درجة الحرارة ومؤشر الوقود والسرعة ونحو ذلك. لكن السيارة في الحقيقة تتكون من أشياء معقَّدة ومركَّبة لكنَّها مخفية وراء هذه البساطة.

وإذا تأملنا المشتري من السوق، فإنَّه يتعامل بشكل مباشر بالنظر إلى السلع التي أمامه، ويتكلم مع البائع ويشتري منه بواسطة النقد. فهذه الواجهة التي بينه وبين السلعة؛ فهو لا يحتاج ليشتريها أن يعرف عن خطوط الإنتاج والتوزيع وإدارة المصانع ونحو ذلك. فالأمر بسيطٌ بالنسبة للمشتري.

البرمجيات في الأصل ليس لها واجهة مرئية إلا بجهد خاصّ لإنشاء هذه الواجهة، واختلاف أنظمة التشغيل يجعل هذا الأمر صعبًا على المطورين، فالواجهة التي على نظام ويندوز لها طريقة تختلف عن واجهة لينكس، وتختلف عن واجهة الماك. وكذلك تختلف الواجهات في الأجهزة اللوحية.

ولدينا في تصميم الواجهة خيارات:

### واجهة سطح المكتب

إذا أردت إنشاء واجهة رسومية لأجهزة سطح المكتب، ودون الخروج من بايثون، فلديك مكتبة `tkinter` لكنها غير مناسبة للأجهزة اللوحية والكفية، وإنما للأجهزة المكتبية. وقد وَجدتُ توصية في توثيق بايثون بكتاب: [Tkinter الحديثة لمطوري بايثون المشغولين](https://tkdocs.com/book.html).

### واجهة المتصفِّح

إذا أردت إنشاء موقع إلكتروني بحيث تكون الواجهة صفحة على الشبكة، والنص البرمجي البايثوني خادم (server) من جهة أخرى عبر الشبكة. وهذا يلزم فيه تعلُّم لغة HTML و CSS وهما لغتان وصفيَّتان -وليستا أوامِرِيَّتيْن كبايثون- ولغةٌ ثالثة أوامريَّة هي جافاسكريبت (JavaScript). فيمكنك أن تبدأ بها هُنا على [منصة FreeCodeCamp](https://www.freecodecamp.org/learn/) التعليمية غير الربحية.

وقد ظهرت بدائل موجَّهة لإخفاء تفاصيل تلك اللغات الثلاث خلف واجهة برمجيَّة أبسط من خلال بايثون؛ وذلك مثل [Streamlit](https://streamlit.io/) و [Gradio](https://www.gradio.app/) وكذلك مؤخرًا [MonsterUI](https://monsterui.answer.ai/). فقد تكون هذه أفضل لمن لا يريد التعمُّق في تفاصيل صناعة الواجهة.

### واجهة تطبيقات الأجهزة الكفية واللوحية

إذا أردت إنشاء واجهة للأجهزة الجوَّالة الكفيَّة واللوحيَّة (وأيضًا المكتبيَّة)؛ فقد يكون الحل الأمثل لذلك استعمال [حزمة برمجيات فلتر (Flutter)](https://flutter.dev/) المطورة من قِبَل شركة غوغل (Google) التي تستعمل لغة دارت (Dart).

والخيار الآخر:

- أن تتعلم اللغة الخاصة [بالتطوير على أنظمة آندرويد](https://developer.android.com/codelabs/basic-android-kotlin-compose-first-app)
- وتتعلم لغةً أخرى [للتطوير على أنظمة iOS](https://developer.apple.com/ios/planning/)

### واجهة نافذة الأوامر

أما خيارات التطوير للمستخدمين المبرمجين، فمنها: واجهة نافذة الأوامر. فهي أسهلها من حيث البناء فلا تحتاج لقطع برمجية معقَّدة لبناء الواجهة الرسومية. ونحن ندرك أن ذلك ليس للمستخدم العادي، ولكن لمن لا يهاب الشاشة السوداء. وهي موضوع القسم التالي.

وقد تجد مكتبة [Textualize](https://www.textualize.io/) أكثر جاذبية للمستخدمين، إذ هي واجهة رسومية على نافذة الأوامر نفسها (Temrinal User Interface - TUI)

### واجهة التطبيقات البرمجية (API)

وقد تقدَّم معنا في باب الاستفادة من الخدمات البرمجية، استعمالها عن طريق مكتبة `httpx` و `geopy` كمثال.

**واجهة التطبيقات البرمجية** (API) هي الأكثر وجودًا في العالم، لأن تخاطب البرمجيات مع بعضها أكثر بكثير من تخاطبها مع المستخدمين. بل إنك بضغطة زر واحدة قد تتسبب في تشغيل 10 برمجيات تتخاطب حتى تحقق لك ما تريد.

ومن **أطر العمل البرمجية** (Frameworks) التي تستخدم لبناء الواجهات البرمجية:

- إطار [FastAPI](https://fastapi.tiangolo.com/)
- إطار [Flask](https://flask.palletsprojects.com/)
- إطار [Django](https://www.djangoproject.com/)

والفرق بين الإطار والمكتبة، أن الإطارَ يفرِضُ طريقة ترتيب ملفات المشروع، وعادةً ما يكون الإطار مجموعة مكتبات تحت غطاءٍ واحد.