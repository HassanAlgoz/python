# طبقة العَرض

ماذا بعد كتابة القطع البرمجيَّة من أفعال وأنواع وصفات ومجردات؟ هل هي في شكلها هذا جاهزة لخدمة المستفيد؟ وللجواب عن هذا السؤال نسأل فنقول: من هو المستفيد؟

قد يكون المستفيد هو مستخدم الانترنت عن طريق تطبيق المتصفِّح ، أو عن طريق التطبيق الخاص بالبرنامج.

![المستخدم العادي](../../assets/users/dev_to_user.png)

يُستعمل مصطلح **واجهة المستخدم** (User Interface) للدلالة على الشيء الظاهر للمستخدم والذي به يستفيد من البرنامج ويتعامل معه. فحرف **G** في **GUI** فللدلالة على أنها بصرية أو رسومية أو مرئية (Graphical). وهذا مثل قولهم: اللغة الطبيعية (Natural Language) ليفرقوا بينها وبين لغة البرمجة. فهنا خُصصت الواجهة بأنها رسومية لأن الواجهة البسيطة للبرامج في الأصل نصيَّة أوامريَّة .. وهي الشاشة السوداء.

وصناعة واجهة المستخدم الرسومية (GUI) تدخل فيه عوامل أهمها نظام التشغيل:

- واجهة الأجهزة المكتبية، أنظمة تشغيلها: Windows, Linux, MacOS
- واجهة الأجهزة الكفية واللوحية، أنظمة تشغيلها: Android, iOS

فكل نظام له تفاصيله الخاصَّة لبناء الواجهة الرسومية عليه؛ والعقبة التي تحاول تسهيلها بعض البرمجيات المبنية اليوم هي: كتابة الكود مرة واحدة لتظهر نفس الواجهة على جميع الأنظمة (أو حتى أن تتكيف بحسب النظام). وهذا مجال لا يزال الاختراع فيه قائمًا.

## واجهة الأجهزة المكتبية

فمكتبة `tkinter` هي في بايثون لكتابة قطعة الواجهة مرة واحدة لتعمل على جميع أنواع أنظمة الأجهزة المكتبية. وقد وجدتُ في توثيق بايثون إشارة إلى كتاب [Tkinter الحديثة لمطوري بايثون المشغولين](https://tkdocs.com/book.html). 

## واجهة متصفحي الشبكة

وقال آخرون لماذا لا نستفيد من كون الجميع يستخدم تطبيق متصفِّح المواقع لتصفّح الشبكة العالمية (الإنترنت). إذْ تظهر للمستخدمين بشكل موحَّد (إلى حدٍّ ما) على اختلاف أنظمة أجهزتهم: فالنصوص والروابط والأزرار والقوائم والشرائط والصور ونحوها .. تم العمل عليها في المتصفحات منذ بداية الإنترنت. وبهذا خرجت **تطبيقات المتصفِّح** (Web Applications) إلى جانب **المواقع** (Websites) المعروفة؛ إذْ تشاركها في الأدوات البرمجية.

فإذا أردت إنشاء موقع إلكتروني بحيث يمكن زيارة التطبيق بزيارة صفحته على الشبكة. فلغات البرمجة الأصلية في صناعة تلك الواجهة هي ثلاثة:  HTML و CSS وهما لغتان وصفيَّتان -وليستا أوامِرِيَّتيْن كبايثون- ولغةٌ ثالثة أوامريَّة هي جافاسكريبت (JavaScript). فيمكنك أن تبدأ بها هُنا على [منصة FreeCodeCamp](https://www.freecodecamp.org/learn/) التعليمية غير الربحية.

ثم تبني بإحدى المكتبات البرمجية الخاصة التي تجمع هذه اللغات الثلاثة. ومن أشهرها:

- [React](https://react.dev/)
- [Vue](https://vuejs.org/)

وقد ظهرت بدائل موجَّهة لإخفاء تفاصيل تلك اللغات الثلاث خلف واجهة برمجيَّة أبسط من خلال بايثون؛ وذلك مثل [Streamlit](https://streamlit.io/) و [Gradio](https://www.gradio.app/) وكذلك مؤخرًا [MonsterUI](https://monsterui.answer.ai/). فقد تكون هذه أفضل لمن لا يريد التعمُّق في تفاصيل صناعة الواجهة.

وفي كلا الحالتين؛ فإن النص البرمجي الذي تعلمنا كتابته في بايثون لن يضيعَ سدىً؛ فإنَّ البرمجيَّة التي تتصل بقاعدة البيانات والتي فيها التعقيد تكون في خادمٍ يقف وراء هذه الواجهة. وسيأتي الحديث عن ذلك إن شاء الله.

## واجهة تطبيقات الجوال

قد تكتفي بصناعة واجهة تطبيقك يمكن الوصول إليها بمتصفح الشبكة، فلا تحتاج لصناعة واجهة خاصَّة بنظام جوال معيَّن. إلا أنك قد تفقد بعض الميزات (وهذا أمر ليسَ تقنيًّا بَحتًا بل فيه جانب اقتصادي / تنظيمي متعمَّد). وهذا يضطرُّك لتخصيص قطعة برمجيَّة لأنظمة الجوال.

المسلك الأول: أن تكتب قطعتين:

- الأولى [قطعة خاصَّة بأنظمة آندرويد](https://developer.android.com/codelabs/basic-android-kotlin-compose-first-app)
- الثانية: [قطعة خاصَّة بأنظمة iOS](https://developer.apple.com/ios/planning/)

والمسلك الثاني: أن تكتب قطعة واحدة باستعمال [حزمة برمجيات فلتر (Flutter)](https://flutter.dev/) المطورة من قِبَل شركة غوغل (Google) التي تستعمل لغة دارت (Dart). وهدفها إنشاء واجهات التطبيقات على مختلف أنظمة التشغيل: الجوَّالة الكفيَّة أو اللوحيَّة أو المكتبيَّة.

## واجهة نافذة الأوامر

وتسمى **واجهة نافذة الأوامر** فهي صالحة للمبرمج أو التقني الذي ألِف استعمال الشاشة السوداء؛ لأنها تظهر عليها.

ومن ميزاتها أنها لا تتطلَّب جهدًا كبيرًا في صناعتها مقارنة بالواجهة الرسومية (GUI) لذا فإن كثيرًا من البرمجيات المفيدة تبدأ بهذا الشكل. وبعضها لا يفيد المستخدم العادي لأنها أدواة مخصوصة في البرمجة أو البرمجيات فتبقى هكذا. 

![المستخدم التقني](../../assets/users/dev_to_techie.png)

وفيها مسلكان:

- الأول: **واجهة نصيَّة تأخذ وتعطي بالكتابة**: فلها مكتبة [argparse](https://docs.python.org/3/library/argparse.html) وهي أشهر لسهولتها. وقد [أفردنا لها فصلاً](./a2_argparse.qmd).
- الثاني: **واجهة رسوميَّة على نافذة الأوامر النصيَّة** (Terminal User Interface - TUI) وهي أجمل. ومن أشهر مكتباتها [Textualize](https://www.textualize.io/).
