# معمارية الطبقات الثلاثة

يمكن تصوُّر البرمجيات بثلاثة طبقات (Three-tier Architecture) منفصلة:

1. **طبقة العَرض**: حيث الأشكال والألوان والحركات والأصوات والاستجابة
2. **طبقة المنطق**: حيث قراءة وتفسير وتغيير وحذف وإضافة الأشياء
3. **طبقة البيانات**: حيث تترجم الأشياء إلى بيانات في جهاز التخزين حقيقةً

![صورة توضح معمارية الطبقات الثلاثة من اليسار](../../assets/Three-tier-arch.png){fig-align="center"}

فطبقة العرض تسمى **الواجهة الأماميَّة** (Frontend) -مثلاً: تطبيق الجوال- وهي البرمجيات المتوجِّهةُ لتتخاطب مع المستخدم استجابة لحركة أصابعه على شاشة اللمس أو كبساته على المؤشر ولوحة المفاتيح. وذلك إما بالعناصر المرئية كالكلام المكتوب والأزرار والمزلاج، وكل ما يعرضه له وتراه عينه، أو المسموعة كالصوت عند الضغط أو السحب أو الصوت المتكلم، وكل ما نوجِّه سمعه له أو نسمعه من عنده).

وهذه الواجهة هي التي ترصُد حركة المستخدم لتستجيب لها كل البرمجيات المرتبطة.

وتتبعها طبقة المنطق التي تسمى **الواجهة الخلفيَّة** (Backend) -مثلاً: أي برنامج بايثوني كتبناه سابقًا- هي التي تستجيب للتعليمات التي فسرتها الواجهة الأماميَّة من حركات المستخدم، وتحوِّلها إلى أفعال في عالم الأشياء المنطقية.

وحين نريد تحقق نتائج المنطق على الواقع الفيزيائي فإننا نستعمل الطبقة الدنيا (الأقرب للحديد) وهي طبقات البيانات. وتختصُّ برمجيات **قاعدة البيانات** بهذا. فهي إحدى برمجيات الواجهة الخلفية؛ كُتِبَت بلغة دانية (مثل C) على أيدي مختصين ببنية الحواسيب المختلفة (خصوصًا بنية أجهزة التخزين). 

وتُفصَل هذه الطبقات **عادةً** في أجهزة مختلفة (وذات إمكانيات متفاوتة). فالواجهة الخلفية في جهاز مستقل يسمى **الخادم** (Server) وتسمى البرمجية التي في الواجهة الأمامية: **عميل** (Client)، فيتكون بهذا مصطلح **معماريَّة الخادم والعميل** (Client-server Architecture).

وسبب فصل الخادم عن العميل يعود لعدة اعتبارات:

إحداها: كون الخادم أسرَع من حيث المواصفات البنيويَّة من حيث سرعة المعالج وسعة الذاكرة. وكوْن قاعدة البيانات تحتاج لمساحة كبيرة لتخزين بيانات جميع المستخدمين.

ثانيها: الوصول لنفس البيانات من واجهات أماميَّة مختلفة. لأنَّها حُفِظَت في الخادم. فإنك تدخل بحسابك في الجهاز الكفي أو اللوحي أو المكتبي، فتجدها بياناتك مرتبطةً بجميعها.

ثالثها: كون مستودع البيانات مملوكًا للخادم؛ فيستفيد من هذه البيانات (غير الشخصيَّة) في تحليلها واستخراج الأنماط التي فيها وبناء نماذج إحصائيَّة أو بيانيَّة أو آليَّة متعلمة منها.

رابعها: تعدد خيارات لغة البرمجة فلا تقتصر -كما هو الحال في الواجهة الأمامية- على خيارات محدودة. فقد تكتب البرمجيات بلغة بايثون أو جو أو جافا أو ...إلخ.

خامسها: قد تكون البرمجيات الخلفيَّة شبكةً وليسَت برنامجًا واحدًا. وقد تتصل هذه الشبكة بواجهات خلفيَّة أخرى عن طريق الواجهات البرمجية (API).


فكل القطع البرمجية التي كتبناها كانت تعمل في طبقة المنطق. وعندما كتبنا وقرأنا ملفات؛ تعاملنا مع طبقة البيانات. وسيكون موضوع [الفصل القادم](../../chapters/14_cli/a1_ui.qmd) لطبقة العَرض إن شاء الله.
