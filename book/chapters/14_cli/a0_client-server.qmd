# الخادم والعميل

غالبًا ما تتكون البرمجيات المعاصرة من وجهين لعملة واحدة:

الأول: **الواجهة الأماميَّة** (Frontend) -مثلاً: تطبيق الجوال- وهي البرمجيات المتوجِّهةُ لتتخاطب مع المستخدم استجابة لحركة أصابعه على شاشة اللمس أو كبساته على المؤشر ولوحة المفاتيح. وذلك إما بالعناصر المرئية كالكلام المكتوب والأزرار والمزلاج، وكل ما يعرضه له وتراه عينه، أو المسموعة كالصوت عند الضغط أو السحب أو الصوت المتكلم، وكل ما نوجِّه سمعه له أو نسمعه من عنده).

وهذه الواجهة هي التي ترصُد حركة المستخدم لتستجيب لها كل البرمجيات المرتبطة.

الثاني: **الواجهة الخلفيَّة** (Backend) -مثلاً: أي برنامج بايثوني كتبناه سابقًا- هي التي تستجيب للتعليمات التي فسرتها الواجهة الأماميَّة من حركات المستخدم. وتُفصَل الخلفيَّة عادةً عن جهاز المستخدم لتكون في جهاز مستقل يسمى **الخادم** (Server) وتسمى البرمجية التي في الواجهة الأمامية: **عميل** (Client)، فيتكون بهذا مصطلح **معماريَّة الخادم والعميل** (Client-server Architecture).

وسبب فصل الخادم عن العميل يعود لعدة اعتبارات:

إحداها: كون الخادم أسرَع من حيث المواصفات البنيويَّة من حيث سرعة المعالج وسعة الذاكرة ومساحة التخزين.

ثانيها: الوصول لنفس البيانات من واجهات أماميَّة مختلفة. لأنَّها حُفِظَت في الخادم.

ثالثها: كون مستودع البيانات مملوكًا للخادم؛ فيستفيد من هذه البيانات (غير الشخصيَّة) في تحليلها واستخراج الأنماط التي فيها وبناء نماذج إحصائيَّة أو بيانيَّة أو آليَّة متعلمة منها.

رابعها: تعدد خيارات لغة البرمجة فلا تقتصر -كما هو الحال في الواجهة الأمامية- على خيارات محدودة. فقد تكتب البرمجيات بلغة بايثون أو جو أو جافا أو ...إلخ.

خامسها: قد تكون البرمجيات الخلفيَّة شبكةً وليسَت برنامجًا واحدًا. وقد تتصل هذه الشبكة بواجهات خلفيَّة أخرى عن طريق الواجهات البرمجية (API).

أما **قاعدة البيانات** (Database) فهي إحدى برمجيات الواجهة الخلفية؛ كُتِبَت على أيدي مختصين ببنية الحواسيب. ولها لغة تخاطب (مثل HTTP) خاصَّة بها، لكننا نستعمل المكتبة المخصصة لها التي تجرِّد جُزءًا كبيرًا من لغة التخاطب لتجعل التعامل معها سهلاً.

وتسمى **معمارية المستويات الثلاثة** (Three-tier Architecture) وستجدها في جميع التطبيقات، وقد لا تحتاج إلى غيرها:

![معمارية المستويات الثلاثة](../../assets/Three-tier-arch.png){fig-align="center"}


1. الواجهة الأمامية: لأخذ الأوامر من المستخدم وإظهار الاستجابة لها على التطبيق
2. الواجهة الخلفية: للمعالجة المنطقيَّة البحتة (بغض النظر عن الشكليات والألوان والحركات) واستخدام قاعدة البيانات والخدمات البرمجية الأخرى الداخلية والخارجية
3. قاعدة البيانات: لحفظ نتائج المعالجات على المدى الطويل

