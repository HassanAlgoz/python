# مقدمة

تمثل بايثون المسميات البرمجية بنموذج يُعرف بمصطلح **البرمجة الكائنية** أو البرمجة الشيئية (Object-oriented Programming). أي أنَّ تعريفنا للعمليات البرمجية يكون باعتبار الأصناف التي تعمل عليها. وحتى نأخذ نظرة عامة على اللغة فنستعرض أربعة أصناف محوريَّة في بايثون، وقد أفردنا لكل واحدٍ منها باباً:

1. **رقم** (numbers)
2. **متسلسلة متغيرة** (list)
3. **متسلسلة حروف** (string)
4. **ثنائي** (boolean)

فالأبواب هكذا: [باب الأعداد](03_numbers.qmd)، ثم [باب متسلسلة الحروف](04_strings.qmd) ، ثم [باب تدفق التحكم](05_control_flow.qmd) ثم [باب العمليات](06_functions.qmd) [باب المتسلسلات](07_sequences.qmd).

فمثلاً: لدينا أنواع مختلفة من الأعداد (العدد الصحيح، والعدد العشري، والعدد التخيلي) لكنها جميعًا تشترك في صفة العددية؛ وبهذا الاعتبار فهي من صنف الأعداد (numbers) فتقبل عمليات الجمع والطرح والقسمة ، وتقبل عمليات المقارنة (أكبر من ، وأصغر من ، والمساواة).

وهذه أشياء كما ترى: (`1` و `2.5` و `"ABBBC"` و `"9665"`) كُلٌّ ينتمي **لنوع** محدد. فالأوَّل عدد صحيح، والثاني عدد عشري، والثالث متسلسلة أحرُف. لكن ماذا عن الرابع؟ ... لاحظ وجود علامتي التنصيص (`"`) وهي علامة تحدد أنها متسلسلة أحرف وليست عددًا. 

ونستعرض الآن مثالاً:

```{python}
x = 5
y = 10
z = x + y
print(z)
```

1. في السطر الأول: قمنا بتعيين **القيمة** `5` **لمعرف** `x`
2. في السطر الثاني: مثل الأول لمعرف `y`
3. في السطر الثالث: تعيين ناتج **عملية الجمع** (`+`) بين عددين.
4. في السطر الرابع: `print` هي عملية تقدَّم تعريفها ضمن المكتبة الأساسية في حزمة البايثون، تعمل هنا على الكائن العددي `z` ليكون حاصلها: كتابة قيمة العدد على الشاشة.

لاحظ أن علامة الـ(`=`) ليست تعني مساواة الطرفين كما في المعدالات الرياضية. وإنما هي **عمليَّة تعيين** (كغيرها من العمليات البرمجية) تقوم بإسناد قيمة لمسمى (وهو `x` هنا)؛ كأنما تُخزِّن القيمة في صندوقٍ معنوَن بالاسم `x`. وقل مثل ذلك في `y` وكذلك في `z`.

وتستطيع أن تقول إن ما قبل علامة التعيين (`=`) أصبح اسمًا مُعرَّفًا يُشير إلى شيء. وما بعد العلامة هو الشيء: وله صفتان أساسيتان: القيمة (`5`) والنوع (`int`) وتعني صِنف الأعداد الصحيحة (Integers).

استخدم عملية `type(x)` لمعرفة نوع القيمة `x`:
```{python}
print(type(10))
```

```{python}
print(type(100 + 200))
```

تعلمنا كيف نخزن قيمة عدد في `x` وقيمة عدد آخر في `y`. لكن لو أردنا التعامل مع مجموعة أعداد معًا لنحسب جمعها أو متوسطها أو غير ذلك من العمليات البسيطة والمعقدة، فإن لغة بايثون تستطيع التعبير عن ذلك. بل إن الشيء المعبر عن ذلك هو: مجموعة مرتَّبة من الأشياء (وليسَ فقط الأعداد). 

ففي المثال التالي تعيين شيئين من نوع **متسلسلة متغيرة** تحوي أعدادًا صحيحة. ثم إجراء عملية محددة بعلامة `+` بين المتسلسلتين. ولاحظ أن المعرفات يُمكن أن تكون حروفًا كثيرة وليس شرطًا أن تكون كالمثال السابق حرفًا واحدًا كـ(`x`). بل يحبذ استعمال أسماء دالة على وظيفة الشيء الذي نعرفه.


```{python}
one = [10, 20, 30]
two = [40, 50, 60]
combined = one + two
print(combined)
```

لاحظ أن النتيجة هي **إضافة** المتسلسلة الثانية للمتسلسلة الأولى لتصبح متسلسلة جديدة فيها العناصر الأولى تتبعها الثانية عناصر الثانية. وقد تتساءل لماذا لم تكن النتيجة جمع الأعداد المتقابلة؟ والإجابة هي: أنها عُرِّفَت هكذا هذه العملية للأشياء التي من نوع متسلسلة.

كما يوجد لنوع المتسلسلة (سواءً المتغيرة والثابتة) عمليات خاصة مثل `len` التي ناتجها عدد عناصرها؛ وتستعمل على النحو التالي:

```{python}
x = len(one)
print(x)
```

نقرأ القطعة السابقة فنقول: إن عمليَّة `len` تأخذ قيمة المعرف `one` (أو نقول: إننا نُمرِّر قيمة المعرف)؛ لتعطينا عدد العناصر (الذي هو عدد صحيح)؛ فنُعيِّن تلك القيمة بعلامة (`=`) للمعرف `x`. ثم نطبع ذلك باستخدام عملية `print`.

ولسنا بحاجة للمعرف `x` إذ يُمكن كتابة العملية على ناتج العملية على النحو التالي:

```{python}
print(len(one))
```

ونأتي الآن لنوع آخر يكثر استخدامه وهو **متسلسلة الأحرف** وهي في الحقيقة صنف مستمد من **المتسلسلة** (سنتعلم كيفية الاستمداد في [باب: الأصناف](14_classes.qmd)). فهي **تستمد** منها خصائصها (مثل أنها تقبل الدمج بعلامة `+`) وتضيف فوق ذلك عمليات إضافية خاصة للتعامل مع الأحرف. ولكثرة استخدامها جُعل لها في اللغة علامة التنصيص (`"`) لتحدد عناصرها.

انظر هذا المثال الذي نعرف فيه `message` ليشير إلى متسلسلة أحرف. ثم نستخدم نفس العملية التي استخدمناها مع المتسلسلة التي كانت تحتوي على أرقام لمعرفة عدد العناصر (`len`) ونخزن ذلك في مُعرَّف `length` ثم نقوم بطباعته عن طريق عملية `print`.

```{python}
message = "Adam"
length = len(message)
print(length)
```



وللعمليات شكلٌ آخر تستخدمه لغات البرمجة الشيئية، وهو أن توضَع علامة نقطة `.` بعد الشيء ثم كتابة اسم العمليَّة على النحو التالي:

```{python}
message = "hello adam"
up = message.upper()
print(up)
```

وقد تتساءل عن الأقواس الفارغة فتقول: ما هي مدخلات هذه العملية؟ فنقول: في البرمجة الشيئية: هذه العبارة تجعل العامل الأوَّل (المُدخل الأوَّل) لها هو ذات الشيء المذكور. ثم ما تضعه في الأقواء (إن وُجِد) يكون مُدخلاً ثانيًا وثالثًا وهكذا.

**ماذا يترتب على اختلاف الأنواع؟**. يترتب على ذلك تعيين:
1. العمليات الممكنة بينها
2. والعمليات الممكنة فيها

ولنستعرض العمليات بينها، ثم نستعرض العمليات فيها. فنقول: علامة `+` بين عددين تشير لعملية الجمع بينهما:


```{python}
x = 20 + 20
print(x)
```

بينما تعريف علامة `+` بين متسلسلتين من الحروف (وذلك لوجود علامة التنصيص `"`)، فتكون عملية دمج:

```{python}
y = '20' + "20"
print(y)
```

ملاحظة: التنصيص المفرد (`'A'`) والتنصيص المزدوج (`"A"`) متكافئة في بايثون.

أما إن حاولت وضع علامة (`+`) بين شيئين لم تُعرَّف العملية هذه بينهما فإن البرنامج سيقف برسالة خطأ، تفيد بأن العلامة غير مُعرَّفة بين هذين الشيئين (هو لم يجد أنها جمع ولا دمج). لاحظ هنا أن العملية بين عدد ومتسلسلة نصية:


```{python}
#| error: true
print(x + y) 
```

فالرقم `20` هو قيمة عددي (`int`) يُمكن جمعه وطرحه وقسمته ونحو ذلك. أما قيمة `"20"` فهي متسلسلة حروف (`str`) لا تتيح الحساب الرياضي ، وإنما يمكن دمجها وفصلها ونحو ذلك؛ لأنها في الحقيقة حرفان وليست عددًا.

وإن أردت التحويل من نوع إلى نوع، فيمكنك ذلك عادة باستعمال عملية لها نفس اسم ذلك النوع:

```{python}
x = 40
y = "2020"
z =  int(y)
print(type(x))
print(type(y))
print(type(z))
print(x + z)
```

فتبين بذلك قولنا أن النوع يحدد العمليات بينها. فماذا عن قولنا إنه يحدد العمليات فيها؟ نقصد بذلك العملية التي تأخذ عاملاً واحدًا مثل: `str.uppercase()` وقد تقدَّم الكلام عنه.

تنفيذ العملية يتسلسل بحسب ورودها، ولذلك فإن التعيين اللاحق ينسَخ (يمحو) التعيين السابق له. فمثلاً:

```{python}
x = 5
x = 10
print(x)
```


ونعرج سريعًا على نوع مهم يستخدم في القطع البرمجية المشروطة بتحقق قيود معيَّنة. مثلاً عبارة: "إذا كان العدد `x` أكبر من العدد `y` فافعل كذا". وهو النوع الثنائي، وسمي بذلك لأن له قيمتين لا ثالث لهما. إما صفر أو واحد.


```{python}
b = 5 >  10
if b:
    print("never")
```

وسيأتي الحديث عنه في موضعه إن شاء الله.


## تنبيهات في تسمية المعرَّفات

التنبيه الأول: لغة بايثون تعتبر الحرف الصغير والكبير مختلفان؛ وبالتالي فإن هذين معرفيْن مختلفين:

```python
my_variable = 5
My_Variable = 10
print(my_variable)
```

التنبيه الثاني: تتوقع قواعد لغة بايثون أن يبتدئ اسم المُعرَّف بحرف، لا رقمٍ ولا علامة:

```{python}
#|error: true
2my_variable = 5
```

التنبيه الثالث: يمنع استعمال **الكلمات الأصلية** في اللغة مثل:

```{python}
#| error: true
class = 5
True = 1
break = True
```
وإليك قائمة بهذه الكلمات:

```
False      await      else       import     pass
None       break      except     in         raise
True       class      finally    is         return
and        continue   for        lambda     try
as         def        from       nonlocal   while
assert     del        global     not        with
async      elif       if         or         yield
```


التنبيه الرابع: توجد كلمات هي مُعرَّفات للأشياء والعمليات مضمَّنة في المكتبة الأساسية التابعة لحزمة بايثون (Standard Library). ويكثر استعمالها لذا يُكره إعادة تعريفها (مع أن اللغة تسمح به): 

```python
sum = 5
max = 10
list = [10, 20, 30]
```

لأن ذلك سبب لنوع من أخطر أنواع الأخطاء البرمجية وهي **الأخطاء الصامتة**  (Silent Errors)، ويتمثل ذلك في أمرين:

1. أن لا تظهر رسالة الخطأ
2. تظهر رسالة خطأ غير دالة على السبب الحقيقي للخطأ

التنبيه الخامس: يحبذ تسمية المعرَّفات بما يدل على وظيفتها. مثلاً:

```{python}
rate = 50
hours_per_day = 6
days = 5
pay = rate * hours_per_day * days
print(pay)
```

هو أوضح بكثير من كتابتها هكذا (ولو كانت النتيجة نفسها):

```{python}
r = 50
hpd = 6
d = 5
p = r * hpd * d
print(p)
```

النتيجة واحدة لكن الكود الثاني أسهل قراءة وفهمًا.

## خلاصة الدرس

في هذا الدرس، تعلمنا الأساسيات التالية:

1. كيفية تعيين القيم للمعرفات باستخدام علامة التعيين (`=`).
2. **الأنواع الأساسية**: الأعداد الصحيحة (`int`)، المتسلسلات المتغيرة (`list`)، ومتسلسلات الأحرف (`str`)، والعلاقة بينها، وأخيرًا النوع الثنائي (`bool`).
3. عرفنا ما هي العمليات: ومثلنا بالجمع (`+`)، والطباعة (`print`)، ومعرفة النوع (`type`)، ومعرفة عدد العناصر (`len`).
5. رأينا كيف أن علامة (`+`) في الأرقام تشير إلى عملية الجمع، بينما تشير لعملية الدمج بين المتسلسلات.
6. علمنا أن متسلسلة الأحرف نوعٌ مستمد من المتسلسلة مع إضافة عمليات خاصة مثل `upper`.

هذه المفاهيم تشكل الأساس لفهم لغة بايثون وكيفية التعامل مع البيانات والعمليات البرمجية المختلفة. في الدروس القادمة، سنتعمق أكثر في هذه المفاهيم ونستعرض المزيد من الأمثلة والتطبيقات العملية.
