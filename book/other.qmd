## How to read input from command line arguments?
- `sys.argv`
- `argparse`


## What are environment variables and how to read input from environment variables?
- `os.environ`
- `python-dotenv`

### Void functions

A **void function** is one that doesn't have a `return` statement, and thus will return `None` by default. Such functiosn usually make their output accessible through **side effects** (like printing to the console, writing to a file, etc.).

```{python}
def do_some_work(x):
    # ... some code that does something with x
    f = open('output.txt', 'w')
    f.write(str(x))
    # return None is implicitly added at the end of the function
```

### *Args and **Kwargs

```{python}
def my_function(a, b, *args):
    print(a, b)
    for arg in args:
        print(arg)

my_function(1, 2, 3, 4, 5, 6, 7, 8)
```

```{python}
def my_function(a, b, *args, **kwargs):
    print(a, b)
    for arg in args:
        print(arg)
    for key, value in kwargs.items():
        print(key, value)

my_function(1, 2, 3, 4, 5, six=6, seven=7)
```

### Special parameters

For readability and performance, Python gives control to restricts the way arguments can be passed so that a developer need only look at the function definition to determine if items are passed by position, by position or keyword, or by keyword.

Here we demonstrate the three types of parameters:

```
def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):
      -----------    ----------     ----------
        |             |                  |
        |        Positional or keyword   |
        |                                - Keyword only
         -- Positional only

```

- Parameters before the `/` marker are positional-only: `pos1` and `pos2`.
- Parameters after the `/` maker may be positional or keyword: `pos_or_kwd`.
- Parameters after the `*` marker are keyword-only: `kwd1` and `kwd2`.

Here is an example:

```{python}
def func(a, b, /, c, d, *, e, f):
    return a + b * c - d / e


func(1, 2, 3, d=4, e=5, f=6)
```


Here, `a` and `b` are positional-only. And since `c` and `d` are after `/` and before `*`, they can be passed by position or keyword. `e` and `f` are after `*`, so they can only be passed by keyword.

Notice that `c` is set by position while `d` is set by keyword. `e` and `f` are set by keyword only.

You may not write everyday functions in such a way. However, it's good to know that Python provides this level of control such that when you use libraries written by other developers, you can easily understand how to use them.

You can see more examples at the [official Python documentation](https://docs.python.org/3/tutorial/controlflow.html#function-examples).


أؤمن بالرجوع للمصادر الأساسية في المسائل الأصلية في اللغة البرمجية. ولا بأس أن نرجع للمصادر الثانوية في المسائل الفرعية. لا يركز الكتاب على حفظ الكود البرمجي وإنما على معرفة مظان الوصول إليه. ولذلك كثيرًا ما يعزوا الكتاب إلى [الصفحات المرجعية في موقع بايثون](https://docs.python.org/3/) فهي المصدر الأوَّلي الذي يجب أن يُحتكم إليه. هذا لا يعني اطراح المصادر الثانوية ولكن تقديم الأوليَّة أولاً عند البحث عما هو أصلي؛ أما ما يتفرع عنه فلا بأس.

::: {.callout-note}
ملاحظة جانبية: قِس على هذا المدخلات الأخرى وكذلك المُخرجات. فعند أي مُدخَل (سواءً ملفٌّ يُقرأ ، أو بيانات قادمة من الشَّبكة أو من قاعدة بيانات محليَّة) فإنه يقطَعُ تدفُّقَ البرنامج لحين يتم تسجيله في الذاكرة (RAM) ، ثم يُتِمُّ البرنامج سيرَه. وكذلك الأمر عند أي عملية إنتاج مُخرجات؛ فهي عمليَّة كتابة تحتاج من البرنامج أن يجعل التحكم في يدِ نظام التشغيل لأنه المخوَّل بعمليَّات كهذه. ثم قد يعود على البرنامج برسالة خطأ، أو بالتمام إن تم كل شيء على أحسن حال. وهذا تفصيله يكون في تعدد خيوط التنفيذ (Multi-processing).
:::

دعونا نجعل دالتنا أكثر اكتمالاً بإضافة ميزة الترجمة. سنقوم بتعريف قاموس يربط قوة كلمة المرور بلغات مختلفة.

```{python}
LANGUAGE = 'AR'

translation = {
    'Weak': {
        'AR': 'ضعيفة',
        'CN': '弱'
    },
    'Strong': {
        'AR': 'قوية',
        'CN': '强'
    }
}

def check_password_strength(password):
    minimum_length = 8 #<1>
    if len(password) < minimum_length: # <2>
        return translation['Weak'][LANGUAGE] # <3>
    else:
        return translation['Strong'][LANGUAGE]
```
1. `minimum_length` هو متغير محلي للدالة: **متغير محلي**.
2. يمكن للدالة الوصول إلى `len()` لأنه مدمج. ويمكنها الوصول إلى `minimum_length` لأنه متغير محلي.
3. يمكن للدالة أيضًا الوصول إلى `LANGUAGE` و `translation` لأن كلاهما **متغيرات عالمية** (ليست داخل أي دالة).

إذا حاولنا الوصول إلى المتغير المحلي `minimum_length` خارج الدالة، سنحصل على خطأ:

```{python}
#| error: true
print(minimum_length)
```

إذا كنت تفضل التذكيرات، فإن **LEGB** (محلي، محيط، عالمي، مدمج) هو تذكير جيد لتحديد أي متغير يتم الوصول إليه عند مواجهة اسم. يبحث عن المتغيرات بالترتيب التالي:

1. النطاق المحلي: كتلة كود الدالة الحالية.
2. النطاقات المحيطة: أي دوال أو حلقات تحيط بالدالة الحالية.
3. النطاق العالمي: مساحة الأسماء العالمية للوحدة. أي الكود الذي ليس داخل أي من الدوال.
4. الأسماء المدمجة: الدوال والمتغيرات المعرفة مسبقًا في بايثون.

انظر [9.2.1. مثال على النطاقات ومساحات الأسماء | وثائق بايثون](https://docs.python.org/3/tutorial/classes.html#scopes-and-namespaces-example) لمزيد من التفاصيل حول كيفية الرجوع إلى النطاقات ومساحات الأسماء المختلفة، وكيف تؤثر [`global`](https://docs.python.org/3/reference/simple_stmts.html#global) و [`nonlocal`](https://docs.python.org/3/reference/simple_stmts.html#nonlocal) على ربط المتغيرات.

انظر: https://docs.python.org/3.13/tutorial/classes.html#scopes-and-namespaces-example
> خاصية فريدة في بايثون هي أنه – إذا لم يكن هناك تصريح `global` أو `nonlocal` قيد التنفيذ – فإن التعيينات للأسماء دائمًا تذهب إلى النطاق الأعمق.
> يمكن استخدام تصريح `global` للإشارة إلى أن المتغيرات المعينة تعيش في النطاق العالمي ويجب إعادة ربطها هناك؛ يشير تصريح `nonlocal` إلى أن المتغيرات المعينة تعيش في نطاق محيط ويجب إعادة ربطها هناك.


## المكتبات

لاستخدام مكتبة [`math`](https://docs.python.org/3/library/math.html) يمكن استيرادها بعبارة `import`:

```{python}
import math

print(math.sqrt(16))
print(math.pow(2, 4))
```

قد قام آخرون بإنشاء عمليات وجعلوا حزمهم متاحة. على سبيل المثال، تُستخدم حزمة `numpy` لإجراء العمليات العددية على المصفوفات متعددة الأبعاد (N-dimensional arrays). لاستخدامها، نحتاج أولاً إلى تثبيتها باستخدام `pip`:

```bash
pip install numpy
```

مدير الحزم PIP هو أداة لتثبيت الحزم من فهرس حزم بايثون (Python Package Index - PyPI). هنا صفحة [حزمة numpy](https://pypi.org/project/numpy/).

بعد ذلك نستطيع استعمالها بعد استيرادها:

```{python}
import numpy as np

mat1 = np.array([
    [1, 2],
    [3, 4]
])

mat2 = np.array([
    [5, 6],
    [7, 8]
])

print(np.dot(mat1, mat2))
```



```{python}
!pip install geopy
```

```{python}
from geopy.distance import geodesic
from geopy.geocoders import Nominatim

geolocator = Nominatim(user_agent="exercise")

dammam_location = geolocator.geocode("Dammam, Saudi Arabia")
bahrain_location = geolocator.geocode("Bahrain")

dammam_coords = (dammam_location.latitude, dammam_location.longitude)
bahrain_coords = (bahrain_location.latitude, bahrain_location.longitude)

# Calculate the distance
distance = geodesic(dammam_coords, bahrain_coords).kilometers
print(f"The distance between Dammam and Bahrain is {distance:.2f} kilometers.")
```

وهي معظم هياكل البيانات في المكتبة الأساسية: كالمتسلسلة المتغيرة (list)، ومتسلسلة الحروف (str)، والمتسلسلة الثابتة (tuple)، وكذلك غير المتسلسلات كالقاموس (dict)، وكائنات الملفات، وأي كائن لديه عملية: `__iter__` أو عملية `__getitem__` على طريقة المتسلسلة.


#### Exercise

Create a dictionary of fruits and prices:

- Add a new item to the dictionary: `bananas` with a price of `3.5`.
- Using the `update` method, add a new item to the dictionary: `apples` with a price of `4.5`.
- Using the `update` method, change the price of `bananas` to `5.5` and also add `hazelnuts` with a price of `12.5`
- Using the `pop` method, remove the item `bananas` from the dictionary.

```{python}
#| tags: []
fruits_and_prices = {
  "apple": 1.00,
  "orange": 2.50,
  # Add your own fruits and prices here ...
}
```

#### Exercise

Print the value of key `"history"` from the below by traversing the nested dictionary one key at a time.

```{python}
my_dict = {
    "class": {
        "president": {
            "name": "Malik",
            "marks": {
                "physics": 70,
                "history": 80
            }
        }
    }
}
```


#### تمرين

اكتب برنامجًا يأخذ سلسلة نصية ويطبعها بترتيب عكسي.

```{python}
# try it
```

#### تمرين

اكتب برنامجًا يأخذ سلسلة نصية ويطبع كل حرف ثاني في السلسلة النصية. مثال: `abcdef` -> `bdf`

```{python}
# try it
```


#### تمرين

عد عدد الأحرف `a` في السلسلة النصية `Adam Ibraheem`. تلميح: استخدم طريقة `.count()`.

```{python}
# try it
```
