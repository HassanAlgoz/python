---
title: النصوص
jupyter: python3
---

**النص** ([`str`](https://docs.python.org/3/library/stdtypes.html#str)) تسلسل من الأحرف. وإذا أردنا أن نكون أكثر دقَّة فنقول: هو تسلسل من أرقام يونيكود (Unicode) التي تمثل الأحرف، وهو ترميز عالمي يحوي جميع أحرف اللغات بالإضافة إلى علامات الترقيم ورموز الإموجي وغيرها.

النص يطول ويقصر من الحرف الواحد إلى الكلمة إلى الجملة إلى آخره:

- محادثات وسائل التواصل الاجتماعي
- رسائل البريد الإلكتروني
- مقالات
- كتب
- موسوعات

وكذلك يمكن أن تكون له بنية حُرَّة كما هو حال اللغات البشرية وقد يكون له قالب قابت يحدد بنيته مثل: `XML`, `HTML`, `JSON`, `CSV`، وغيرها. وتلك تستخدم .لتمثيل البيانات بصيغة نصية **مفهومة للبشر وللآلة**. سيأتي الحديث عنها إن شاء الله.

فتطبيقات العمل على النصوص كثيرة ومتنوعة كثيرة مثل: البحث، الاستبدال، العد، الفهرسة، القولبة، التصنيف، الترتيب، ...إلخ.

## تعريف النصوص

قيمة النص تحدد:

- بعلامة اقتباس مفردة: `'السلام عليكم!'`
- بعلامة اقتباس مزدوجة: `"السلام عليكم!"` وليس بينهما فرق تمامًا.
- بعلامة اقتاس مكررة ثلاثة مرات: `"""السلام عليكم!"""` وذلك للنصوص التي تمتد على أكثر من سطر.

مثلاً:

```{python}
name = 'Adam'
address = "Riyadh, Saudi Arabia"
```

ولاحظ هذا النص الذي يبتدئ في السطر الأول ويتمد لأربعة أسطر:

```{python}
message = """Salam everyone,
I hope you are enjoying the course,

Thank you.
"""
print(message)
```

ولكون النص تسلسلاً فإنه يدعم جميع عمليات التسلسل السابقة ذكرها (انظر [فصل التسلسل](06_sequences.qmd)). وهو فوق ذلك يدعم عمليات خاصلة بتسلسل الأحرف.

- الإشارة: `s[i]`
- معرفة موضع شيء (إن وجد): `s.index(x)`
- عد تكرارات شيء: `s.count(x)`
- معرفة الطول: `len(s)`
- التكرار: `for x in s`
- العضوية: `x not in s`

```{python}
s = 'Arabian'

first = s[0]
last = s[-1]
print(first + last)
```

```
 0   1   2   3   4   5   6   7
 +---+---+---+---+---+---+---+
 | A | r | a | b | i | a | n |
 +---+---+---+---+---+---+---+
-7  -6  -5  -4  -3  -2  -1
```

#### جرب

- `s[1:5]`
- `s[1:5:2]`
- `s[::2]`
- `s[::-1]`

لاحظ أن هذا يتحقق كما لو عرفنا صفًّا بالأحرف هذه نفسها:

```{python}
s = ('A', 'r', 'a', 'b', 'i', 'a', 'n')
first = s[0]
last = s[-1]
print(first + last)
```

فالنص ، مثل الصف وبخلاف القائمة، **غير قابل للتغيير**. فلو حاولت تغيير حرف في النص. ستحصل على خطأ:

```{python}
#| error: true
s = 'Arabian'
s[0] = 'a'
```

لكن يمكنك تعديل النص بإنشاء نص جديد:

```{python}
s = 'Arabian'
s = 'a' + s[1:]
print(s)
```

لاحظ أننا أسندنا النص الجديد إلى المتغير `s`، وهذا يعني أننا لم نعدل النص الأصلي بل أنشأنا نصًا جديدًا.

## العمليات الخاصة بالنصوص

لاستبدال جزء من النص، نستخدم إجراء `.replace()`:

```{python}
s = 'Arabian'
s = s.replace('ian', 'y')
print(s)
```

كما لدينا علميات `.strip()` لإزالة المسافات البيضاء من بداية ونهاية النص.

```{python}
assert '  Arabian  '.strip() == 'Arabian'
```

وكذلك لدينا عمليات **البحث**:

- التحقق من البدء والنهاية وما بينهما: `.startswith(prefix)` و `.endswith(suffix)` أو `sub in string` وهي أعم.
- لمعرفة موضع أول ظهور لسلسلة معيَّنة من الأحرف داخل النص `.find()`

```{python}
s = 'Arabian'
assert s.startswith('A')
assert not s.startswith('a')
assert s.endswith('n')
assert s.find('a') == 2
```

انظر ملحق [أنماط السلاسل](zz_regex.qmd) للتعمق في علميات البحث والاستبدال بأنماط معقدة.

**الفصل والوصل**:

- فصل النص لقائمة: `list.split(seperator)`
- دمج القائمة إلى نص: `seperator.join(list)`

```{python}
csv = "Adam,25,Riyadh"
assert csv.split(',') == ['Adam', '25', 'Riyadh']
```

```{python}
csv = """name,age,city
Adam,25,Riyadh
Belal,30,Jeddah
Camal,35,Dammam
"""

csv = csv.strip()

data = []
for line in csv.split(sep='\n'):
    d = line.split(sep=',')
    data.append(d)
data
```

وهذا مثال للوصل:

```{python}
data = ['Adam', '25', 'Riyadh']
csv = ','.join(data)
assert csv == 'Adam,25,Riyadh'
```


**تفسير الأرقام** المكتوبة كسلسلة من الحروف، وهذا تكثر الحاجة إليه عندما نقرأ ملفات أو نتعامل مع بيانات مُدخلة من المستخدم، إذ دائمًا ما يكون الإدخال على شكل نصوص:

- `int(x)` لتحويل سلسلة نصية إلى عدد صحيح.
- `float(x)` لتحويل سلسلة نصية إلى عدد عشري.

لاحظ ناتج عملية جمع رقمين مكتوبين كنصوص:

```{python}
x = '20'
y = '40'
print(x + y)
```

الواجب تحويلهما إلى أعداد أولاًً:

```{python}
x2 = float(x)
y2 = float(y)
print(x2 + y2)
```

وهنا عمليات **خاصة بالنصوص الإنجليزية**:

- `upper()` لتحويل النص إلى حروف كبيرة.
- `lower()` لتحويل النص إلى حروف صغيرة.
- `capitalize()` لتحويل الحرف الأول إلى كبير.
- `title()` لتحويل النص إلى حالة عنوان.

```{python}
name = 'Adam ibraheeM'
print(name.upper())
print(name.lower())
print(name.capitalize())
print(name.title())
```

وانظر [مستندات النصوص](https://docs.python.org/3/library/stdtypes.html#string-methods) لمعرفة كافة الإجراءات الممكنة على النصوص.

## تنسيق السلاسل النصية

نستعرض ثلاث طرق لدمج السلاسل النصية في بايثون:

1. الأولى: تحويل الشيء إلى نص قبل دمجه مع النص..
2. الثانية: استعمال فراغات `{}` مع الإجراء `.format()` لتمرير ما يحل فيها.
3. الثالثة: استعمال `f-string` بأن تضع الحرف `f`  قبل علامة التنصيص الأولى، ليقبل النص وضع القيم مباشرة داخل القواس المعكوفة `{}`. وهي الطريقة التي نفضلها.

```{python}
name = "John"
lvl = 300

x1 = "I am " + name + " and I want to reach level " + str(lvl) # + operator
x2 = "I am {} and I want to reach level {}".format(name, lvl)  # .format() method
x3 = f"I am {name} and I want to reach level {lvl}"            # f-strings
assert x1 == x2 == x3
print(x1)
```

#### جرب

اطبع الجملة `"Hello, my name is John Doe. and I am 30 years old"`. باستخدام المتغيرات `first_name`، `last_name`، و `age` عبر الطرق الثلاث المذكورة آنفًا:

انظر [ملحق دقائق النصوص](zz_strings.qmd) لمعرفة المزيد عنها.