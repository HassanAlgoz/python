## إطلاق عدد المعمولات

قد تتساءل كيف تعمل `print` وهي تأخذ عددًا لا محدودًا من المعمولات؟ حتى نجيب عن ذلك ننظر في **عملية فك الأقواس** وهي علامة النجمة `*` قبل المتغيِّر المشير لمجموعة، على النحو التالي:

```{python}
t = (10, 20, 30)
print(t)
print(*t)
```

لاحظ الفرق بين الطلب الأول والثاني:

1. الأوَّل يطبع المتغير `t` ككل، أي: كصف
2. يُمرر واحدًا تلوَ الآخر للفعل `print` بعد فك الأقواس كأنك كتبت: `print(10, 20, 30)`

وحين تسعمل علامة النجمة التعريف عوامل الفعل، فإن أي عامل موضعي زائد عن العدد، يكونُ فيه كصفّ. وبالمثال يتضح (وقد اصطلح على تسميته `args` جوازًا لا وجوبًا وهي اختصار كلمة `arguments`):

```{python}
def show(a, *args):
    print(a)
    print(type(args), args)
    print('print:', *args)

show(1, 2, 3, 4, 5)
```

وكذلك المعمولات المعيَّنة بالاسم، لكن بالنجمتين `**` ومعنى الكلمة `kwargs` هو: Keyword Arguments:

```{python}
def show(a, **kwargs):
    print(a)
    print(type(kwargs), kwargs)
    print('print:', *kwargs)

show(a=1, b=2, c=3, d=4, e=5)
```

وقد يجتمعان في نفس الفعل `*args` و `**kwargs` نحو:

```{python}
def show(x, y, *args, **kwargs):
    print(x, y)
    print(type(args), args)
    print(type(kwargs), kwargs)

show(1, 2, 3, 4, 5, a=1, b=2, c=3)
```

ولا بد من تقديم الموضعية قبل الاسمية.

للمزيد راجع [المعمولات الخاصة في التوثيق](https://docs.python.org/3/tutorial/controlflow.html#special-parameters).


## الفعل النقي

حتى يستفاد من الفعل، لا بد أن يكون له مخرجات؛ وتكون بأحد أمرين:

1. **الرجوع لموضع الطلب بالنتيجة** (جملة الرجوع `return`) فينتقل أثر هذا الفعل للعالم عن طريقها
2. **التأثير في العالم بغير الرجوع لموضع الطلب بالنتيجة**

**الفعل النقي** (pure) لا أثر على مخرجاته إلا بالنظر لمدخلاته فقط؛ ولا يؤثر هو إلا بإرجاع مخرجاته. أما **غير النقي** فهو الذي:

1. يؤثر في غير مخرجاته المباشرة (مثلاً يكتب في ملف أو على سطر الأفعال أو يعدِّل على مدخلاته) أو
2. يتأثر بغير مدخلاته المباشرة (مثلاً: يعتمد على متغيرات معرَّفة خارج الفعل).

وهذا مثال لفعل لا يُنتج في موضع الطلب (لا يُرجع قيمة باستعمال جملة الرجوع `return`) لكنَّه يُنتج بطباعة حروف على سطر الأفعال. فنقول: هو يؤثر بطريقة غير مباشرة؛ لذا هو غير نقي.

```{python}
def print_decorated(message: str) -> None:
    print("*" * 50)
    print(message)
    print("*" * 50)

print_decorated("Hello, world!")
```

وكذلك يُقال أن مثل هذا الفعل ذو **أعراض جانبية** (side effects)؛ وذلك إشارةً إلى التغيير الذي يحصل بسببه بطريقة غير مباشرة (ليس عن طريق الرجوع بنتيجة).

كذلك هو من جنس **الفعل العقيم** (void) وهو الذي لا يرجع بقيمة لموضع الطلب (فلا تجد جملة الرجوع `return` في ثناياه). وإنما تكون مخرجاته في غير موضع الطلب. وأي فعلٍ لا يجد فيه مترجم بايثون كلمة `return` فإنه يُدرجها في آخره بالرجوع بلا شيء: `return None`.

فكلما كان الفعل نقيًّا كان عزله وضبطه وإتقانه واختباره أسهل. لكنّ الأفعال النقية تعيش في عالم مثالي لا يتأثر بالواقع ولا يؤثر فيه (I/O)؛ بل بالمعالجات التي بينها فقط. ولنرى التأثير في الواقع يجب أن نخرج إلى ما هو مُنتجٌ فيه: وهو غير نقي.

والذي نميل إليه: تغليب النقاوة، واستعمال الأعراض الجانبية عند أطراف المعالجة ونهاياتها.

فتحصل لنا بذلك هذه الأنواع:

- فعل نقي: لا يؤثر في العالم بغير الرجوع بالنتيجة. ونتيجته مرتبطة فقط بمدخلاته المباشرة.
- وغير النقي: يؤثر في العالم بغير الرجوع بالنتيجة. وفيه قسمان:
  - قد يرجع بنتيجة وكذلك له تأثير جانبي.
  - فعل عقيم: لا يرجع بنتيجة.
