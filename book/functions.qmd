## إطلاق عدد المعمولات

قد تتساءل كيف تعمل `print` وهي تأخذ عددًا لا محدودًا من المعمولات؟ حتى نجيب عن ذلك ننظر في **عملية فك الأقواس** وهي علامة النجمة `*` قبل المتغيِّر المشير لمجموعة، على النحو التالي:

```{python}
t = (10, 20, 30)
print(t)
print(*t)
```

لاحظ الفرق بين الطلب الأول والثاني:

1. الأوَّل يطبع المتغير `t` ككل، أي: كصف
2. يُمرر واحدًا تلوَ الآخر للفعل `print` بعد فك الأقواس كأنك كتبت: `print(10, 20, 30)`

وحين تسعمل علامة النجمة التعريف عوامل الفعل، فإن أي عامل موضعي زائد عن العدد، يكونُ فيه كصفّ. وبالمثال يتضح (وقد اصطلح على تسميته `args` جوازًا لا وجوبًا وهي اختصار كلمة `arguments`):

```{python}
def show(a, *args):
    print(a)
    print(type(args), args)
    print('print:', *args)

show(1, 2, 3, 4, 5)
```

وكذلك المعمولات المعيَّنة بالاسم، لكن بالنجمتين `**` ومعنى الكلمة `kwargs` هو: Keyword Arguments:

```{python}
def show(a, **kwargs):
    print(a)
    print(type(kwargs), kwargs)
    print('print:', *kwargs)

show(a=1, b=2, c=3, d=4, e=5)
```

وقد يجتمعان في نفس الفعل `*args` و `**kwargs` نحو:

```{python}
def show(x, y, *args, **kwargs):
    print(x, y)
    print(type(args), args)
    print(type(kwargs), kwargs)

show(1, 2, 3, 4, 5, a=1, b=2, c=3)
```

ولا بد من تقديم الموضعية قبل الاسمية.

للمزيد راجع [المعمولات الخاصة في التوثيق](https://docs.python.org/3/tutorial/controlflow.html#special-parameters).
