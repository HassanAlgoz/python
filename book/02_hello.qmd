---
title: "أول سطر"
jupyter: python3
---

من خصائص مفسر بايثون الوضع التفاعلي (Interactive Mode) الذي يجعل تعليماتها تنفذ سطرًا سطرًا ؛ وبذلك تحصل على نتيجة تفاعلية سريعة. بعكس لغات أخرى مثل سي أو جافا.

- نضغط `Ctrl + Enter` لتشغيل الخلية بأسطر التعليمات البرمجية التي فيها
- نضغط `Shift + Enter` للتشغيل والانتقال للخلية التالية فوْرًا

```{python}
2 + 10
```

الحساب أمر أساسي في أي لغة برمجة. جرب عمليات حسابية في الخلية أدناه:

- الجمع: `5 + 5`
- الطرح: `9 - 4`
- الضرب: `2 * 5`
- القسمة: `5 / 5`
- القوة: `2 ** 4`

```{python}
# try it
```

لاحظ أنك إذا وضعت أمرين في نفس الخلية، فسيتم طباعة الأمر الأخير فقط. فإذا أردت طباعة الأمرين، استخدم `print()`، على النحو التالي:

```{python}
print(5 + 5)
print(9 - 4)
```

تستخدم الدالة `print()` لدفع الحروف نحو سطر الأوامر. ويمكن استخدامها لطباعة النصوص أو الأرقام أو نتائج العمليات الحسابية.

إن أردت طباعة شيئين أو أكثر؛ فافصل بينهما بعلامة الفاصلة: `,` على نحو:

```{python}
print("My age is:", 40)
```

## أنواع البيانات

### القيم والأنواع

**قاعدة**: لكل قيمة نوع. (Every value has a type)

- `10` يعتبر **قيمة** من **نوع** `int`
- `"Adam"` تعتبر **قيمة** من **نوع** `str`

```{python}
type(10)
```

```{python}
type("Adam")
```
#### تمرين

- ما نوع `3.14`؟
- ما نوع `"5" + "5"`؟

```{python}
# try it
```

**قاعدة**: كل تعبير يُنتِج قيمة. (*Expressions* evaluates to a *value*)

وسبق أن قلنا أن لكل قيمة نوعًا. لاحظ أننا يمكن أن نسأل عن نوع التعبيرات التالية:

```{python}
type(4 + 2)
```

```{python}
type("Adam" + " " + "Basel")
```

```{python}
type(9 > 5)
```

#### تمرين
ما نوع التعبيرات التالية؟

- `10 + 5`
- `"Adam" + "Basel"`
- `True or False`

```{python}
# try it
```

## المتغيرات

**قاعدة**: المتغير اسمٌ يشير إلى قيمة. (A *variable* references a *value*)

نخزن القيم في **متغيرات**. والتعليمة أدناه تستخدم عملية `=` لتعيين قيمة لمتغير.

```{python}
x = 10
```

قلنا أن لكل قيمة نوعًا؛ وقد عيَّنا للمتغير قيمةً؛ فإذا سألنا ما نوع المتغير فإننا في الحقيقة نسأل عن نوع القيمة التي يشير إليها:

```{python}
type(x)
```

يأخذ التعيين القيم والتعبيرات (ويُقِّمُها) ويعينها لمتغير:

```{python}
num = 10
name = "Adam" + " " + "Basel"
b = 9 > 5

print(type(num))   # int
print(type(name))  # str
print(type(b))     # bool
```

يُظهر الكود التالي تعيين متغير:

- `x` هو **متغير (variable)**
- `5` هو **قيمة (value)**
- `=` هو **عامل التعيين (assignment operator)**

```{python}
x = 5
```

القيمة `5` مخزنة في عنوان ذاكري (memory address) `x` حتى نتمكن من الوصول إليه لاحقًا.

```{python}
print(x)
```
### ماذا ينبني على اختلاف الأنواع؟
**قاعدة**: اختلاف الأنواع يحدد ماهية العمليات الممكنة فيها وبينها:

- الرقم `20` هو قيمة من نوع `int` يُمكن جمعه وطرحه وقسمته ونحو ذلك.
- السلسلة النصية `"20"` هي قيمة من نوع `str` لا يتيح الحساب الرياضي ، وإنما يمكن دمجه وفصله ونحو ذلك؛ لأنه في الحقيقة حرفان وليس عددًا.

تبيَّن بذلك قولُنا (بينَها) ، أما قولُنا (فيها) فنقصد بها مثلاً: `str.uppercase()` في دالَّة متعلِّقة بالكائن إذا كان نوعه نصًّا فتعملُ فيه (انظر [باب السلسلة النصية](04_strings.qmd)).

**ملاحظة جانبية**: التنصيص المفرد (`'A'`) والتنصيص المزدوج (`"A"`) متكافئة في بايثون (Python).

```{python}
x = 20 + 20 # جمع
y = '20' + "20" # دمج

print(x, type(x))
print(y, type(y))
```

```{python}
#| error: true
print(x + y) # غير ممكن
```

نتوقع حدوث خطأ وراء هذا السطر لأننا نحاول إضافة سلسلة نصية (`str`) إلى أحد أنواع الأعداد (مثل: `int`). (انظر [باب الأعداد](03_numbers.qmd)) حتى يُفهَم العامل `+` أنه عامل جمعٍ بين عددين.

```{python}
z = int(y)
print(z, type(z))
print(x + z)
```

### تغيير النوع بعد التعيين

من تسهيل بايثون أنها تسمح بتغيير النوع الذي يشير إليه المتغير بعد تعيينه المرة الأولى. وهذا ما يُعرف بنظام **التنويع الديناميكي** (Dynamic Typing System). بالمقارنة فإن لغة سي وجافا لا تسمحان بذلك؛ فهما على نظام **التنويع الثابت** (Static Typing System).

```{python}
x = 1         # int
x = 'hello'   # -> str
x = [1, 2, 3] # -> list
```

```{python}
type(x)
```

## قواعد في تسمية المتغيرات

القاعدة الأولى: المتغيرات حساسة لحالة الأحرف (case-sensitive). مثال:

```python
my_variable = 5
My_Variable = 10
```

القاعدة الثانية: لا يمكن أن تبدأ أسماء المتغيرات برقم. مثال:

```{python}
#|error: true
2my_variable = 5
```

القاعدة الثالثة: لا يمكنك استخدام الكلمات المحجوزة (reserved keywords). مثال:

```{python}
#| error: true
class = 5
True = 1
break = True
```

### الكلمات المحجوزة في بايثون

| الفئة | الكلمة المحجوزة | الوصف |
|---|---|---|
| عوامل منطقية (Logical operators) | `and`, `or`, `not`, `is` | عوامل تستخدم لدمج التعبيرات البوليانية (Boolean expressions). |
| عبارات شرطية (Conditional statements) | `if`, `elif`, `else` | كلمات محجوزة تستخدم لإنشاء عبارات شرطية. |
| الحلقات (Loops) | `while`, `for`, `break`, `continue` | كلمات محجوزة تستخدم لإنشاء الحلقات. |
| معالجة الاستثناءات (Exception handling) | `try`, `except`, `finally` | كلمات محجوزة تستخدم لمعالجة الاستثناءات. |
| الدوال والفئات (Functions and classes) | `def`, `class`, `return`, `yield`, `lambda` | كلمات محجوزة تستخدم لتعريف الدوال والفئات. |
| أنواع البيانات (Data types) | `None`, `True`, `False` | كلمات محجوزة تستخدم لتمثيل أنواع بيانات خاصة. |
| أخرى (Other) | `import`, `from`, `as`, `assert`, `global`, `nonlocal`, `with`, `pass`  | كلمات محجوزة أخرى تستخدم لأغراض متنوعة. |


القاعدة الرابعة: يُكره استخدام أسماء دوال تم تعريفها سابقًا. مثال:

```python
sum = 5
max = 10
list = [10, 20, 30]
```

يسبب هذا ما يُعرف بـ **تعارض الأسماء (naming conflict)**، وهو يجعل الكود أقل فهمًا وأقل قابلية للصيانة. وهو سبب لنوع من أخطر أنواع الأخطاء وهي **الأخطاء الصامتة (silent errors)** ، إذ لا تظهر رسالة الخطأ وإن ظهرت فإنها غير دالة على السبب الحقيقي للخطأ.

**القاعدة الخامسة**: نؤكِّد على استحباب أن تدلَّ أسماء المتغيرات والدوالّ على وظيفتها.

مثال سيء: الخلية التالية تحتوي على أسماء متغيرات لا معنى لها.

```{python}
r = 50
hpd = 6
d = 5
p = r * hpd * d
print(p)
```
تصحيح الخطأ باتباع القاعدة السابقة:

```{python}
rate = 50
hours_per_day = 6
days = 5
pay = rate * hours_per_day * days
print(pay)
```

النتيجة واحدة لكن الكود الثاني أسهل قراءة وفهمًا.

### الأنواع في بايثون

[الأنواع المدمجة الرئيسية](https://docs.python.org/3/library/stdtypes.html#built-in-types) ستة:

1. **الأعداد (numerics)**
2. **المتتاليات (sequences)**
3. **الربط (mappings)**
4. **الفئات (classes)**
5. **الكائنات (instances)**
6. **والاستثناءات (exceptions)**

أضع بين يديك الجدوَل التالي والشجرة لتكوين تصوُّر عام ، وليس الغرض منه القراءة بتمعُّن. إليك جدول بأكثر أنواع البيانات شيوعًا في بايثون (Python):

| التصنيف | الأنواع |
|---|---|
| **لا شيء (None)** | `NoneType` |
| **بولي (Boolean)** | `bool` |
| **رقمي (Numeric)** | `int`, `float`, `complex` |
| **متتالية (Sequence)** | `list`, `tuple`, `range` |
| **نص (Text)** | `str` |
| **مجموعة (Set)** | `set`, `frozenset` |
| **ربط (Mapping)** | `dict` |


## المراجع

- https://docs.python.org/3/library/datatypes.html