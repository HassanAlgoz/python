### membership operator: `in`

The `in` operator is used to check if a value is present in a sequence (`str`, `list`, `range`, etc.).

```{python}
vowels = "aeiou"
print("a" in vowels)
```

```{python}
# same as above
# since both are sequences in Python
vowels = ["a", "e", "i", "o", "u"]
print("a" in vowels)
```


## Indexing and Slicing

- A string is a sequence of characters
- Sequences can be indxed using `[]`
    - 1st element is at index `0`
    - 2nd element is at index `1`
    - last element is at index `-1`

```{python}
title = "Pythonista"
```

<img src="../assets/pythonista.png">

```{python}
print(title[2:]) # thonista
```

```{python}
print(title[0] == 'P')
print(title[-1] == title[9] == 'a')
# title[10] # IndexError: string index out of range
```

```{python}
# TODO: weired case that needs to be understood
# print(title[None:-4:-1])
```

### Slicing

Sequences can also be sliced using `[start:end]`

<img src="../assets/pythonista.png">

```{python}
title[0] == title[0:1] == 'P'
```

<img src="../assets/pythonista.png">

```{python}
print(title[2:5]) #
print(title[:5])
print(title[-4:])
print(title[-4:None])
```

#### Exercise

Ex: Given that `name = "Johnson"` What is the value of `name[0]`? `name[1]`? `name[-1]`? `name[-2]`?

```{python}
# try it
```

#### Exercise

Ex: try `name[1:3]` and `name[3:5]`

```{python}
# try it
```

### We can also add a step to slicing `[start:end:step]`

```{python}
s = "ABCDEF"
```

```{python}
s[0:len(s):1] == s[0:None:1] == s[::] # default values
```

```{python}
s[::-1]
```

We can also omit the `start` or `end` of the slice, which would implicitly mean the beginning or end of the string:

```{python}
s[0::2]
```

```{python}
# s = "ABCDEF"
# s[None:0:-1] # TODO: understand this weird case
```

```{python}
s[-1:0:-2]
```


Ex: run and try to understand the following code

```python
name = "Johnson"
print(name[::2])
print(name[::-1])
print(name[1:5:2])
```

```{python}
# try it
```


Ex: For each of the following, specify the `start`, `end`, and `step`:

- `name[::2]`
- `name[::-1]`
- `name[1:5:2]`

Answer: ...

#### Exercise


Ex: Write a program that takes a string and prints the string in reverse.

```{python}
# try it
```


Ex: Write a program that takes a string and prints every other character in the string. Example: `abcdef` -> `bdf`

```{python}
# try it
```

Ex: Write a program that takes a string and prints the string in reverse order, but only every other character. It also must capitalize it. Example: `abcdef` -> `ECA`

```{python}
# try it
```

Ex: Count the number of `o` in the string `hello world`. Hint: use the `.count()` method.

```{python}
# try it
```
