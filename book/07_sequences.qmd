---
title: المتتاليات
jupyter: python3
---

عندما نقول أن `s` هي **متتالية** (Sequence)، فهذا يعني أنها تدعم:

- الفهرسة: `s[i]`
- الطول: `len(s)`
- البحث: `s.index(x)`
- العد: `s.count(x)`
- التكرار: `for x in s`
- العضوية: `x in s`
- العكس: `reversed(s)`

نحن في الواقع نحدد هذا السلوك في بايثون باستخدام بنية `class`. سيأتي الحديث عنه إن شاء الله.

```{mermaid}
%% | fig-cap: شجرة المتتاليات في بايثون توضح اشتراك القوائم والجموع والسلاسل النصية في كونها متتاليات.
%% | label: fig-sequences-tree
graph TD
    A(Object)
    A --> B1(Sequence)
        B1 --> C5(Mutable Sequence)
            C5 --> D1[List]
        B1 --> C1[Range]
        B1 --> C2[Tuple]
        B1 --> C3[String]
```

في هذا الفصل، سنلقي نظرة على بعض أنواع المتتاليات (sequences) المدمجة شائعة الاستخدام:

- [`list`](https://docs.python.org/3/library/stdtypes.html#list)
- [`range`](https://docs.python.org/3/library/stdtypes.html#range)
- [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple)
- [`str`](https://docs.python.org/3/library/stdtypes.html#str)

## القوائم (Lists)

القائمة تسلسل متغيِّر.

```{python}
l1 = []        # empty list
l2 = [1]       # list with one item
l3 = [1, 2, 3] # list with three items
l4 = ['abb', 1, 2.0, True] # list with different types
```

يمكن أيضًا تركيب القوائم عن طريق:

- الدمج: باستخدام معامل `+`
- التكرار: باستخدام معامل `*`

```{python}
l5 = [1, 2, 3] + [4, 5]
l6 = l5 * 2
print(l5)
print(l6)
```

جرب ما يلي:

- `len(l3)` للحصول على طول القائمة `l3`
- `'abb' in l4` للتحقق مما إذا كانت `'abb'` عنصرًا في القائمة `l4`
    - بعد ذلك، جرب `'abb' not in l4`
- جرب `min(l3)`, `max(l3)`, `sum(l3)` وانظر ماذا يحدث

```{python}
# try it
```

### الفهرسة (Indexing)

للوصول إلى عنصر من القائمة، استخدم معامل الفهرسة `[]`. يجب أن يكون مفتاح الفهرسة عددًا صحيحًا (`int`) في النطاق `0 <= index < len(s) - 1`.

```{python}
l1 = [10, 20, 30, 40, 50]
print(l1[0])
```

كذلك، جرب `l1[1]`, `l1[2]`, و `l1[3]`.

```{python}
# try it
```

```{python}
l2 = ["Apple", "Banana", "Orange", "Lemon"]
```

في القائمة `l2`، الفهرس على النحو التالي:

```
0       1       2       3       4
+-------+-------+-------+-------+
| Apple | Banana| Orange| Lemon |
+-------+-------+-------+-------+
-4      -3      -2      -1
```

Try `l2[1]`, `l2[2]`, and `l2[3]`.

جرب أيضًا الفهرسة عند:

- `l[4]` (لماذا هذا خطأ؟)
- `l[-1]` و `l[len(l) - 1]`; هل هما نفس الشيء؟
- `l[-2]`

```{python}
# try it
```

#### البحث `.index()`

طريق `.index()` تخرج موقع أول ظهور للقيمة المحددة.

```{python}
l1 = ['A', 'A', 'B', 'A', 'B']
idx = l1.index('B')
print(l1[idx], 'is at index', idx)
```

إذا لم يكن العنصر موجودًا في القائمة، فإنه يخرج خطأ.

```{python}
#| error: true
l1 = [10, 20, 30, 40, 50]
l1.index(4444)
```

رسالة الخطأ تخبرنا أن `4444` غير موجود في القائمة. دعنا نتعامل مع هذه الحالة في لبنة `else`، بدلاً من ترك البرنامج أن يتعطل.

```{python}
l1 = [10, 20, 30, 40, 50]
if 4444 in l1:
    idx = l1.index(4444)
    print(l1[idx], 'is at index', idx)
else:
    print('Item not found')
```

### التقطيع (Slicing)

- يأخذ التقطيع الشكل `s[start : end : step]`
- القيم الافتراضية عند الإغفال هي:
    - `start = 0`
    - `end = len(list)`
    - `step = 1`

```{python}
l1 = [10, 20, 30, 40, 50]
print(l1[1:3])
```

جرب ما يلي:

- `l1[1:4]`
- `l1[1:]`
- `l1[:3]`
- `l1[:]`
- `l1[::2]`
- `l1[::-1]`

```{python}
# try it
```

### التغيير (Mutation)

القوائم (Lists) قابلة للتغيير، مما يعني أنه يمكن تعديلها بعد إنشائها. يشمل التغيير:

1. الإضافة: `l.append(x)` لإضافة عنصر إلى نهاية القائمة
2. الإزالة: `l.remove(x)`
3. الإدراج: `l.insert(i, x)` لإدراج عنصر في موضع محدد
4. الاستبدال: `l[i] = x`
5. الترتيب: `l.sort()`

ولأن القائمة متتالية قابلة للتغيير فهي تحقق جميع عمليات المتتاليات. [راجع ملحق عمليات المتتاليات](sequence_operations.qmd).

```{python}
l1 = [10, 20, 30, 40, 50]
l1[0] = 100 # replace the first element
print(l1)
```

جرب ما يلي:

- `l1.append(60)`
- `l1.remove(10)`
- `l1.insert(2, 300)`
- `l1.sort()`

### استبدال المقاطع (Slices Replacement)

جرب ما يلي:

- استبدال عنصرين بعنصرين: `l1[1:3] = [200, 300]`
- استبدال عنصرين بثلاثة عناصر: `l1[1:3] = [200, 300, 400]`
- استبدال عنصرين بعنصر واحد: `l1[1:3] = [200]`
- استبدال عنصرين بصفر عناصر: `l1[1:3] = []`

استبدال عنصرين بعنصرين:

```{python}
# SOLVED
l1 = [10, 20, 30, 40, 50]
l1[1:3] = [200, 300]
print(l1)
```

توفر القوائم طريقة `.sort()` التي تقوم بالترتيب في مكانها. إذا كنت تريد إنشاء قائمة جديدة، استخدم الدالة `sorted()` بدلاً من ذلك. مثال:

```{python}
l1 = [10, 20, 50, 40, 30]
l2 = sorted(l1)
print(l1)
print(l2)
```

لاحظ أنها مختلفة.

بينما:

```{python}
l1 = [10, 20, 50, 40, 30]
l1.sort()
print(l1)
```

لاحظ أن `l1` يتم ترتيبها في مكانها، ولا تنشئ قائمة.

## قراءة المتتاليات (Iterating over sequences)

نستخدم الجملة: `for <item> in <sequence>` لقراءة المتتاليات. على سبيل المثال، يمكنك استخدام البرنامج التالي لطباعة كل عنصر في القائمة:

```{python}
numbers = [10, 20, 30, 40, 50]
for x in numbers:
    print(x)
```

وهذا البرنامج يصفي قائمة أرقام إلى قائمتين: إحداها زوجية والأخرى فدرية:

```{python}
numbers = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
evens = []
odds = []

for x in numbers:
    if x % 2 == 0:
        evens.append(x)
    else:
        odds.append(x)

print('list of evens:', evens)
print('list of odds:', odds)
```

Line 5-8
داخل الحلقة، فكر في `x` ككل عنصر في قائمة `numbers`، واحدًا تلو الآخر.

Line 4
فكر في هذا كـ `x = numbers[0]` في التكرار الأول، `x = numbers[1]` في التكرار الثاني، وهكذا، حتى `x = numbers[-1]` (العنصر الأخير).


## النطاقات (Ranges)

نوع [`range`](https://docs.python.org/3/library/stdtypes.html#range) يمثل تسلسلًا غير قابل للتغيير من الأرقام.

ويستخدم عادةً للتكرار عددًا محددًا من المرات في حلقات [`for`](https://docs.python.org/3/reference/compound_stmts.html#for).

وفقًا لوثائق بايثون فإن النطاق له شكلان:

- `class range(stop)`
- `class range(start, stop[, step])`

دعونا نفصل المحددات أولاً:

- `start`: موضع الابتداء، وهو مشمول في النطاق. (القيمة الافتراضية هي 0)
- `stop`: موضع الانتهاء، وهو غير مشمول في النطاق.
- `step`: مقدار الزياة أو النقص بعد كل كرة (القيمة الافتراضية هي 1)

فإذا قمت بتعيين محدد واحد فسيكون هو `stop`:

```{python}
for i in range(5):
    print(i)
```

وإذا قمت بتعيين محددين، فسيكون الأول `start` والثاني `stop`:

```{python}
for i in range(5, 10):
    print(i)
```

أما إذا حددتها ثلاثة، فسيكون الأول `start` والثاني `stop` والثالث `step`:

```{python}
for i in range(0, 10, 2):
    print(i)
```

ولك أن تعكس النطاق بتحديد `step` بقيمة سالبة، وتقلب البداية والنهاية:

```{python}
for i in range(10, 0, -1):
    print(i)
```

### تحويل `range` إلى `list`

يمكن تمرير الاستدعاء إلى `range()` إلى استدعاء `list()` لتحويله. هنا

```{python}
numbers = list(range(1000, 0, -100))
print(numbers)
```

مثال آخر هو إنشاء قائمتين؛ واحدة للأرقام الزوجية والأخرى للأرقام الفردية، مرة أخرى، باستخدام تركيب `list(range())`.

```{python}
evens = list(range(0, 10, 2))
odds = list(range(1, 10, 2))
print(evens)
print(odds)
```

## الجموع (Tuples)

على عكس القوائم، الجموع غير قابلة للتغيير (immutable) ؛ أي أنه بمجرد إنشائها، لا يمكن تغييرها.

بخلاف ذلك، كل ما قلناه عن القوائم ينطبق على الجموع أيضًا؛ إذ كلاهما يشتركان في خاصية كونهما **متتاليات** (sequences).

على سبيل المثال، يمكننا إنشاء الجموع بالطرق التالية:

```{python}
t1 = ()        # empty tuple
t2 = (1,)      # tuple with one item
t3 = (1, 2, 3) # tuple with three items
t4 = ('abb', 1, 2.0, True) # tuple with different types
```

يمكن أيضًا إنشاء الجموع بوسائل:

- الدمج: باستخدام معامل `+`
- التكرار: باستخدام معامل `*`

```{python}
t5 = (1, 2, 3) + (4, 5)
t6 = t5 * 2
print(t5)
print(t6)
```

ولأن الجموع متتالية جامدة فهي تحقق عمليات المتتاليات عدا التغيير. [راجع ملحق عمليات المتتاليات](sequence_operations.qmd).


### التغيير (Mutation)

الجموع لا تقبل التغيير.

```{python}
#| error: true
t1 = (10, 20, 30, 40, 50)
t1[0] = 100
```

رسالة الخطأ تخبرنا أننا لا نستطيع تغيير قيمة عنصر في هذا الجمع.

### تحويل `list <-> tuple`

يمكن تحويل القوائم إلى جموع والعكس باستخدام الدوال `list()` و `tuple()`.

```{python}
l1 = [10, 20, 30, 40, 50]
t1 = tuple(l1)
l2 = list(t1)
print(t1)
print(l2)
```

من المهم ملاحظة أن الدوال `tuple()` و `list()` تُنشئ كائنًا جديدًا، ولا تقوم فعليًا بتحويل الكائن في مكانه. لذا، تبقى `l1` قائمة وتبقى `t1` صفًا.

### أين نستخدم الجموع؟

القوائم (Lists) أكثر قدرة، فأين نستخدم الجموع؟ يستخدم المبرمجون الأنواع غير القابلة للتغيير عندما يريدون توصيل أن البيانات لا ينبغي تغييرها. هذا مفيد بشكل خاص عند تمرير البيانات في البرنامج، حيث يمكن تمريرها دون الخوف من تغييرها.

## المتتالية النصية (String)

سبق وأن استكشفنا السلاسل النصية في فصلٍ سابق (انظر [فصل السلاسل](04_strings.qmd)). لكننا الآن ننظر من جانب أنها متتالية. فالسلسلة النصية ما هي إلا متتالية جامدة من رموز اليونيكود (Unicode). ونقصد بالجمود أنها لا تقبل التغيير (immutable sequence).

@fig-sequences-tree يوضح العلاقة بين السلاسل النصية والمتتاليات.

تشترك السلاسل النصية مع القوائم والجموع في خاصية كونها متتاليات. وبالتالي يمكننا استخدام العديد من العمليات المشتركة على السلاسل النصية. راجع [ملحق عمليات المتتاليات](sequence_operations.qmd).

```{python}
s1 = 'Pythonista'
print(s1[0])
print(s1 * 2)
```

```
 0   1   2   3   4   5   6   7   8   9
 +---+---+---+---+---+---+---+---+---+
 | P | y | h | o | n | i | s | t | a |
 +---+---+---+---+---+---+---+---+---+
-9  -8  -7  -6  -5  -4  -3  -2  -1
```

جرب ما يلي:

- `s1[1:5]`
- `s1[1:5:2]`
- `s1[::2]`
- `s1 + ' Booking'[::-1])`

```{python}
# try it
```


#### تمرين

اكتب برنامجًا يأخذ سلسلة نصية ويطبعها بترتيب عكسي.

```{python}
# try it
```

#### تمرين

اكتب برنامجًا يأخذ سلسلة نصية ويطبع كل حرف ثاني في السلسلة النصية. مثال: `abcdef` -> `bdf`

```{python}
# try it
```


#### تمرين

عد عدد الأحرف `a` في السلسلة النصية `Adam Ibraheem`. تلميح: استخدم طريقة `.count()`.

```{python}
# try it
```


#### Exercise

Functions may also have multiple parameters (separated by commas) and may return multiple values (as a tuple).

Implement the function `train_test_split` to split a list into two parts based on the split ratio. The function should return two lists:
1. the first part should contain the first `split_ratio` elements, and
2. the second part should contain the remaining elements.

```python
def split_data(lst, split_ratio):
    # your code here


# test case 1:
my_data = list(range(10 + 1))
d1, d2 = split_data(my_data, 0.80)
assert d1 == [0, 1, 2, 3, 4, 5, 6, 7, 8]
assert d2 == [9, 10]
```

لمعرفة المزيد راجع [ملحق عمليات المتتاليات](sequence_operations.qmd).