# Testing

# إصلاح الأخطاء المنطقية


واختبار الكود يكون على ثلاث مستويات:

1. **اختبار الإجراء** بحالات طبيعية، ثم بحالات غير طبيعية لكن ممكنة
2. **اختبار مجموعة إجراءات في سياق**؛ وذلك عادة هو اختبارٌ لصنفٍ ما؛ نختبر أفعاله فيما نتصوَّر أنه استعمال مفيد له
3. **اختبار البرنامج ككُل** (وقد يكون وصفُ ذلك صعبًا بجُمَل التوكيد .. فيحصل الاختبار في الواقع يدويًّا)


[`unittest`](https://docs.python.org/3/library/unittest.html) is the standard library's Unit testing framework. However, the docs also mention [`pytest`](https://docs.pytest.org/en/stable/) which is a community-built alternative that is more user-friendly.

Package names might not always be predictible. Hence, we recommend always visiting the official documentation on how to install any package we need to install. In this case, we use the following search query on our search engine of choice: `pytest docs install`, which leads us to the [pytest getting started page](https://docs.pytest.org/en/stable/getting-started.html) in which we find the following command to install `pytest`:

```bash
pip install -U pytest
```

The `-U` flag is short for `--upgrade` and it upgrades the package to the latest version, if it is already installed.

The pytest framework makes it easy to write small, readable tests, and can scale to support complex functional testing for applications and libraries.

Tests can be broken down into four steps:

1. Arrange
2. Act
3. Assert
4. Cleanup

**Arrange**: Set up the conditions for the test. For example, if our test requires some records in a database, we would create those records there. If it requires a set of files to be present, we would create those files. And so on.

**Act**: Perform the action, the logic implemented by our program. This could be one or more function calls towards achieving the desired outcome.

**Assert**: Check if the result of these action, is as expected. This could mean checking a return value, a database record, a file, etc, against an expected condition.

**Cleanup**: Remove any temporary data created during the test. This could be deleting records from a database, removing files, etc. So as to leave the system in the same state as it was before the test was run.

First, let's organize our project structure. We will create a `tests` directory to store our test files. We will also create a `src` directory to store our source code. The project structure will look like this:

```
examples/
├── testing/
│   ├── src/
│   │   ├── queue.py
│   │   └── stats.py
│   └── tests/
│       ├── queue_test.py
│       └── stats_test.py
```

Here is a snippet from [`queue_test.py`](../examples/testing/tests/queue_test.py) file that tests a `Queue` class:

```python
def test_enqueue():
    # Arrange: create a queue
    q = Queue()
    
    # Act: add an item to the queue
    q.enqueue('A')
    
    # Assert: check if the item is added to the queue
    assert q.items == ['A'], "Should add item to the queue"
    assert q.is_empty() == False, "Should not be empty after adding an item"

    # Act: add an item to the queue
    q.enqueue('B')
    
    # Assert: check if the item is added to the queue
    assert q.items == ['A', 'B'], "Should add item to the end of the queue"
    
    # Cleanup: free up memory
    del q
```

Checkout the code here: [`queue_test.py`](../examples/testing/tests/queue_test.py).

We setup `pytest` and run it through the command-line interface:

```bash
pytest
```

The output will show the test results. If all tests pass, it will show a green dot for each test. If a test fails, it will show an `F` and the reason for the failure.

For testing functions, we can use the `@pytest.mark.parametrize` decorator to test multiple inputs at once. The following example shows a test for the `mean` function from the `stats` module:

```python
@pytest.mark.parametrize("input_list, expected", [
    ([4, 4, 4], 4.0),
    ([1, 2, 3], 2.0),
    ([1, 2, 3, 4], 2.5),
    ([-1, 0, 1], 0.0),
])
def test_mean(input_list, expected):
    assert stats.mean(input_list) == approx(expected)
```

Checkout the code here: [`stats_test.py`](../examples/testing/tests/stats_test.py).

Notice the use of [`approx`](https://docs.pytest.org/en/stable/reference.html#pytest-approx) from the `pytest` package. This is used to compare floating point numbers, as they might not be exactly equal due to floating point arithmetic.

Learn more about [`pytest`](https://docs.pytest.org/en/stable/) and [`unittest`](https://docs.python.org/3/library/unittest.html) from their respective documentation.