---
title: الأعداد
jupyter: python3
---

## وظيفة الأعداد في لغة البرمجة

* الأعداد الصحيحة ([Integers](https://docs.python.org/3/library/functions.html#int)) للفهرسة والعد والترتيب: `..., -2, -1, 0, 1, 2, ...`
* الأعداد العشرية ([Floats](https://docs.python.org/3/library/functions.html#float)) لتمثيل الكميات مثل المال، المسافة، والوقت: `3.14, 2.718, 0.0, 15.0`
* الأعداد المركبة ([Complex](https://docs.python.org/3/library/functions.html#complex)) في الرياضيات والهندسة: `(1 + 2j), (1.0 - 2.0j)`
* القيم المنطقية ([Booleans](https://docs.python.org/3/library/stdtypes.html#boolean-type-bool)) لتمثيل قيم الحقيقة: `True, False`

```{python}
x = 5
y = 3.0
z = -10
b = True
c = 1 + 2j
```

```{python}
print(type(x))
print(type(y))
print(type(z))
print(type(b))
print(type(c))
```

### العمليات الحسابية (Arithmetic operations)

```{python}
print(x + y) # الجمع (Addition)
print(x - y) # الطرح (Subtraction)
print(x * y) # الضرب (Multiplication)
print(x / y) # القسمة (Division)
print(x % y) # باقي القسمة (Remainder)
print(x ** y) # الأس (Exponentiation)
```

### ماذا تعني صفة العددية؟

الاشتراك في صفة العددية يعني أنها تقبل العمليات الحسابية ، مع ملاحظة أن النوع الأقل دقة يتحول إلى النوع الأعلى دقة:

- فمثلاً: `int + float = float`
- وكذلك: `int / int = float`
- وأيضًا: `bool * int = int`
- وهكذا: `int * complex = complex`

```{python}
print(x + z)
print(x + y)
print(y * z)
print(b * x)
print(c + x)
```

لاحظ أن قسمة الصحيح تقوم بتقريب النتيجة إلى الأقرب:

```{python}
print(7 / 2)  # قسمة صحيحٍ تنتج عشريًا
print(7 // 2) # قسمة صحيح تنتج صحيحًا
```

#### تمرين

تحقق من نوع كل من التعبيرين السابقين باستخدام الدالة `type()`. هل يمكنك استخراج قاعدة من هذه الأمثلة؟


- `7 / 2`
- `7 // 2`
- `7.0 / 2`
- `7 / 2.0`

```python
# try it
```

جرب الآتي حتى تستكشف ماذا يحصل لو:

- [x] `int + bool`
- [ ] `int * str`
- [ ] `str * int`
- [ ] `str + str`
- [ ] `int + str` (لاحظ أن هذه العملية ستفشل)

```{python}
i = 5
b = True
s1 = '5'
s2 = '11'

print(i + b)  # int + bool
# ... أكمل البقية ...
```

### تعليمات التعيين المعززة (Augmented assignment statements)

- `i = i + 1` تعادل `i += 1`
- `i = i - 1` تعادل `i -= 1`
- `i = i * 2` تعادل `i *= 2`
- `i = i / 2` تعادل `i /= 2`

ملاحظة جانبية: انظر [تعليمات التعيين المعززة (Augmented assignment statements)](https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements) للتفاصيل التي تختلف فيها فعليًا.

جرب الكود أدناه لترى النتيجة:

```{python}
i = 0
print(i)
```

```{python}
i = i + 1
print(i)
```

```{python}
i += 1
print(i)
```

لاحظ أن `i++` غير صالح في بايثون. الكود التالي سيؤدي إلى خطأ:

```{python}
#| error: true
i++
print(i)
```

### جملة التوكيد (assert statement)

تُدرَج جُملَ التوكيد في ثنايا الكود للتحقق من صحَّة التسلسل المنطقي. فالتوكيد يُحدثُ خطأ إذا كانت القيمة التي نؤكدها خاطئة. مثلاً:

```{python}
#| error: true
assert False
```

كما تُسحتب الكتابة بلغة البشر لما يجب أن يكون ، بعد الفاصلة، هكذا ، لتظهر في رسالة الخطأ واضحة:

```{python}
#| error: true
x = 10
y = 20
assert x > y, 'x should be greater than y'
```

أما إذا كانت العبارة صحيحة فلا خطأ:

```{python}
assert True
```

```{python}
x = 2 ** 4
y = pow(2, 4)
assert x == x, 'x should be equal to x'
```

هذه الجُمَل البسيطة تساعد في اختبار الكود وكشف الأخطاء في وقتٍ مبكِّر ، كما أنها تساعد في التعلُّم كما سنستخدمها الآن لأنها تحقق ما نحن بصدد التحقق منه. وهي تغنينا عن كثيرٍ من جُمَل `print()`.

### ترتيب العمليات (Operator precedence)

ترتيب العمليات هو نفسه كما في الرياضيات:

1. الأقواس: `()`
2. الأسس: `**`
3. الضرب والقسمة: `*` و `/`
4. الجمع والطرح: `+` و `-`

للتفصيل الشامل انظر: [ترتيب التقييم](https://docs.python.org/3/reference/expressions.html#evaluation-order)

#### تمرين

أضف أقواس لتغيير النتيجة لتطابق التوكيد:

```{python}
#| error: true
assert 3 + 2 * 5 == 25
```

الحل:

```{python}
assert (3 + 2) * 5 == 25
```

مثال آخر:

```{python}
#| error: true
assert 8 - 4 / 2 == 2
```

ما هو الحل؟ ضع الأقواس في مكانها الصحيح.

```python
# try it
```

مثال أخير:

```{python}
#| error: true
assert 2 ** 3 * 4 == 4096
```

ما هو الحل؟ ضع الأقواس في مكانها الصحيح.

```python
# try it
```


## الدوال المدمجة ودوال المكتبة الأساسية (Built-in and Standard Library Functions)

تتضمن لغات البرمجة دوال مساعدة مكتوبة من قِبل فريق اللغة ومضمَّنة مع حزمة تثبيت اللغة؛ أي أنها لا تستدعي من المبرمج تثبيت حِزَم إضافية. وهي على قسمين:

1. **دوال مدمجة** (Built-in functions)
2. **دوال المكتبة الأساسية** ، وتسمى (Standard Library) وتختصر stdlib


### دوال مدمجة

وهي الدوال المتاحة المعرَّفة من غير أن نعرِّفها نحن. مثلاً:

```{python}
print(abs(-99)) # القيمة المطلقة
print(pow(2, 4)) # القوة
print(max(10, 20)) # القيمة العظمى
print(min(10, 20)) # القيمة الصغرى
```

وهنا [قائمة بجميع الدوال المدمجة](https://docs.python.org/3/library/functions.html).

### دوال المكتبة الأساسية

وهي دوالّ متوفِّرة لكن يجب استيرادها من المكتبة الأساسية بجملة `import`.

فمثلاً للوصول إلى دوال رياضية إضافية: [`import math`](https://docs.python.org/3/library/math.html)، ثم نستخدم البادئة `math.` للوصول إلى الدوال.

في هذا المثال نعرف نقطتين ثم نحسب المسافة بينهما. والمسافة الإقليدية بين نقطتين $(x_1, y_1)$ و $(x_2, y_2)$ تُحسب باستخدام الصيغة التالية:

$$
\text{distance} = \sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}
$$



```{python}
import math

x1, y1 = 0, 0
x2, y2 = 3, 4
distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)
print(distance)
```

```{python}
import math

x = 5.4
print(math.floor(x)) # تقريب لأقرب عدد صحيح أصغر
print(math.ceil(x)) # تقريب لأقرب عدد صحيح أكبر
print(math.trunc(x)) # حذف ما بعد الفاصلة
print(round(x, 2)) # تقريب إلى رقمين بعد الفاصلة
```

ملاحظة: الدالة الأخيرة `round` ليست مستوردة من `math` وإنما هي مُدمجة.

وهنا [مرجع المكتبة الأساسية لبايثون](https://docs.python.org/3/library/index.html).

#### تمرين

اكتب برنامجًا ليعرف رقمين ثم اطبع مجموعهما، الفرق بينهما، حاصل ضربهما، خارج القسمة، وباقي القسمة. استخدم أسماء متغيرات وتعليقات مناسبة.

```python
# try it
```

#### تمرين

احسب مساحة المكعب باستخدام الصيغة التالية:

$$
\text{area} = \text{width} \times \text{length} \times \text{height}
$$

- قم بتعيين العرض (width)، الطول (length)، والارتفاع (height) إلى متغيرات.
- احسب المساحة باستخدام الصيغة.
- اطبع النتيجة.

```python
# try it
```

#### تمرين

اكتب برنامجًا يطلب من المستخدم إدخال عدد الساعات (hours) ومعدل الأجر لكل ساعة (rate per hour) لحساب الأجر الإجمالي (gross pay).

```python
# your code here
```

#### تمرين

اكتب برنامجًا يحسب مساحة الدائرة باستخدام الصيغة التالية:


$$
\text{area} = \pi \times \text{radius}^2
$$

- قم بتعيين نصف القطر إلى متغير.
- احسب المساحة باستخدام الصيغة.
- اطبع النتيجة.

تلميح: يمكنك استخدام الثابت `math.pi` للحصول على قيمة $\pi$.

```python
# your code here
```

#### تمرين

اكتب برنامجًا لتحويل درجة الحرارة من السيليلوس إلى الفهرنهايت استخدم معادلة التحويل التالية:

$$
F = \frac{9}{5} \times C + 32
$$

```python
# your code here
```


## المراجع

- [https://docs.python.org/3/reference/simple_stmts.html](https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements)