# عمليات المتتاليات

## العمليات المشتركة

وهي التي توجَد في كلا قسمي المتتاليات:

1. المتغيرة (mutable sequence)
2. والجامدة (immutable sequence)

نسرد في الجدول العمليات على المتتاليات مرتبةً حسب الصيرورة تصاعديًّا (order of evaluation).

لاحظ أن ما ببين القوسين `[` و `]` يشير لعناصر اختيارية.

- `s` و `t` متتاليتان من نفس النوع (sequence)
- `n`، `i`، `j` و `k` أعداد صحيحة (integers)
- `x` كائن (object)

| **العملية**              | **النتيجة**                                                                   |
|--------------------------|-------------------------------------------------------------------------------|
| `x in s`                 | صحيح إذا كان هناك عنصر من خصائص `s` يساوي `x`، وإلا خطأ                        |
| `x not in s`             | خطأ إذا كان هناك عنصر من خصائص `s` يساوي `x`، وإلا صحيح                        |
| `s + t`                  | دمج `s` و `t`                                                                  |
| `s * n` أو `n * s`       | يعادل إضافة `s` إلى نفسها `n` مرات                                            |
| `s[i]`                   | العنصر `i` من `s`، الأصل 0                                                    |
| `s[i:j]`                 | شريحة من `s` من `i` إلى `j`                                                   |
| `s[i:j:k]`               | شريحة من `s` من `i` إلى `j` بخطوة `k`                                         |
| `len(s)`                 | طول `s`                                                                        |
| `min(s)`                 | أصغر عنصر من `s`                                                              |
| `max(s)`                 | أكبر عنصر من `s`                                                              |
| `s.index(x[, i[, j]])`   | فهرس أول ظهور لـ `x` في `s` (عند أو بعد الفهرس `i` وقبل `j`)                  |
| `s.count(x)`             | العدد الإجمالي لظهور `x` في `s`                                               |

انظر: https://docs.python.org/3/library/stdtypes.html#common-sequence-operations

## عمليات المتتاليات المتغيرة

في الجدول:
- `s` متتالية قابلة للتغيير (mutable sequence)
- `t` كائن قابل للتكرار (iterable)
- `x` كائن (object)

| **العملية**              | **النتيجة**                                                                 |
|--------------------------|-------------------------------------------------------------------------------|
| `s[i] = x`               | يتم استبدال العنصر `i` من `s` بـ `x`                                         |
| `s[i:j] = t`             | يتم استبدال الشريحة من `s` من `i` إلى `j` بمحتويات الكائن القابل للتكرار `t` |
| `del s[i:j]`             | نفس الشيء مثل `s[i:j] = []`                                                  |
| `s[i:j:k] = t`           | يتم استبدال عناصر `s[i:j:k]` بعناصر `t`                                      |
| `del s[i:j:k]`           | يتم إزالة عناصر `s[i:j:k]` من القائمة                                         |
| `s.append(x)`            | يتم إضافة `x` إلى نهاية التسلسل (نفس الشيء مثل `s[len(s):len(s)] = [x]`)     |
| `s.clear()`              | يتم إزالة جميع العناصر من `s` (نفس الشيء مثل `del s[:]`)                     |
| `s.copy()`               | يتم إنشاء نسخة سطحية من `s` (نفس الشيء مثل `s[:]`)                          |
| `s.extend(t)` أو `s += t`| يتم تمديد `s` بمحتويات `t`                                                   |
| `s *= n`                 | يتم تحديث `s` بمحتوياتها مكررة `n` مرات                                     |
| `s.insert(i, x)`         | يتم إدراج `x` في `s` عند الفهرس المحدد بـ `i` (نفس الشيء مثل `s[i:i] = [x]`) |
| `s.pop()` أو `s.pop(i)`  | يتم استرجاع العنصر عند `i` وإزالته من `s`                                    |
| `s.remove(x)`            | يتم إزالة أول عنصر من `s` حيث `s[i]` يساوي `x`                               |
| `s.reverse()`            | يتم عكس عناصر `s` في مكانها                                                  |

انظر: https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types


## عمليات أخرى للمتتاليات

### العد باستخدام `enumerate()`

نستخدم الدالة المدمجة [`enumerate(iterable, start=0)`](https://docs.python.org/3/library/functions.html#enumerate) لقراءة قائمة مع معرفة رقم كل عنصر. ويمكننا تحديد بداية العد بواسطة `start` (الافتراضي هو 0).

```{python}
seasons = ['Spring', 'Summer', 'Fall', 'Winter']
for i, s in enumerate(seasons, start=1):
    print(i, s)
```


### الربط باستخدام `zip()`

تستخدم الدالة المدمجة [`zip(*iterables, strict=False)`](https://docs.python.org/3/library/functions.html#zip) للمرور عبر عدة متتاليات بالتوازي، منتجةً جموعًا بحجم عددها تحتوي على عنصر من كل واحدة منها.

```{python}
names = ['Adam', 'Belal', 'Camal']
level = [25, 30, 35]

for name, lvl in zip(names, level, strict=True):
    print(name, 'is at level', lvl)
```

يستحب استعمال `strict=True` حتى يخرج خطأ من نوع `ValueError` إذا كان القابلة للتكرار (iterables) مختلفة في عدد العناصر.


### Comparison

String, tuples and lists are compared lexicographically; i.e., by comparing corresponding elements.

```{python}
assert (1, 2, 3) < (1, 2, 4)
assert [1, 2, 3] < [1, 2, 4]
assert 'abc' < 'abz'
```

The way strings are compared is using the Unicode code points of the characters.

Let's break it down with Python (remember, the `ord()` function returns the Unicode code point for a one-character string):

```{python}
s1 = 'abc'
s2 = 'abz'

l1 = []
l2 = []

for x in s1:
    l1.append(ord(x))

for x in s2:
    l2.append(ord(x))

print(l1)
print(l2)
```

The Unicode code points for the characters in `s1` are `[97, 98, 99]` and for `s2` are `[97, 98, 122]`. Since `99` is less than `122`, `'abc' < 'abz'` is `True`.

It follows that comparison between strings is case-sensitive, since `ord('A')` is less than `ord('a')`. Therefore, we normalize them into a unified case before comparision, either by converting them to lowercase or uppercase.

```{python}
name1 = 'Adam'
name2 = 'adam'
assert name1.lower() == name2.lower()
```


### Unpacking

Sequences can be unpacked into multiple variables.

```{python}
t = (10, 20, 30)
a, b, c = t
print(a, b, c)
```

```{python}
l = [10, 20, 30]
a, b, c = l
print(a, b, c)
```


### membership operator: `in`

The `in` operator is used to check if a value is present in a sequence (`str`, `list`, `range`, etc.).

```{python}
vowels = "aeiou"
print("a" in vowels)
```

Also works with lists:

```{python}
vowels = ["a", "e", "i", "o", "u"]
print("a" in vowels)
```

As well as tuples:

```{python}
vowels = ("a", "e", "i", "o", "u")
print("a" in vowels)
```
